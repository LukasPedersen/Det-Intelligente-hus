
IntelligenteHus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016c  00800200  00007ee8  00007f7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007ee8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000339  0080036c  0080036c  000080e8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000080e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008144  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001220  00000000  00000000  00008188  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002b6c7  00000000  00000000  000093a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000061e8  00000000  00000000  00034a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c57d  00000000  00000000  0003ac57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004d08  00000000  00000000  000471d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000081f1  00000000  00000000  0004bedc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000234d4  00000000  00000000  000540cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000015f8  00000000  00000000  000775a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2b c6       	rjmp	.+3158   	; 0xc58 <__dtors_end>
       2:	00 00       	nop
       4:	5a c6       	rjmp	.+3252   	; 0xcba <__bad_interrupt>
       6:	00 00       	nop
       8:	58 c6       	rjmp	.+3248   	; 0xcba <__bad_interrupt>
       a:	00 00       	nop
       c:	56 c6       	rjmp	.+3244   	; 0xcba <__bad_interrupt>
       e:	00 00       	nop
      10:	54 c6       	rjmp	.+3240   	; 0xcba <__bad_interrupt>
      12:	00 00       	nop
      14:	52 c6       	rjmp	.+3236   	; 0xcba <__bad_interrupt>
      16:	00 00       	nop
      18:	50 c6       	rjmp	.+3232   	; 0xcba <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4e c6       	rjmp	.+3228   	; 0xcba <__bad_interrupt>
      1e:	00 00       	nop
      20:	4c c6       	rjmp	.+3224   	; 0xcba <__bad_interrupt>
      22:	00 00       	nop
      24:	4a c6       	rjmp	.+3220   	; 0xcba <__bad_interrupt>
      26:	00 00       	nop
      28:	48 c6       	rjmp	.+3216   	; 0xcba <__bad_interrupt>
      2a:	00 00       	nop
      2c:	46 c6       	rjmp	.+3212   	; 0xcba <__bad_interrupt>
      2e:	00 00       	nop
      30:	44 c6       	rjmp	.+3208   	; 0xcba <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 a0 34 	jmp	0x6940	; 0x6940 <__vector_13>
      38:	40 c6       	rjmp	.+3200   	; 0xcba <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3e c6       	rjmp	.+3196   	; 0xcba <__bad_interrupt>
      3e:	00 00       	nop
      40:	3c c6       	rjmp	.+3192   	; 0xcba <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 ed 24 	jmp	0x49da	; 0x49da <__vector_17>
      48:	38 c6       	rjmp	.+3184   	; 0xcba <__bad_interrupt>
      4a:	00 00       	nop
      4c:	36 c6       	rjmp	.+3180   	; 0xcba <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 31 27 	jmp	0x4e62	; 0x4e62 <__vector_20>
      54:	32 c6       	rjmp	.+3172   	; 0xcba <__bad_interrupt>
      56:	00 00       	nop
      58:	30 c6       	rjmp	.+3168   	; 0xcba <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 ff 34 	jmp	0x69fe	; 0x69fe <__vector_23>
      60:	2c c6       	rjmp	.+3160   	; 0xcba <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 5d 2e 	jmp	0x5cba	; 0x5cba <__vector_25>
      68:	0c 94 93 2e 	jmp	0x5d26	; 0x5d26 <__vector_26>
      6c:	26 c6       	rjmp	.+3148   	; 0xcba <__bad_interrupt>
      6e:	00 00       	nop
      70:	24 c6       	rjmp	.+3144   	; 0xcba <__bad_interrupt>
      72:	00 00       	nop
      74:	22 c6       	rjmp	.+3140   	; 0xcba <__bad_interrupt>
      76:	00 00       	nop
      78:	20 c6       	rjmp	.+3136   	; 0xcba <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1e c6       	rjmp	.+3132   	; 0xcba <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 19 25 	jmp	0x4a32	; 0x4a32 <__vector_32>
      84:	1a c6       	rjmp	.+3124   	; 0xcba <__bad_interrupt>
      86:	00 00       	nop
      88:	18 c6       	rjmp	.+3120   	; 0xcba <__bad_interrupt>
      8a:	00 00       	nop
      8c:	16 c6       	rjmp	.+3116   	; 0xcba <__bad_interrupt>
      8e:	00 00       	nop
      90:	14 c6       	rjmp	.+3112   	; 0xcba <__bad_interrupt>
      92:	00 00       	nop
      94:	12 c6       	rjmp	.+3108   	; 0xcba <__bad_interrupt>
      96:	00 00       	nop
      98:	10 c6       	rjmp	.+3104   	; 0xcba <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 0d 29 	jmp	0x521a	; 0x521a <__vector_39>
      a0:	0c c6       	rjmp	.+3096   	; 0xcba <__bad_interrupt>
      a2:	00 00       	nop
      a4:	0a c6       	rjmp	.+3092   	; 0xcba <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 45 25 	jmp	0x4a8a	; 0x4a8a <__vector_42>
      ac:	06 c6       	rjmp	.+3084   	; 0xcba <__bad_interrupt>
      ae:	00 00       	nop
      b0:	04 c6       	rjmp	.+3080   	; 0xcba <__bad_interrupt>
      b2:	00 00       	nop
      b4:	02 c6       	rjmp	.+3076   	; 0xcba <__bad_interrupt>
      b6:	00 00       	nop
      b8:	00 c6       	rjmp	.+3072   	; 0xcba <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 71 25 	jmp	0x4ae2	; 0x4ae2 <__vector_47>
      c0:	fc c5       	rjmp	.+3064   	; 0xcba <__bad_interrupt>
      c2:	00 00       	nop
      c4:	fa c5       	rjmp	.+3060   	; 0xcba <__bad_interrupt>
      c6:	00 00       	nop
      c8:	f8 c5       	rjmp	.+3056   	; 0xcba <__bad_interrupt>
      ca:	00 00       	nop
      cc:	f6 c5       	rjmp	.+3052   	; 0xcba <__bad_interrupt>
      ce:	00 00       	nop
      d0:	f4 c5       	rjmp	.+3048   	; 0xcba <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f2 c5       	rjmp	.+3044   	; 0xcba <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f0 c5       	rjmp	.+3040   	; 0xcba <__bad_interrupt>
      da:	00 00       	nop
      dc:	ee c5       	rjmp	.+3036   	; 0xcba <__bad_interrupt>
      de:	00 00       	nop
      e0:	ec c5       	rjmp	.+3032   	; 0xcba <__bad_interrupt>
      e2:	00 00       	nop
      e4:	46 36       	cpi	r20, 0x66	; 102
      e6:	4b 36       	cpi	r20, 0x6B	; 107
      e8:	50 36       	cpi	r21, 0x60	; 96
      ea:	5a 36       	cpi	r21, 0x6A	; 106
      ec:	64 36       	cpi	r22, 0x64	; 100
      ee:	dd 36       	cpi	r29, 0x6D	; 109
      f0:	6e 36       	cpi	r22, 0x6E	; 110
      f2:	76 36       	cpi	r23, 0x66	; 102
      f4:	7e 36       	cpi	r23, 0x6E	; 110
      f6:	88 36       	cpi	r24, 0x68	; 104
      f8:	92 36       	cpi	r25, 0x62	; 98
      fa:	9c 36       	cpi	r25, 0x6C	; 108
      fc:	ab 36       	cpi	r26, 0x6B	; 107
      fe:	b5 36       	cpi	r27, 0x65	; 101
     100:	dd 36       	cpi	r29, 0x6D	; 109
     102:	bf 36       	cpi	r27, 0x6F	; 111
     104:	c9 36       	cpi	r28, 0x69	; 105
     106:	d3 36       	cpi	r29, 0x63	; 99
     108:	00 37       	cpi	r16, 0x70	; 112
     10a:	03 37       	cpi	r16, 0x73	; 115
     10c:	f2 36       	cpi	r31, 0x62	; 98
     10e:	f6 36       	cpi	r31, 0x66	; 102
     110:	fc 36       	cpi	r31, 0x6C	; 108
     112:	3a 37       	cpi	r19, 0x7A	; 122
     114:	07 37       	cpi	r16, 0x77	; 119
     116:	0b 37       	cpi	r16, 0x7B	; 123
     118:	11 37       	cpi	r17, 0x71	; 113
     11a:	15 37       	cpi	r17, 0x75	; 117
     11c:	19 37       	cpi	r17, 0x79	; 121
     11e:	1f 37       	cpi	r17, 0x7F	; 127
     120:	23 37       	cpi	r18, 0x73	; 115
     122:	27 37       	cpi	r18, 0x77	; 119
     124:	3a 37       	cpi	r19, 0x7A	; 122
     126:	2d 37       	cpi	r18, 0x7D	; 125
     128:	31 37       	cpi	r19, 0x71	; 113
     12a:	35 37       	cpi	r19, 0x75	; 117

0000012c <__trampolines_end>:
     12c:	4e 41       	sbci	r20, 0x1E	; 30
     12e:	4e 49       	Address 0x0000012e is out of bounds.
.word	0xffff	; ????

0000012f <pstr_inity>:
     12f:	49 4e 49 54 59                                      INITY

00000134 <pstr_inf>:
     134:	49 4e 46                                            INF

00000137 <pwr_m10>:
     137:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     147:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000014f <pwr_p10>:
     14f:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     15f:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000167 <_ZL4font>:
     167:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     177:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     187:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     197:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     1a7:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     1b7:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     1c7:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     1d7:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     1e7:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     1f7:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     207:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     217:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     227:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     237:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     247:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     257:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     267:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     277:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     287:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     297:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     2a7:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     2b7:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     2c7:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     2d7:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2e7:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2f7:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     307:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     317:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     327:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     337:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     347:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     357:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     367:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     377:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     387:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     397:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     3a7:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     3b7:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     3c7:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     3d7:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     3e7:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     3f7:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     407:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     417:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     427:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     437:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     447:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     457:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     467:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     477:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     487:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     497:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     4a7:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     4b7:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     4c7:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     4d7:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     4e7:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     4f7:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     507:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     517:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     527:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     537:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     547:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     557:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     567:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     577:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     587:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     597:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     5a7:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     5b7:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     5c7:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     5d7:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     5e7:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     5f7:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     607:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     617:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     627:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     637:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     647:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     657:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000667 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
     667:	22 00 ff 21 00                                      "..!.

0000066c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE8postmask>:
     66c:	00 01 03 07 0f 1f 3f 7f                             ......?.

00000674 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE7premask>:
     674:	00 80 c0 e0 f0 f8 fc fe                             ........

0000067c <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
     67c:	db 40 a4 a6 2e af                                   .@....

00000682 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
     682:	20 00 a1 c8                                          ...

00000686 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
     686:	d3 00 40 8d                                         ..@.

0000068a <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
     68a:	ae d5 80 a8                                         ....

0000068e <_ZL12splash2_data>:
     68e:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     69e:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     6ae:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     6ca:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     6da:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     6ea:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     6fa:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     70a:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     71a:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     72a:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     73a:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     74a:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     75a:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     76a:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     77a:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     78a:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     79a:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     7aa:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     7ba:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     7ca:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     7da:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     7ea:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     7fa:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     80a:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     822:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     832:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     842:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     852:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     862:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

0000086e <_ZL12splash1_data>:
     86e:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
     87e:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
     88e:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
     89e:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
     8ae:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
     8be:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
     8d6:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
     8e6:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
     8f6:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
     906:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
     916:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
     926:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
     936:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
     946:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
     956:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
     966:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
     976:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
     986:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
     996:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
     9a6:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
     9b6:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
     9c6:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
     9d6:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
     9e6:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
     9fe:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
     a16:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
     a26:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
     a36:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
     a46:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
     a56:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
     a66:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
     a76:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
     a86:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
     a96:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
     aa6:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
     ab6:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
     ac6:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
     ad6:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
     ae6:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
     af6:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
     b06:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
     b16:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
     b26:	ff fd 6b 5b db 6a fd c0                             ..k[.j..

00000b2e <_ZL21tone_pin_to_timer_PGM>:
     b2e:	02                                                  .

00000b2f <digital_pin_to_timer_PGM>:
     b2f:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     b5b:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000b75 <digital_pin_to_bit_mask_PGM>:
     b75:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     b85:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     b95:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     ba5:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     bb5:	04 08 10 20 40 80                                   ... @.

00000bbb <digital_pin_to_port_PGM>:
     bbb:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     bcb:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     bdb:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     beb:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     bfb:	0b 0b 0b 0b 0b 0b                                   ......

00000c01 <port_to_input_PGM>:
     c01:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     c11:	00 01 00 00 03 01 06 01 09 01                       ..........

00000c1b <port_to_output_PGM>:
     c1b:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     c2b:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000c35 <port_to_mode_PGM>:
     c35:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     c45:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000c50 <__ctors_start>:
     c50:	e0 09       	sbc	r30, r0
     c52:	38 2b       	or	r19, r24
     c54:	c5 2e       	mov	r12, r21

00000c56 <__ctors_end>:
     c56:	3d 0a       	sbc	r3, r29

00000c58 <__dtors_end>:
     c58:	11 24       	eor	r1, r1
     c5a:	1f be       	out	0x3f, r1	; 63
     c5c:	cf ef       	ldi	r28, 0xFF	; 255
     c5e:	d1 e2       	ldi	r29, 0x21	; 33
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	00 e0       	ldi	r16, 0x00	; 0
     c66:	0c bf       	out	0x3c, r16	; 60

00000c68 <__do_copy_data>:
     c68:	13 e0       	ldi	r17, 0x03	; 3
     c6a:	a0 e0       	ldi	r26, 0x00	; 0
     c6c:	b2 e0       	ldi	r27, 0x02	; 2
     c6e:	e8 ee       	ldi	r30, 0xE8	; 232
     c70:	fe e7       	ldi	r31, 0x7E	; 126
     c72:	00 e0       	ldi	r16, 0x00	; 0
     c74:	0b bf       	out	0x3b, r16	; 59
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <__do_copy_data+0x14>
     c78:	07 90       	elpm	r0, Z+
     c7a:	0d 92       	st	X+, r0
     c7c:	ac 36       	cpi	r26, 0x6C	; 108
     c7e:	b1 07       	cpc	r27, r17
     c80:	d9 f7       	brne	.-10     	; 0xc78 <__do_copy_data+0x10>

00000c82 <__do_clear_bss>:
     c82:	26 e0       	ldi	r18, 0x06	; 6
     c84:	ac e6       	ldi	r26, 0x6C	; 108
     c86:	b3 e0       	ldi	r27, 0x03	; 3
     c88:	01 c0       	rjmp	.+2      	; 0xc8c <.do_clear_bss_start>

00000c8a <.do_clear_bss_loop>:
     c8a:	1d 92       	st	X+, r1

00000c8c <.do_clear_bss_start>:
     c8c:	a5 3a       	cpi	r26, 0xA5	; 165
     c8e:	b2 07       	cpc	r27, r18
     c90:	e1 f7       	brne	.-8      	; 0xc8a <.do_clear_bss_loop>

00000c92 <__do_global_ctors>:
     c92:	16 e0       	ldi	r17, 0x06	; 6
     c94:	cb e2       	ldi	r28, 0x2B	; 43
     c96:	d6 e0       	ldi	r29, 0x06	; 6
     c98:	00 e0       	ldi	r16, 0x00	; 0
     c9a:	06 c0       	rjmp	.+12     	; 0xca8 <__do_global_ctors+0x16>
     c9c:	21 97       	sbiw	r28, 0x01	; 1
     c9e:	01 09       	sbc	r16, r1
     ca0:	80 2f       	mov	r24, r16
     ca2:	fe 01       	movw	r30, r28
     ca4:	0e 94 16 3b 	call	0x762c	; 0x762c <__tablejump2__>
     ca8:	c8 32       	cpi	r28, 0x28	; 40
     caa:	d1 07       	cpc	r29, r17
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	08 07       	cpc	r16, r24
     cb0:	a9 f7       	brne	.-22     	; 0xc9c <__do_global_ctors+0xa>
     cb2:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <main>
     cb6:	0c 94 63 3f 	jmp	0x7ec6	; 0x7ec6 <__do_global_dtors>

00000cba <__bad_interrupt>:
     cba:	a2 c9       	rjmp	.-3260   	; 0x0 <__vectors>

00000cbc <countPulseASM>:

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
     cbc:	cf 92       	push	r12
    push r13   ;   ;  131 pushqi1/1 [length = 1]
     cbe:	df 92       	push	r13
    push r14   ;   ;  132 pushqi1/1 [length = 1]
     cc0:	ef 92       	push	r14
    push r15   ;   ;  133 pushqi1/1 [length = 1]
     cc2:	ff 92       	push	r15
    push r16   ;   ;  134 pushqi1/1 [length = 1]
     cc4:	0f 93       	push	r16
    push r17   ;   ;  135 pushqi1/1 [length = 1]
     cc6:	1f 93       	push	r17
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
     cc8:	e8 2f       	mov	r30, r24
    mov r31,r25  ;  port, port
     cca:	f9 2f       	mov	r31, r25
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
     ccc:	05 c0       	rjmp	.+10     	; 0xcd8 <countPulseASM+0x1c>
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
     cce:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     cd0:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     cd2:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     cd4:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  19  branch  [length = 1]
     cd6:	61 f1       	breq	.+88     	; 0xd30 <countPulseASM+0x74>
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
     cd8:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
     cda:	96 23       	and	r25, r22
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
     cdc:	94 17       	cp	r25, r20
    breq .L4   ; ,   ;  26  branch  [length = 1]
     cde:	b9 f3       	breq	.-18     	; 0xcce <countPulseASM+0x12>
    rjmp .L6   ;   ;  184 jump  [length = 1]
     ce0:	05 c0       	rjmp	.+10     	; 0xcec <countPulseASM+0x30>
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
     ce2:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     ce4:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     ce6:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     ce8:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  33  branch  [length = 1]
     cea:	11 f1       	breq	.+68     	; 0xd30 <countPulseASM+0x74>
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
     cec:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
     cee:	96 23       	and	r25, r22
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
     cf0:	94 13       	cpse	r25, r20
    rjmp .L7   ;
     cf2:	f7 cf       	rjmp	.-18     	; 0xce2 <countPulseASM+0x26>
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
     cf4:	c1 2c       	mov	r12, r1
    mov r13, r1   ;  width
     cf6:	d1 2c       	mov	r13, r1
    mov r14, r1   ;  width
     cf8:	e1 2c       	mov	r14, r1
    mov r15, r1   ;  width
     cfa:	f1 2c       	mov	r15, r1
    rjmp .L9   ;   ;  186 jump  [length = 1]
     cfc:	0a c0       	rjmp	.+20     	; 0xd12 <countPulseASM+0x56>
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
    sub r12,r24  ;  width,
     d00:	c8 1a       	sub	r12, r24
    sbc r13,r24  ;  width,
     d02:	d8 0a       	sbc	r13, r24
    sbc r14,r24  ;  width,
     d04:	e8 0a       	sbc	r14, r24
    sbc r15,r24  ;  width,
     d06:	f8 0a       	sbc	r15, r24
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
     d08:	0c 15       	cp	r16, r12
    cpc r17,r13  ;  maxloops, width
     d0a:	1d 05       	cpc	r17, r13
    cpc r18,r14  ;  maxloops, width
     d0c:	2e 05       	cpc	r18, r14
    cpc r19,r15  ;  maxloops, width
     d0e:	3f 05       	cpc	r19, r15
    breq .L13  ; ,   ;  52  branch  [length = 1]
     d10:	79 f0       	breq	.+30     	; 0xd30 <countPulseASM+0x74>
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
     d12:	80 81       	ld	r24, Z
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
     d14:	86 23       	and	r24, r22
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
     d16:	84 17       	cp	r24, r20
    breq .L10  ; ,   ;  64  branch  [length = 1]
     d18:	91 f3       	breq	.-28     	; 0xcfe <countPulseASM+0x42>
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
     d1a:	6c 2d       	mov	r22, r12
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
     d1c:	7d 2d       	mov	r23, r13
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
     d1e:	8e 2d       	mov	r24, r14
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
     d20:	9f 2d       	mov	r25, r15
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
     d22:	1f 91       	pop	r17
    pop r16  ;   ;  172 popqi [length = 1]
     d24:	0f 91       	pop	r16
    pop r15  ;   ;  173 popqi [length = 1]
     d26:	ff 90       	pop	r15
    pop r14  ;   ;  174 popqi [length = 1]
     d28:	ef 90       	pop	r14
    pop r13  ;   ;  175 popqi [length = 1]
     d2a:	df 90       	pop	r13
    pop r12  ;   ;  176 popqi [length = 1]
     d2c:	cf 90       	pop	r12
    ret  ;  177 return_from_epilogue  [length = 1]
     d2e:	08 95       	ret
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
     d30:	60 e0       	ldi	r22, 0x00	; 0
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
     d32:	70 e0       	ldi	r23, 0x00	; 0
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
     d34:	80 e0       	ldi	r24, 0x00	; 0
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
     d36:	90 e0       	ldi	r25, 0x00	; 0
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
     d38:	1f 91       	pop	r17
    pop r16  ;   ;  139 popqi [length = 1]
     d3a:	0f 91       	pop	r16
    pop r15  ;   ;  140 popqi [length = 1]
     d3c:	ff 90       	pop	r15
    pop r14  ;   ;  141 popqi [length = 1]
     d3e:	ef 90       	pop	r14
    pop r13  ;   ;  142 popqi [length = 1]
     d40:	df 90       	pop	r13
    pop r12  ;   ;  143 popqi [length = 1]
     d42:	cf 90       	pop	r12
    ret  ;  144 return_from_epilogue  [length = 1]
     d44:	08 95       	ret

00000d46 <setup>:
DHT dht(DHTPIN, DHTTYPE);
LiquidCrystal lcd = LiquidCrystal(22, 23, 24, 25, 26, 27);
#pragma endregion Instances

void setup()
{
     d46:	0f 93       	push	r16
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     d48:	26 e0       	ldi	r18, 0x06	; 6
     d4a:	40 e8       	ldi	r20, 0x80	; 128
     d4c:	55 e2       	ldi	r21, 0x25	; 37
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	8f ec       	ldi	r24, 0xCF	; 207
     d54:	95 e0       	ldi	r25, 0x05	; 5
     d56:	0e 94 f8 2d 	call	0x5bf0	; 0x5bf0 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);		// Initiate a serial communication
	display.begin(SSD1306_SWITCHCAPVCC, 0x3C); // Initiate a OLED display
     d5a:	01 e0       	ldi	r16, 0x01	; 1
     d5c:	21 e0       	ldi	r18, 0x01	; 1
     d5e:	4c e3       	ldi	r20, 0x3C	; 60
     d60:	62 e0       	ldi	r22, 0x02	; 2
     d62:	87 e9       	ldi	r24, 0x97	; 151
     d64:	93 e0       	ldi	r25, 0x03	; 3
     d66:	0e 94 26 14 	call	0x284c	; 0x284c <_ZN16Adafruit_SSD13065beginEhhbb>
	SPI.begin();			// Initiate  SPI bus
     d6a:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <_ZN8SPIClass5beginEv>
	mfrc522.PCD_Init();		// Initiate MFRC522
     d6e:	87 ed       	ldi	r24, 0xD7	; 215
     d70:	93 e0       	ldi	r25, 0x03	; 3
     d72:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <_ZN7MFRC5228PCD_InitEv>
	dht.begin();			// Initiate DHT11 Sensor
     d76:	67 e3       	ldi	r22, 0x37	; 55
     d78:	84 e8       	ldi	r24, 0x84	; 132
     d7a:	93 e0       	ldi	r25, 0x03	; 3
     d7c:	0e 94 9d 18 	call	0x313a	; 0x313a <_ZN3DHT5beginEh>
	lcd.begin(16, 2);		// Initiate LCD Display
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	42 e0       	ldi	r20, 0x02	; 2
     d84:	60 e1       	ldi	r22, 0x10	; 16
     d86:	8c e6       	ldi	r24, 0x6C	; 108
     d88:	93 e0       	ldi	r25, 0x03	; 3
     d8a:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <_ZN13LiquidCrystal5beginEhhh>
	
	//Pin setup------------------------------
	servoDoor.attach(10); //Door Servo
     d8e:	6a e0       	ldi	r22, 0x0A	; 10
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	87 e6       	ldi	r24, 0x67	; 103
     d94:	94 e0       	ldi	r25, 0x04	; 4
     d96:	0e 94 65 26 	call	0x4cca	; 0x4cca <_ZN5Servo6attachEi>
	servoWindow.attach(6); //Window Servo
     d9a:	66 e0       	ldi	r22, 0x06	; 6
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	8b e5       	ldi	r24, 0x5B	; 91
     da0:	94 e0       	ldi	r25, 0x04	; 4
     da2:	0e 94 65 26 	call	0x4cca	; 0x4cca <_ZN5Servo6attachEi>

	pinMode(RED_Door, OUTPUT);
     da6:	61 e0       	ldi	r22, 0x01	; 1
     da8:	8c e0       	ldi	r24, 0x0C	; 12
     daa:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
	pinMode(Green_Door, OUTPUT);
     dae:	61 e0       	ldi	r22, 0x01	; 1
     db0:	8d e0       	ldi	r24, 0x0D	; 13
     db2:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
	
	pinMode(9, OUTPUT);
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	89 e0       	ldi	r24, 0x09	; 9
     dba:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
	pinMode(2, INPUT);
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
	
	pinMode(42, INPUT);
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	8a e2       	ldi	r24, 0x2A	; 42
     dca:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
	pinMode(43, INPUT);
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	8b e2       	ldi	r24, 0x2B	; 43
     dd2:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
	pinMode(44, INPUT);
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	8c e2       	ldi	r24, 0x2C	; 44
     dda:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
	pinMode(45, INPUT);
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	8d e2       	ldi	r24, 0x2D	; 45
     de2:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
	pinMode(46, INPUT);
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	8e e2       	ldi	r24, 0x2E	; 46
     dea:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
	pinMode(47, INPUT);
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	8f e2       	ldi	r24, 0x2F	; 47
     df2:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
	pinMode(48, INPUT);
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	80 e3       	ldi	r24, 0x30	; 48
     dfa:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
	pinMode(49, INPUT);
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	81 e3       	ldi	r24, 0x31	; 49
     e02:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
	
	pinMode(trigPin, OUTPUT);
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	84 e0       	ldi	r24, 0x04	; 4
     e0a:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
	pinMode(echoPin, INPUT);
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	87 e0       	ldi	r24, 0x07	; 7
     e12:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
	//---------------------------------------
	
	//Cooler--------------------
	pinMode(CoolerPin, OUTPUT);
     e16:	61 e0       	ldi	r22, 0x01	; 1
     e18:	83 e0       	ldi	r24, 0x03	; 3
     e1a:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
	//--------------------------
	
	//Heater--------------------
	pinMode(HeaterPin, OUTPUT);
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	8e e1       	ldi	r24, 0x1E	; 30
     e22:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
	//--------------------------
	
	//Window--------------------
	pinMode(WindowPin, OUTPUT);
     e26:	61 e0       	ldi	r22, 0x01	; 1
     e28:	86 e0       	ldi	r24, 0x06	; 6
	//--------------------------
}
     e2a:	0f 91       	pop	r16
	//Heater--------------------
	pinMode(HeaterPin, OUTPUT);
	//--------------------------
	
	//Window--------------------
	pinMode(WindowPin, OUTPUT);
     e2c:	0c 94 3b 37 	jmp	0x6e76	; 0x6e76 <pinMode>

00000e30 <_Z9DoorLightv>:
	MeasureDistance();
}

#pragma region Door
void DoorLight()
{
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
	if (millis() - delayLed >= DELAY_LED)
     e34:	0e 94 49 35 	call	0x6a92	; 0x6a92 <millis>
     e38:	00 91 5f 04 	lds	r16, 0x045F	; 0x80045f <delayLed>
     e3c:	10 91 60 04 	lds	r17, 0x0460	; 0x800460 <delayLed+0x1>
     e40:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <delayLed+0x2>
     e44:	30 91 62 04 	lds	r19, 0x0462	; 0x800462 <delayLed+0x3>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	80 1b       	sub	r24, r16
     e4e:	91 0b       	sbc	r25, r17
     e50:	a2 0b       	sbc	r26, r18
     e52:	b3 0b       	sbc	r27, r19
     e54:	00 91 26 02 	lds	r16, 0x0226	; 0x800226 <DELAY_LED>
     e58:	10 91 27 02 	lds	r17, 0x0227	; 0x800227 <DELAY_LED+0x1>
     e5c:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <DELAY_LED+0x2>
     e60:	30 91 29 02 	lds	r19, 0x0229	; 0x800229 <DELAY_LED+0x3>
     e64:	80 17       	cp	r24, r16
     e66:	91 07       	cpc	r25, r17
     e68:	a2 07       	cpc	r26, r18
     e6a:	b3 07       	cpc	r27, r19
     e6c:	70 f1       	brcs	.+92     	; 0xeca <_Z9DoorLightv+0x9a>
	{
		
		delayLed = millis();
     e6e:	0e 94 49 35 	call	0x6a92	; 0x6a92 <millis>
     e72:	60 93 5f 04 	sts	0x045F, r22	; 0x80045f <delayLed>
     e76:	70 93 60 04 	sts	0x0460, r23	; 0x800460 <delayLed+0x1>
     e7a:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <delayLed+0x2>
     e7e:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <delayLed+0x3>
		if (switchLED)
     e82:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <switchLED>
     e86:	88 23       	and	r24, r24
     e88:	c1 f0       	breq	.+48     	; 0xeba <_Z9DoorLightv+0x8a>
		{
			tone(9, 3500, 250);
     e8a:	2a ef       	ldi	r18, 0xFA	; 250
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	40 e0       	ldi	r20, 0x00	; 0
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	6c ea       	ldi	r22, 0xAC	; 172
     e94:	7d e0       	ldi	r23, 0x0D	; 13
     e96:	89 e0       	ldi	r24, 0x09	; 9
     e98:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <_Z4tonehjm>
			delay(400);
     e9c:	60 e9       	ldi	r22, 0x90	; 144
     e9e:	71 e0       	ldi	r23, 0x01	; 1
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 7a 35 	call	0x6af4	; 0x6af4 <delay>
			tone(9, 3000, 250);
     ea8:	2a ef       	ldi	r18, 0xFA	; 250
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	68 eb       	ldi	r22, 0xB8	; 184
     eb2:	7b e0       	ldi	r23, 0x0B	; 11
     eb4:	89 e0       	ldi	r24, 0x09	; 9
     eb6:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <_Z4tonehjm>
		}
		switchLED = false;
     eba:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <switchLED>
		
		servoDoor.write(95);
     ebe:	6f e5       	ldi	r22, 0x5F	; 95
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	87 e6       	ldi	r24, 0x67	; 103
     ec4:	94 e0       	ldi	r25, 0x04	; 4
     ec6:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <_ZN5Servo5writeEi>
	}
	digitalWrite(RED_Door, !switchLED);
     eca:	60 91 5e 04 	lds	r22, 0x045E	; 0x80045e <switchLED>
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	68 27       	eor	r22, r24
     ed2:	8c e0       	ldi	r24, 0x0C	; 12
     ed4:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
	digitalWrite(Green_Door, switchLED);
     ed8:	60 91 5e 04 	lds	r22, 0x045E	; 0x80045e <switchLED>
     edc:	8d e0       	ldi	r24, 0x0D	; 13
}
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
		switchLED = false;
		
		servoDoor.write(95);
	}
	digitalWrite(RED_Door, !switchLED);
	digitalWrite(Green_Door, switchLED);
     ee2:	0c 94 77 37 	jmp	0x6eee	; 0x6eee <digitalWrite>

00000ee6 <_Z11ShowDisplayv>:
	}
}
void ShowDisplay()
{
	//OLED-----------------------------------------------
	display.clearDisplay();
     ee6:	87 e9       	ldi	r24, 0x97	; 151
     ee8:	93 e0       	ldi	r25, 0x03	; 3
     eea:	0e 94 08 14 	call	0x2810	; 0x2810 <_ZN16Adafruit_SSD130612clearDisplayEv>

	display.setTextSize(1); // Normal 1:1 pixel scale
     eee:	61 e0       	ldi	r22, 0x01	; 1
     ef0:	87 e9       	ldi	r24, 0x97	; 151
     ef2:	93 e0       	ldi	r25, 0x03	; 3
     ef4:	0e 94 9f 11 	call	0x233e	; 0x233e <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
     ef8:	e7 e9       	ldi	r30, 0x97	; 151
     efa:	f3 e0       	ldi	r31, 0x03	; 3
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	93 8b       	std	Z+19, r25	; 0x13
     f02:	82 8b       	std	Z+18, r24	; 0x12
     f04:	91 8b       	std	Z+17, r25	; 0x11
     f06:	80 8b       	std	Z+16, r24	; 0x10
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
     f08:	15 86       	std	Z+13, r1	; 0x0d
     f0a:	14 86       	std	Z+12, r1	; 0x0c
    cursor_y = y;
     f0c:	17 86       	std	Z+15, r1	; 0x0f
     f0e:	16 86       	std	Z+14, r1	; 0x0e
	display.setTextColor(WHITE); // Draw white text
	display.setCursor(0,0); // Start at top-left corner
	
	display.println("Smart house Temp sys");
     f10:	6b e2       	ldi	r22, 0x2B	; 43
     f12:	72 e0       	ldi	r23, 0x02	; 2
     f14:	cf 01       	movw	r24, r30
     f16:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <_ZN5Print7printlnEPKc>
	display.println("---------------------");
     f1a:	60 e4       	ldi	r22, 0x40	; 64
     f1c:	72 e0       	ldi	r23, 0x02	; 2
     f1e:	87 e9       	ldi	r24, 0x97	; 151
     f20:	93 e0       	ldi	r25, 0x03	; 3
     f22:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <_ZN5Print7printlnEPKc>
	display.print("Target temp:");
     f26:	66 e5       	ldi	r22, 0x56	; 86
     f28:	72 e0       	ldi	r23, 0x02	; 2
     f2a:	87 e9       	ldi	r24, 0x97	; 151
     f2c:	93 e0       	ldi	r25, 0x03	; 3
     f2e:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <_ZN5Print5printEPKc>
	display.print(targetTemp, 1);
     f32:	40 91 22 02 	lds	r20, 0x0222	; 0x800222 <targetTemp>
     f36:	50 91 23 02 	lds	r21, 0x0223	; 0x800223 <targetTemp+0x1>
     f3a:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <targetTemp+0x2>
     f3e:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <targetTemp+0x3>
     f42:	21 e0       	ldi	r18, 0x01	; 1
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	87 e9       	ldi	r24, 0x97	; 151
     f48:	93 e0       	ldi	r25, 0x03	; 3
     f4a:	0e 94 e0 30 	call	0x61c0	; 0x61c0 <_ZN5Print5printEdi>
	display.println(" C");
     f4e:	63 e6       	ldi	r22, 0x63	; 99
     f50:	72 e0       	ldi	r23, 0x02	; 2
     f52:	87 e9       	ldi	r24, 0x97	; 151
     f54:	93 e0       	ldi	r25, 0x03	; 3
     f56:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <_ZN5Print7printlnEPKc>
	display.print("Current temp:");
     f5a:	66 e6       	ldi	r22, 0x66	; 102
     f5c:	72 e0       	ldi	r23, 0x02	; 2
     f5e:	87 e9       	ldi	r24, 0x97	; 151
     f60:	93 e0       	ldi	r25, 0x03	; 3
     f62:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <_ZN5Print5printEPKc>
	display.print(float(dht.readTemperature()),1);
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	84 e8       	ldi	r24, 0x84	; 132
     f6c:	93 e0       	ldi	r25, 0x03	; 3
     f6e:	0e 94 ef 19 	call	0x33de	; 0x33de <_ZN3DHT15readTemperatureEbb>
     f72:	ab 01       	movw	r20, r22
     f74:	bc 01       	movw	r22, r24
     f76:	21 e0       	ldi	r18, 0x01	; 1
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	87 e9       	ldi	r24, 0x97	; 151
     f7c:	93 e0       	ldi	r25, 0x03	; 3
     f7e:	0e 94 e0 30 	call	0x61c0	; 0x61c0 <_ZN5Print5printEdi>
	display.println(" C");
     f82:	63 e6       	ldi	r22, 0x63	; 99
     f84:	72 e0       	ldi	r23, 0x02	; 2
     f86:	87 e9       	ldi	r24, 0x97	; 151
     f88:	93 e0       	ldi	r25, 0x03	; 3
     f8a:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <_ZN5Print7printlnEPKc>
	display.println("---------------------");
     f8e:	60 e4       	ldi	r22, 0x40	; 64
     f90:	72 e0       	ldi	r23, 0x02	; 2
     f92:	87 e9       	ldi	r24, 0x97	; 151
     f94:	93 e0       	ldi	r25, 0x03	; 3
     f96:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <_ZN5Print7printlnEPKc>
	display.print("Target humidity:");
     f9a:	64 e7       	ldi	r22, 0x74	; 116
     f9c:	72 e0       	ldi	r23, 0x02	; 2
     f9e:	87 e9       	ldi	r24, 0x97	; 151
     fa0:	93 e0       	ldi	r25, 0x03	; 3
     fa2:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <_ZN5Print5printEPKc>
	display.print(targetHumidity);
     fa6:	40 91 1e 02 	lds	r20, 0x021E	; 0x80021e <targetHumidity>
     faa:	50 91 1f 02 	lds	r21, 0x021F	; 0x80021f <targetHumidity+0x1>
     fae:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <targetHumidity+0x2>
     fb2:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <targetHumidity+0x3>
     fb6:	2a e0       	ldi	r18, 0x0A	; 10
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	87 e9       	ldi	r24, 0x97	; 151
     fbc:	93 e0       	ldi	r25, 0x03	; 3
     fbe:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <_ZN5Print5printEli>
	display.println("%");
     fc2:	65 e8       	ldi	r22, 0x85	; 133
     fc4:	72 e0       	ldi	r23, 0x02	; 2
     fc6:	87 e9       	ldi	r24, 0x97	; 151
     fc8:	93 e0       	ldi	r25, 0x03	; 3
     fca:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <_ZN5Print7printlnEPKc>
	display.print("Current humidity:");
     fce:	67 e8       	ldi	r22, 0x87	; 135
     fd0:	72 e0       	ldi	r23, 0x02	; 2
     fd2:	87 e9       	ldi	r24, 0x97	; 151
     fd4:	93 e0       	ldi	r25, 0x03	; 3
     fd6:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <_ZN5Print5printEPKc>
	display.print(float(dht.readHumidity()),0);
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	84 e8       	ldi	r24, 0x84	; 132
     fde:	93 e0       	ldi	r25, 0x03	; 3
     fe0:	0e 94 83 1a 	call	0x3506	; 0x3506 <_ZN3DHT12readHumidityEb>
     fe4:	ab 01       	movw	r20, r22
     fe6:	bc 01       	movw	r22, r24
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	87 e9       	ldi	r24, 0x97	; 151
     fee:	93 e0       	ldi	r25, 0x03	; 3
     ff0:	0e 94 e0 30 	call	0x61c0	; 0x61c0 <_ZN5Print5printEdi>
	display.println("%");
     ff4:	65 e8       	ldi	r22, 0x85	; 133
     ff6:	72 e0       	ldi	r23, 0x02	; 2
     ff8:	87 e9       	ldi	r24, 0x97	; 151
     ffa:	93 e0       	ldi	r25, 0x03	; 3
     ffc:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <_ZN5Print7printlnEPKc>
	display.print("---------------------");
    1000:	60 e4       	ldi	r22, 0x40	; 64
    1002:	72 e0       	ldi	r23, 0x02	; 2
    1004:	87 e9       	ldi	r24, 0x97	; 151
    1006:	93 e0       	ldi	r25, 0x03	; 3
    1008:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <_ZN5Print5printEPKc>
	display.display();
    100c:	87 e9       	ldi	r24, 0x97	; 151
    100e:	93 e0       	ldi	r25, 0x03	; 3
    1010:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <_ZN16Adafruit_SSD13067displayEv>
	//------------------------------------------------
	
	//LCD---------------------------------------------
	lcd.clear();
    1014:	8c e6       	ldi	r24, 0x6C	; 108
    1016:	93 e0       	ldi	r25, 0x03	; 3
    1018:	0e 94 77 1e 	call	0x3cee	; 0x3cee <_ZN13LiquidCrystal5clearEv>
	lcd.setCursor(0, 0);
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	8c e6       	ldi	r24, 0x6C	; 108
    1022:	93 e0       	ldi	r25, 0x03	; 3
    1024:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(keyValue);
    1028:	65 e5       	ldi	r22, 0x55	; 85
    102a:	74 e0       	ldi	r23, 0x04	; 4
    102c:	8c e6       	ldi	r24, 0x6C	; 108
    102e:	93 e0       	ldi	r25, 0x03	; 3
    1030:	0e 94 3f 2f 	call	0x5e7e	; 0x5e7e <_ZN5Print5printERK6String>
	lcd.setCursor(12, 0);
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	6c e0       	ldi	r22, 0x0C	; 12
    1038:	8c e6       	ldi	r24, 0x6C	; 108
    103a:	93 e0       	ldi	r25, 0x03	; 3
    103c:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Set:");
    1040:	69 e9       	ldi	r22, 0x99	; 153
    1042:	72 e0       	ldi	r23, 0x02	; 2
    1044:	8c e6       	ldi	r24, 0x6C	; 108
    1046:	93 e0       	ldi	r25, 0x03	; 3
    1048:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <_ZN5Print5printEPKc>
	lcd.setCursor(0, 1);
    104c:	41 e0       	ldi	r20, 0x01	; 1
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	8c e6       	ldi	r24, 0x6C	; 108
    1052:	93 e0       	ldi	r25, 0x03	; 3
    1054:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13LiquidCrystal9setCursorEhh>
	lcd.println("A =temp B =humid");
    1058:	6e e9       	ldi	r22, 0x9E	; 158
    105a:	72 e0       	ldi	r23, 0x02	; 2
    105c:	8c e6       	ldi	r24, 0x6C	; 108
    105e:	93 e0       	ldi	r25, 0x03	; 3
    1060:	0c 94 68 2f 	jmp	0x5ed0	; 0x5ed0 <_ZN5Print7printlnEPKc>

00001064 <_Z17TemperaturControlv>:
}
#pragma endregion Door

#pragma region Temp
void TemperaturControl()
{
    1064:	cf 92       	push	r12
    1066:	df 92       	push	r13
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	00 d0       	rcall	.+0      	; 0x1072 <_Z17TemperaturControlv+0xe>
    1072:	00 d0       	rcall	.+0      	; 0x1074 <_Z17TemperaturControlv+0x10>
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
	ShowDisplay();
    1078:	36 df       	rcall	.-404    	; 0xee6 <_Z11ShowDisplayv>
	
	if (dht.readTemperature() >= (targetTemp + 0.2))
    107a:	40 e0       	ldi	r20, 0x00	; 0
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	84 e8       	ldi	r24, 0x84	; 132
    1080:	93 e0       	ldi	r25, 0x03	; 3
    1082:	0e 94 ef 19 	call	0x33de	; 0x33de <_ZN3DHT15readTemperatureEbb>
    1086:	6b 01       	movw	r12, r22
    1088:	7c 01       	movw	r14, r24
    108a:	2d ec       	ldi	r18, 0xCD	; 205
    108c:	3c ec       	ldi	r19, 0xCC	; 204
    108e:	4c e4       	ldi	r20, 0x4C	; 76
    1090:	5e e3       	ldi	r21, 0x3E	; 62
    1092:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <targetTemp>
    1096:	70 91 23 02 	lds	r23, 0x0223	; 0x800223 <targetTemp+0x1>
    109a:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <targetTemp+0x2>
    109e:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <targetTemp+0x3>
    10a2:	0e 94 3c 2b 	call	0x5678	; 0x5678 <__addsf3>
    10a6:	9b 01       	movw	r18, r22
    10a8:	ac 01       	movw	r20, r24
    10aa:	c7 01       	movw	r24, r14
    10ac:	b6 01       	movw	r22, r12
    10ae:	0e 94 87 2c 	call	0x590e	; 0x590e <__gesf2>
    10b2:	87 fd       	sbrc	r24, 7
    10b4:	0c c0       	rjmp	.+24     	; 0x10ce <_Z17TemperaturControlv+0x6a>
	{
		analogWrite(CoolerPin, 255);
    10b6:	6f ef       	ldi	r22, 0xFF	; 255
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	83 e0       	ldi	r24, 0x03	; 3
    10bc:	0e 94 20 36 	call	0x6c40	; 0x6c40 <analogWrite>
		digitalWrite(HeaterPin, LOW);
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	8e e1       	ldi	r24, 0x1E	; 30
    10c4:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
		servoWindow.write(100);
    10c8:	64 e6       	ldi	r22, 0x64	; 100
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	54 c0       	rjmp	.+168    	; 0x1176 <_Z17TemperaturControlv+0x112>
	}
	else if (dht.readTemperature() >= targetTemp && dht.readHumidity() >= targetHumidity)
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	84 e8       	ldi	r24, 0x84	; 132
    10d4:	93 e0       	ldi	r25, 0x03	; 3
    10d6:	0e 94 ef 19 	call	0x33de	; 0x33de <_ZN3DHT15readTemperatureEbb>
    10da:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <targetTemp>
    10de:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <targetTemp+0x1>
    10e2:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <targetTemp+0x2>
    10e6:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <targetTemp+0x3>
    10ea:	0e 94 87 2c 	call	0x590e	; 0x590e <__gesf2>
    10ee:	87 fd       	sbrc	r24, 7
    10f0:	19 c0       	rjmp	.+50     	; 0x1124 <_Z17TemperaturControlv+0xc0>
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	84 e8       	ldi	r24, 0x84	; 132
    10f6:	93 e0       	ldi	r25, 0x03	; 3
    10f8:	0e 94 83 1a 	call	0x3506	; 0x3506 <_ZN3DHT12readHumidityEb>
    10fc:	6b 01       	movw	r12, r22
    10fe:	7c 01       	movw	r14, r24
    1100:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <targetHumidity>
    1104:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <targetHumidity+0x1>
    1108:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <targetHumidity+0x2>
    110c:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <targetHumidity+0x3>
    1110:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <__floatsisf>
    1114:	9b 01       	movw	r18, r22
    1116:	ac 01       	movw	r20, r24
    1118:	c7 01       	movw	r24, r14
    111a:	b6 01       	movw	r22, r12
    111c:	0e 94 87 2c 	call	0x590e	; 0x590e <__gesf2>
    1120:	87 ff       	sbrs	r24, 7
    1122:	27 c0       	rjmp	.+78     	; 0x1172 <_Z17TemperaturControlv+0x10e>
	{
		servoWindow.write(180);
	}
	else if (dht.readTemperature() <= (targetTemp - 0.2))
    1124:	40 e0       	ldi	r20, 0x00	; 0
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	84 e8       	ldi	r24, 0x84	; 132
    112a:	93 e0       	ldi	r25, 0x03	; 3
    112c:	0e 94 ef 19 	call	0x33de	; 0x33de <_ZN3DHT15readTemperatureEbb>
    1130:	6b 01       	movw	r12, r22
    1132:	7c 01       	movw	r14, r24
    1134:	2d ec       	ldi	r18, 0xCD	; 205
    1136:	3c ec       	ldi	r19, 0xCC	; 204
    1138:	4c e4       	ldi	r20, 0x4C	; 76
    113a:	5e e3       	ldi	r21, 0x3E	; 62
    113c:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <targetTemp>
    1140:	70 91 23 02 	lds	r23, 0x0223	; 0x800223 <targetTemp+0x1>
    1144:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <targetTemp+0x2>
    1148:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <targetTemp+0x3>
    114c:	0e 94 3b 2b 	call	0x5676	; 0x5676 <__subsf3>
    1150:	9b 01       	movw	r18, r22
    1152:	ac 01       	movw	r20, r24
    1154:	c7 01       	movw	r24, r14
    1156:	b6 01       	movw	r22, r12
    1158:	0e 94 a0 2b 	call	0x5740	; 0x5740 <__cmpsf2>
    115c:	18 16       	cp	r1, r24
    115e:	7c f0       	brlt	.+30     	; 0x117e <_Z17TemperaturControlv+0x11a>
	{
		analogWrite(CoolerPin, 0);
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	83 e0       	ldi	r24, 0x03	; 3
    1166:	0e 94 20 36 	call	0x6c40	; 0x6c40 <analogWrite>
		digitalWrite(HeaterPin, HIGH);
    116a:	61 e0       	ldi	r22, 0x01	; 1
    116c:	8e e1       	ldi	r24, 0x1E	; 30
    116e:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
		servoWindow.write(180);
    1172:	64 eb       	ldi	r22, 0xB4	; 180
    1174:	70 e0       	ldi	r23, 0x00	; 0
    1176:	8b e5       	ldi	r24, 0x5B	; 91
    1178:	94 e0       	ldi	r25, 0x04	; 4
    117a:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <_ZN5Servo5writeEi>
	}
	
	if (dht.readHumidity() >= targetHumidity)
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	84 e8       	ldi	r24, 0x84	; 132
    1182:	93 e0       	ldi	r25, 0x03	; 3
    1184:	0e 94 83 1a 	call	0x3506	; 0x3506 <_ZN3DHT12readHumidityEb>
    1188:	6b 01       	movw	r12, r22
    118a:	7c 01       	movw	r14, r24
    118c:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <targetHumidity>
    1190:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <targetHumidity+0x1>
    1194:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <targetHumidity+0x2>
    1198:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <targetHumidity+0x3>
    119c:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <__floatsisf>
    11a0:	9b 01       	movw	r18, r22
    11a2:	ac 01       	movw	r20, r24
    11a4:	c7 01       	movw	r24, r14
    11a6:	b6 01       	movw	r22, r12
    11a8:	0e 94 87 2c 	call	0x590e	; 0x590e <__gesf2>
    11ac:	87 fd       	sbrc	r24, 7
    11ae:	06 c0       	rjmp	.+12     	; 0x11bc <_Z17TemperaturControlv+0x158>
	{
		servoWindow.write(40);
    11b0:	68 e2       	ldi	r22, 0x28	; 40
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	8b e5       	ldi	r24, 0x5B	; 91
    11b6:	94 e0       	ldi	r25, 0x04	; 4
    11b8:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <_ZN5Servo5writeEi>
	}
	
	char customKey = customKeypad.getKey();
    11bc:	87 ee       	ldi	r24, 0xE7	; 231
    11be:	93 e0       	ldi	r25, 0x03	; 3
    11c0:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <_ZN6Keypad6getKeyEv>
	if (customKey)
    11c4:	88 23       	and	r24, r24
    11c6:	09 f4       	brne	.+2      	; 0x11ca <_Z17TemperaturControlv+0x166>
    11c8:	75 c0       	rjmp	.+234    	; 0x12b4 <_Z17TemperaturControlv+0x250>
	{
		switch (customKey)
    11ca:	82 34       	cpi	r24, 0x42	; 66
    11cc:	81 f1       	breq	.+96     	; 0x122e <_Z17TemperaturControlv+0x1ca>
    11ce:	18 f5       	brcc	.+70     	; 0x1216 <_Z17TemperaturControlv+0x1b2>
    11d0:	8a 32       	cpi	r24, 0x2A	; 42
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <_Z17TemperaturControlv+0x172>
    11d4:	68 c0       	rjmp	.+208    	; 0x12a6 <_Z17TemperaturControlv+0x242>
    11d6:	81 34       	cpi	r24, 0x41	; 65
    11d8:	09 f0       	breq	.+2      	; 0x11dc <_Z17TemperaturControlv+0x178>
    11da:	67 c0       	rjmp	.+206    	; 0x12aa <_Z17TemperaturControlv+0x246>
		{
			case 'A':
			newValue = keyValue.toFloat();
    11dc:	85 e5       	ldi	r24, 0x55	; 85
    11de:	94 e0       	ldi	r25, 0x04	; 4
    11e0:	0e 94 46 3a 	call	0x748c	; 0x748c <_ZNK6String7toFloatEv>
    11e4:	60 93 51 04 	sts	0x0451, r22	; 0x800451 <newValue>
    11e8:	70 93 52 04 	sts	0x0452, r23	; 0x800452 <newValue+0x1>
    11ec:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <newValue+0x2>
    11f0:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <newValue+0x3>
			targetTemp = newValue;
    11f4:	60 93 22 02 	sts	0x0222, r22	; 0x800222 <targetTemp>
    11f8:	70 93 23 02 	sts	0x0223, r23	; 0x800223 <targetTemp+0x1>
    11fc:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <targetTemp+0x2>
    1200:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <targetTemp+0x3>
			keyValue = "";
    1204:	6e e5       	ldi	r22, 0x5E	; 94
    1206:	73 e0       	ldi	r23, 0x03	; 3
    1208:	85 e5       	ldi	r24, 0x55	; 85
    120a:	94 e0       	ldi	r25, 0x04	; 4
    120c:	0e 94 03 39 	call	0x7206	; 0x7206 <_ZN6StringaSEPKc>
			analogWrite(6, 255);
    1210:	6f ef       	ldi	r22, 0xFF	; 255
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	2a c0       	rjmp	.+84     	; 0x126a <_Z17TemperaturControlv+0x206>
	}
	
	char customKey = customKeypad.getKey();
	if (customKey)
	{
		switch (customKey)
    1216:	83 34       	cpi	r24, 0x43	; 67
    1218:	61 f1       	breq	.+88     	; 0x1272 <_Z17TemperaturControlv+0x20e>
    121a:	84 34       	cpi	r24, 0x44	; 68
    121c:	09 f0       	breq	.+2      	; 0x1220 <_Z17TemperaturControlv+0x1bc>
    121e:	45 c0       	rjmp	.+138    	; 0x12aa <_Z17TemperaturControlv+0x246>
			case 'C':
			keyValue = keyValue.substring(0, keyValue.length()-1);
			break;
			
			case 'D':
			keyValue = "";
    1220:	6e e5       	ldi	r22, 0x5E	; 94
    1222:	73 e0       	ldi	r23, 0x03	; 3
    1224:	85 e5       	ldi	r24, 0x55	; 85
    1226:	94 e0       	ldi	r25, 0x04	; 4
    1228:	0e 94 03 39 	call	0x7206	; 0x7206 <_ZN6StringaSEPKc>
			break;
    122c:	43 c0       	rjmp	.+134    	; 0x12b4 <_Z17TemperaturControlv+0x250>
			keyValue = "";
			analogWrite(6, 255);
			break;
			
			case 'B':
			newValue = keyValue.toFloat();
    122e:	85 e5       	ldi	r24, 0x55	; 85
    1230:	94 e0       	ldi	r25, 0x04	; 4
    1232:	0e 94 46 3a 	call	0x748c	; 0x748c <_ZNK6String7toFloatEv>
    1236:	60 93 51 04 	sts	0x0451, r22	; 0x800451 <newValue>
    123a:	70 93 52 04 	sts	0x0452, r23	; 0x800452 <newValue+0x1>
    123e:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <newValue+0x2>
    1242:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <newValue+0x3>
			targetHumidity = newValue;
    1246:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__fixsfsi>
    124a:	60 93 1e 02 	sts	0x021E, r22	; 0x80021e <targetHumidity>
    124e:	70 93 1f 02 	sts	0x021F, r23	; 0x80021f <targetHumidity+0x1>
    1252:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <targetHumidity+0x2>
    1256:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <targetHumidity+0x3>
			keyValue = "";
    125a:	6e e5       	ldi	r22, 0x5E	; 94
    125c:	73 e0       	ldi	r23, 0x03	; 3
    125e:	85 e5       	ldi	r24, 0x55	; 85
    1260:	94 e0       	ldi	r25, 0x04	; 4
    1262:	0e 94 03 39 	call	0x7206	; 0x7206 <_ZN6StringaSEPKc>
			analogWrite(6, 0);
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	86 e0       	ldi	r24, 0x06	; 6
    126c:	0e 94 20 36 	call	0x6c40	; 0x6c40 <analogWrite>
			break;
    1270:	21 c0       	rjmp	.+66     	; 0x12b4 <_Z17TemperaturControlv+0x250>
			
			case 'C':
			keyValue = keyValue.substring(0, keyValue.length()-1);
    1272:	20 91 59 04 	lds	r18, 0x0459	; 0x800459 <keyValue+0x4>
    1276:	30 91 5a 04 	lds	r19, 0x045A	; 0x80045a <keyValue+0x5>
    127a:	21 50       	subi	r18, 0x01	; 1
    127c:	31 09       	sbc	r19, r1
    127e:	40 e0       	ldi	r20, 0x00	; 0
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	65 e5       	ldi	r22, 0x55	; 85
    1284:	74 e0       	ldi	r23, 0x04	; 4
    1286:	ce 01       	movw	r24, r28
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	0e 94 de 39 	call	0x73bc	; 0x73bc <_ZNK6String9substringEjj>
    128e:	be 01       	movw	r22, r28
    1290:	6f 5f       	subi	r22, 0xFF	; 255
    1292:	7f 4f       	sbci	r23, 0xFF	; 255
    1294:	85 e5       	ldi	r24, 0x55	; 85
    1296:	94 e0       	ldi	r25, 0x04	; 4
    1298:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <_ZN6StringaSEOS_>
    129c:	ce 01       	movw	r24, r28
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	0e 94 3f 38 	call	0x707e	; 0x707e <_ZN6StringD1Ev>
			break;
    12a4:	07 c0       	rjmp	.+14     	; 0x12b4 <_Z17TemperaturControlv+0x250>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    12a6:	6e e2       	ldi	r22, 0x2E	; 46
    12a8:	01 c0       	rjmp	.+2      	; 0x12ac <_Z17TemperaturControlv+0x248>
    12aa:	68 2f       	mov	r22, r24
    12ac:	85 e5       	ldi	r24, 0x55	; 85
    12ae:	94 e0       	ldi	r25, 0x04	; 4
    12b0:	0e 94 ad 39 	call	0x735a	; 0x735a <_ZN6String6concatEc>
			default:
			keyValue += customKey;
			break;
		}
	}
}
    12b4:	26 96       	adiw	r28, 0x06	; 6
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	ff 90       	pop	r15
    12c6:	ef 90       	pop	r14
    12c8:	df 90       	pop	r13
    12ca:	cf 90       	pop	r12
    12cc:	08 95       	ret

000012ce <_Z15MeasureDistancev>:
}
#pragma endregion Temp

#pragma region Ultrasonic Sensor Module
void MeasureDistance()
{
    12ce:	cf 92       	push	r12
    12d0:	df 92       	push	r13
    12d2:	ef 92       	push	r14
    12d4:	ff 92       	push	r15
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	00 d0       	rcall	.+0      	; 0x12dc <_Z15MeasureDistancev+0xe>
    12dc:	00 d0       	rcall	.+0      	; 0x12de <_Z15MeasureDistancev+0x10>
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
	// Clears the trigPin condition
	digitalWrite(trigPin, LOW);
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	84 e0       	ldi	r24, 0x04	; 4
    12e6:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
	delayMicroseconds(2);
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <delayMicroseconds>
	// Sets the trigPin HIGH (ACTIVE) for 10 microseconds
	digitalWrite(trigPin, HIGH);
    12f2:	61 e0       	ldi	r22, 0x01	; 1
    12f4:	84 e0       	ldi	r24, 0x04	; 4
    12f6:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
	delayMicroseconds(10);
    12fa:	8a e0       	ldi	r24, 0x0A	; 10
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <delayMicroseconds>
	digitalWrite(trigPin, LOW);
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	84 e0       	ldi	r24, 0x04	; 4
    1306:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
	// Reads the echoPin, returns the sound wave travel time in microseconds
	duration = pulseIn(echoPin, HIGH);
    130a:	20 e4       	ldi	r18, 0x40	; 64
    130c:	32 e4       	ldi	r19, 0x42	; 66
    130e:	4f e0       	ldi	r20, 0x0F	; 15
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	61 e0       	ldi	r22, 0x01	; 1
    1314:	87 e0       	ldi	r24, 0x07	; 7
    1316:	0e 94 cd 37 	call	0x6f9a	; 0x6f9a <pulseIn>
    131a:	60 93 4d 04 	sts	0x044D, r22	; 0x80044d <duration>
    131e:	70 93 4e 04 	sts	0x044E, r23	; 0x80044e <duration+0x1>
    1322:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <duration+0x2>
    1326:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <duration+0x3>
	// Calculating the distance
	distance = duration / 58; // Speed of sound wave divided by 2 (go and back)
    132a:	2a e3       	ldi	r18, 0x3A	; 58
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	40 e0       	ldi	r20, 0x00	; 0
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <__divmodsi4>
    1336:	ca 01       	movw	r24, r20
    1338:	b9 01       	movw	r22, r18
    133a:	30 93 4c 04 	sts	0x044C, r19	; 0x80044c <distance+0x1>
    133e:	20 93 4b 04 	sts	0x044B, r18	; 0x80044b <distance>

	if (distance <= 30)
    1342:	2f 31       	cpi	r18, 0x1F	; 31
    1344:	31 05       	cpc	r19, r1
    1346:	7c f5       	brge	.+94     	; 0x13a6 <_Z15MeasureDistancev+0xd8>
	{
		String tempDelay = String(distance);
    1348:	4a e0       	ldi	r20, 0x0A	; 10
    134a:	ce 01       	movw	r24, r28
    134c:	01 96       	adiw	r24, 0x01	; 1
    134e:	0e 94 43 39 	call	0x7286	; 0x7286 <_ZN6StringC1Eih>
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    1352:	60 eb       	ldi	r22, 0xB0	; 176
    1354:	72 e0       	ldi	r23, 0x02	; 2
    1356:	ce 01       	movw	r24, r28
    1358:	01 96       	adiw	r24, 0x01	; 1
    135a:	0e 94 9f 39 	call	0x733e	; 0x733e <_ZN6String6concatEPKc>
		tempDelay += "0";
		int distanceDelay = tempDelay.toInt();
    135e:	ce 01       	movw	r24, r28
    1360:	01 96       	adiw	r24, 0x01	; 1
    1362:	0e 94 32 3a 	call	0x7464	; 0x7464 <_ZNK6String5toIntEv>
    1366:	6b 01       	movw	r12, r22
    1368:	7c 01       	movw	r14, r24
		Serial.println(tempDelay);
    136a:	be 01       	movw	r22, r28
    136c:	6f 5f       	subi	r22, 0xFF	; 255
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	8f ec       	ldi	r24, 0xCF	; 207
    1372:	95 e0       	ldi	r25, 0x05	; 5
    1374:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <_ZN5Print7printlnERK6String>
		tone(9, 3000, distance);
    1378:	20 91 4b 04 	lds	r18, 0x044B	; 0x80044b <distance>
    137c:	30 91 4c 04 	lds	r19, 0x044C	; 0x80044c <distance+0x1>
    1380:	03 2e       	mov	r0, r19
    1382:	00 0c       	add	r0, r0
    1384:	44 0b       	sbc	r20, r20
    1386:	55 0b       	sbc	r21, r21
    1388:	68 eb       	ldi	r22, 0xB8	; 184
    138a:	7b e0       	ldi	r23, 0x0B	; 11
    138c:	89 e0       	ldi	r24, 0x09	; 9
    138e:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <_Z4tonehjm>
		delay(distanceDelay);
    1392:	b6 01       	movw	r22, r12
    1394:	dd 0c       	add	r13, r13
    1396:	88 0b       	sbc	r24, r24
    1398:	99 0b       	sbc	r25, r25
    139a:	0e 94 7a 35 	call	0x6af4	; 0x6af4 <delay>
	// Calculating the distance
	distance = duration / 58; // Speed of sound wave divided by 2 (go and back)

	if (distance <= 30)
	{
		String tempDelay = String(distance);
    139e:	ce 01       	movw	r24, r28
    13a0:	01 96       	adiw	r24, 0x01	; 1
    13a2:	0e 94 3f 38 	call	0x707e	; 0x707e <_ZN6StringD1Ev>
		int distanceDelay = tempDelay.toInt();
		Serial.println(tempDelay);
		tone(9, 3000, distance);
		delay(distanceDelay);
	}
}
    13a6:	26 96       	adiw	r28, 0x06	; 6
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	ff 90       	pop	r15
    13b8:	ef 90       	pop	r14
    13ba:	df 90       	pop	r13
    13bc:	cf 90       	pop	r12
    13be:	08 95       	ret

000013c0 <_GLOBAL__sub_I_servoDoor>:
    13c0:	8f 92       	push	r8
    13c2:	9f 92       	push	r9
    13c4:	af 92       	push	r10
    13c6:	bf 92       	push	r11
    13c8:	cf 92       	push	r12
    13ca:	df 92       	push	r13
    13cc:	ef 92       	push	r14
    13ce:	ff 92       	push	r15
    13d0:	0f 93       	push	r16
#define SS_PIN 53
#define RST_PIN 52
#define RED_Door 12
#define Green_Door 13

Servo servoDoor;
    13d2:	87 e6       	ldi	r24, 0x67	; 103
    13d4:	94 e0       	ldi	r25, 0x04	; 4
    13d6:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <_ZN5ServoC1Ev>
//Temperature Control------------
#define CoolerPin 3
#define HeaterPin 30
#define WindowPin 6

Servo servoWindow;
    13da:	8b e5       	ldi	r24, 0x5B	; 91
    13dc:	94 e0       	ldi	r25, 0x04	; 4
    13de:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <_ZN5ServoC1Ev>
float targetTemp = 25.5;
long targetHumidity = 30;
String keyValue = "";
    13e2:	6e e5       	ldi	r22, 0x5E	; 94
    13e4:	73 e0       	ldi	r23, 0x03	; 3
    13e6:	85 e5       	ldi	r24, 0x55	; 85
    13e8:	94 e0       	ldi	r25, 0x04	; 4
    13ea:	0e 94 a9 38 	call	0x7152	; 0x7152 <_ZN6StringC1EPKc>

#include "Headder.h"

// Create instances.
#pragma region Instances
Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);
    13ee:	84 e0       	ldi	r24, 0x04	; 4
    13f0:	e8 2e       	mov	r14, r24
    13f2:	04 e0       	ldi	r16, 0x04	; 4
    13f4:	26 e0       	ldi	r18, 0x06	; 6
    13f6:	32 e0       	ldi	r19, 0x02	; 2
    13f8:	4a e0       	ldi	r20, 0x0A	; 10
    13fa:	52 e0       	ldi	r21, 0x02	; 2
    13fc:	6e e0       	ldi	r22, 0x0E	; 14
    13fe:	72 e0       	ldi	r23, 0x02	; 2
    1400:	87 ee       	ldi	r24, 0xE7	; 231
    1402:	93 e0       	ldi	r25, 0x03	; 3
    1404:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <_ZN6KeypadC1EPcPhS1_hh>
MFRC522 mfrc522(SS_PIN, RST_PIN);
    1408:	44 e3       	ldi	r20, 0x34	; 52
    140a:	65 e3       	ldi	r22, 0x35	; 53
    140c:	87 ed       	ldi	r24, 0xD7	; 215
    140e:	93 e0       	ldi	r25, 0x03	; 3
    1410:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <_ZN7MFRC522C1Ehh>
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    1414:	90 ea       	ldi	r25, 0xA0	; 160
    1416:	89 2e       	mov	r8, r25
    1418:	96 e8       	ldi	r25, 0x86	; 134
    141a:	99 2e       	mov	r9, r25
    141c:	aa 24       	eor	r10, r10
    141e:	a3 94       	inc	r10
    1420:	b1 2c       	mov	r11, r1
    1422:	20 e8       	ldi	r18, 0x80	; 128
    1424:	c2 2e       	mov	r12, r18
    1426:	2a e1       	ldi	r18, 0x1A	; 26
    1428:	d2 2e       	mov	r13, r18
    142a:	26 e0       	ldi	r18, 0x06	; 6
    142c:	e2 2e       	mov	r14, r18
    142e:	f1 2c       	mov	r15, r1
    1430:	29 e7       	ldi	r18, 0x79	; 121
    1432:	35 e0       	ldi	r19, 0x05	; 5
    1434:	40 e4       	ldi	r20, 0x40	; 64
    1436:	60 e8       	ldi	r22, 0x80	; 128
    1438:	87 e9       	ldi	r24, 0x97	; 151
    143a:	93 e0       	ldi	r25, 0x03	; 3
    143c:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
DHT dht(DHTPIN, DHTTYPE);
    1440:	26 e0       	ldi	r18, 0x06	; 6
    1442:	4b e0       	ldi	r20, 0x0B	; 11
    1444:	62 e0       	ldi	r22, 0x02	; 2
    1446:	84 e8       	ldi	r24, 0x84	; 132
    1448:	93 e0       	ldi	r25, 0x03	; 3
    144a:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <_ZN3DHTC1Ehhh>
LiquidCrystal lcd = LiquidCrystal(22, 23, 24, 25, 26, 27);
    144e:	3b e1       	ldi	r19, 0x1B	; 27
    1450:	c3 2e       	mov	r12, r19
    1452:	4a e1       	ldi	r20, 0x1A	; 26
    1454:	e4 2e       	mov	r14, r20
    1456:	09 e1       	ldi	r16, 0x19	; 25
    1458:	28 e1       	ldi	r18, 0x18	; 24
    145a:	47 e1       	ldi	r20, 0x17	; 23
    145c:	66 e1       	ldi	r22, 0x16	; 22
    145e:	8c e6       	ldi	r24, 0x6C	; 108
    1460:	93 e0       	ldi	r25, 0x03	; 3
    1462:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <_ZN13LiquidCrystalC1Ehhhhhh>
		int distanceDelay = tempDelay.toInt();
		Serial.println(tempDelay);
		tone(9, 3000, distance);
		delay(distanceDelay);
	}
}
    1466:	0f 91       	pop	r16
    1468:	ff 90       	pop	r15
    146a:	ef 90       	pop	r14
    146c:	df 90       	pop	r13
    146e:	cf 90       	pop	r12
    1470:	bf 90       	pop	r11
    1472:	af 90       	pop	r10
    1474:	9f 90       	pop	r9
    1476:	8f 90       	pop	r8
    1478:	08 95       	ret

0000147a <_GLOBAL__sub_D_servoDoor>:

// Create instances.
#pragma region Instances
Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);
MFRC522 mfrc522(SS_PIN, RST_PIN);
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    147a:	87 e9       	ldi	r24, 0x97	; 151
    147c:	93 e0       	ldi	r25, 0x03	; 3
    147e:	0e 94 af 12 	call	0x255e	; 0x255e <_ZN16Adafruit_SSD1306D1Ev>
    1482:	85 e5       	ldi	r24, 0x55	; 85
    1484:	94 e0       	ldi	r25, 0x04	; 4
    1486:	0c 94 3f 38 	jmp	0x707e	; 0x707e <_ZN6StringD1Ev>

0000148a <_Z9FrontDoorv>:
	}
	digitalWrite(RED_Door, !switchLED);
	digitalWrite(Green_Door, switchLED);
}
void FrontDoor()
{
    148a:	ef 92       	push	r14
    148c:	ff 92       	push	r15
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	2c 97       	sbiw	r28, 0x0c	; 12
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
	delayStart = millis();
    14a4:	0e 94 49 35 	call	0x6a92	; 0x6a92 <millis>
    14a8:	60 93 63 04 	sts	0x0463, r22	; 0x800463 <delayStart>
    14ac:	70 93 64 04 	sts	0x0464, r23	; 0x800464 <delayStart+0x1>
    14b0:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <delayStart+0x2>
    14b4:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <delayStart+0x3>
	if (! mfrc522.PICC_IsNewCardPresent())
    14b8:	87 ed       	ldi	r24, 0xD7	; 215
    14ba:	93 e0       	ldi	r25, 0x03	; 3
    14bc:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
    14c0:	88 23       	and	r24, r24
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <_Z9FrontDoorv+0x3c>
    14c4:	90 c0       	rjmp	.+288    	; 0x15e6 <_Z9FrontDoorv+0x15c>
	{
		return;
	}
	if (mfrc522.PICC_ReadCardSerial() || ! mfrc522.PICC_IsNewCardPresent())
    14c6:	87 ed       	ldi	r24, 0xD7	; 215
    14c8:	93 e0       	ldi	r25, 0x03	; 3
    14ca:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <_ZN7MFRC52219PICC_ReadCardSerialEv>
    14ce:	81 11       	cpse	r24, r1
    14d0:	06 c0       	rjmp	.+12     	; 0x14de <_Z9FrontDoorv+0x54>
    14d2:	87 ed       	ldi	r24, 0xD7	; 215
    14d4:	93 e0       	ldi	r25, 0x03	; 3
    14d6:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
    14da:	81 11       	cpse	r24, r1
    14dc:	84 c0       	rjmp	.+264    	; 0x15e6 <_Z9FrontDoorv+0x15c>
	{
		String content= "";
    14de:	6e e5       	ldi	r22, 0x5E	; 94
    14e0:	73 e0       	ldi	r23, 0x03	; 3
    14e2:	ce 01       	movw	r24, r28
    14e4:	07 96       	adiw	r24, 0x07	; 7
    14e6:	0e 94 a9 38 	call	0x7152	; 0x7152 <_ZN6StringC1EPKc>
		byte letter;
		for (byte i = 0; i < mfrc522.uid.size; i++)
    14ea:	10 e0       	ldi	r17, 0x00	; 0
    14ec:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <mfrc522+0x2>
    14f0:	18 17       	cp	r17, r24
    14f2:	90 f5       	brcc	.+100    	; 0x1558 <_Z9FrontDoorv+0xce>
		{
			content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
    14f4:	81 2f       	mov	r24, r17
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9c 01       	movw	r18, r24
    14fa:	29 52       	subi	r18, 0x29	; 41
    14fc:	3c 4f       	sbci	r19, 0xFC	; 252
    14fe:	79 01       	movw	r14, r18
    1500:	f9 01       	movw	r30, r18
    1502:	83 81       	ldd	r24, Z+3	; 0x03
    1504:	80 31       	cpi	r24, 0x10	; 16
    1506:	18 f0       	brcs	.+6      	; 0x150e <_Z9FrontDoorv+0x84>
    1508:	62 eb       	ldi	r22, 0xB2	; 178
    150a:	72 e0       	ldi	r23, 0x02	; 2
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <_Z9FrontDoorv+0x88>
    150e:	6f ea       	ldi	r22, 0xAF	; 175
    1510:	72 e0       	ldi	r23, 0x02	; 2
    1512:	ce 01       	movw	r24, r28
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	0e 94 a9 38 	call	0x7152	; 0x7152 <_ZN6StringC1EPKc>
    151a:	be 01       	movw	r22, r28
    151c:	6f 5f       	subi	r22, 0xFF	; 255
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	ce 01       	movw	r24, r28
    1522:	07 96       	adiw	r24, 0x07	; 7
    1524:	0e 94 99 39 	call	0x7332	; 0x7332 <_ZN6String6concatERKS_>
    1528:	ce 01       	movw	r24, r28
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	0e 94 3f 38 	call	0x707e	; 0x707e <_ZN6StringD1Ev>
			content.concat(String(mfrc522.uid.uidByte[i], HEX));
    1530:	40 e1       	ldi	r20, 0x10	; 16
    1532:	f7 01       	movw	r30, r14
    1534:	63 81       	ldd	r22, Z+3	; 0x03
    1536:	ce 01       	movw	r24, r28
    1538:	01 96       	adiw	r24, 0x01	; 1
    153a:	0e 94 18 39 	call	0x7230	; 0x7230 <_ZN6StringC1Ehh>
    153e:	be 01       	movw	r22, r28
    1540:	6f 5f       	subi	r22, 0xFF	; 255
    1542:	7f 4f       	sbci	r23, 0xFF	; 255
    1544:	ce 01       	movw	r24, r28
    1546:	07 96       	adiw	r24, 0x07	; 7
    1548:	0e 94 99 39 	call	0x7332	; 0x7332 <_ZN6String6concatERKS_>
    154c:	ce 01       	movw	r24, r28
    154e:	01 96       	adiw	r24, 0x01	; 1
    1550:	0e 94 3f 38 	call	0x707e	; 0x707e <_ZN6StringD1Ev>
	}
	if (mfrc522.PICC_ReadCardSerial() || ! mfrc522.PICC_IsNewCardPresent())
	{
		String content= "";
		byte letter;
		for (byte i = 0; i < mfrc522.uid.size; i++)
    1554:	1f 5f       	subi	r17, 0xFF	; 255
    1556:	ca cf       	rjmp	.-108    	; 0x14ec <_Z9FrontDoorv+0x62>
		{
			content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
			content.concat(String(mfrc522.uid.uidByte[i], HEX));
		}
		content.toUpperCase();
    1558:	ce 01       	movw	r24, r28
    155a:	07 96       	adiw	r24, 0x07	; 7
    155c:	0e 94 21 3a 	call	0x7442	; 0x7442 <_ZN6String11toUpperCaseEv>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    1560:	2b 85       	ldd	r18, Y+11	; 0x0b
    1562:	3c 85       	ldd	r19, Y+12	; 0x0c
    1564:	41 e0       	ldi	r20, 0x01	; 1
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	be 01       	movw	r22, r28
    156a:	69 5f       	subi	r22, 0xF9	; 249
    156c:	7f 4f       	sbci	r23, 0xFF	; 255
    156e:	ce 01       	movw	r24, r28
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	0e 94 de 39 	call	0x73bc	; 0x73bc <_ZNK6String9substringEjj>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    1576:	64 eb       	ldi	r22, 0xB4	; 180
    1578:	72 e0       	ldi	r23, 0x02	; 2
    157a:	ce 01       	movw	r24, r28
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	0e 94 c0 39 	call	0x7380	; 0x7380 <_ZNK6String6equalsEPKc>
    1582:	18 2f       	mov	r17, r24
		
		if (content.substring(1) == "E2 B6 DF 1B")//Authorized access
    1584:	ce 01       	movw	r24, r28
    1586:	01 96       	adiw	r24, 0x01	; 1
    1588:	0e 94 3f 38 	call	0x707e	; 0x707e <_ZN6StringD1Ev>
		{
			tone(9, 3000, 250);
    158c:	2a ef       	ldi	r18, 0xFA	; 250
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	40 e0       	ldi	r20, 0x00	; 0
    1592:	50 e0       	ldi	r21, 0x00	; 0
			content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
			content.concat(String(mfrc522.uid.uidByte[i], HEX));
		}
		content.toUpperCase();
		
		if (content.substring(1) == "E2 B6 DF 1B")//Authorized access
    1594:	11 23       	and	r17, r17
    1596:	f1 f0       	breq	.+60     	; 0x15d4 <_Z9FrontDoorv+0x14a>
		{
			tone(9, 3000, 250);
    1598:	68 eb       	ldi	r22, 0xB8	; 184
    159a:	7b e0       	ldi	r23, 0x0B	; 11
    159c:	89 e0       	ldi	r24, 0x09	; 9
    159e:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <_Z4tonehjm>
			delay(400);
    15a2:	60 e9       	ldi	r22, 0x90	; 144
    15a4:	71 e0       	ldi	r23, 0x01	; 1
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	0e 94 7a 35 	call	0x6af4	; 0x6af4 <delay>
			tone(9, 3500, 250);
    15ae:	2a ef       	ldi	r18, 0xFA	; 250
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	40 e0       	ldi	r20, 0x00	; 0
    15b4:	50 e0       	ldi	r21, 0x00	; 0
    15b6:	6c ea       	ldi	r22, 0xAC	; 172
    15b8:	7d e0       	ldi	r23, 0x0D	; 13
    15ba:	89 e0       	ldi	r24, 0x09	; 9
    15bc:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <_Z4tonehjm>
			switchLED = true;
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <switchLED>
			servoDoor.write(0);
    15c6:	60 e0       	ldi	r22, 0x00	; 0
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	87 e6       	ldi	r24, 0x67	; 103
    15cc:	94 e0       	ldi	r25, 0x04	; 4
    15ce:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <_ZN5Servo5writeEi>
    15d2:	05 c0       	rjmp	.+10     	; 0x15de <_Z9FrontDoorv+0x154>
		}
		else//Unauthorized access
		{
			tone(9, 1000, 250);
    15d4:	68 ee       	ldi	r22, 0xE8	; 232
    15d6:	73 e0       	ldi	r23, 0x03	; 3
    15d8:	89 e0       	ldi	r24, 0x09	; 9
    15da:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <_Z4tonehjm>
	{
		return;
	}
	if (mfrc522.PICC_ReadCardSerial() || ! mfrc522.PICC_IsNewCardPresent())
	{
		String content= "";
    15de:	ce 01       	movw	r24, r28
    15e0:	07 96       	adiw	r24, 0x07	; 7
    15e2:	0e 94 3f 38 	call	0x707e	; 0x707e <_ZN6StringD1Ev>
		{
			tone(9, 1000, 250);
			
		}
	}
}
    15e6:	2c 96       	adiw	r28, 0x0c	; 12
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	ff 90       	pop	r15
    15fa:	ef 90       	pop	r14
    15fc:	08 95       	ret

000015fe <loop>:
}

void loop()
{
	
	FrontDoor();
    15fe:	45 df       	rcall	.-374    	; 0x148a <_Z9FrontDoorv>
	DoorLight();
    1600:	17 dc       	rcall	.-2002   	; 0xe30 <_Z9DoorLightv>
	TemperaturControl();
    1602:	30 dd       	rcall	.-1440   	; 0x1064 <_Z17TemperaturControlv>
    1604:	64 ce       	rjmp	.-824    	; 0x12ce <_Z15MeasureDistancev>

00001606 <_ZN8SPIClass16beginTransactionE11SPISettings>:
	MeasureDistance();
    1606:	20 91 01 05 	lds	r18, 0x0501	; 0x800501 <_ZN8SPIClass13interruptModeE>

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    160a:	22 23       	and	r18, r18
    160c:	99 f0       	breq	.+38     	; 0x1634 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      uint8_t sreg = SREG;
    160e:	4f b7       	in	r20, 0x3f	; 63
      noInterrupts();
    1610:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    1612:	20 91 01 05 	lds	r18, 0x0501	; 0x800501 <_ZN8SPIClass13interruptModeE>
    1616:	21 30       	cpi	r18, 0x01	; 1
    1618:	59 f4       	brne	.+22     	; 0x1630 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
        interruptSave = SPI_AVR_EIMSK;
    161a:	2d b3       	in	r18, 0x1d	; 29
    161c:	20 93 ff 04 	sts	0x04FF, r18	; 0x8004ff <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    1620:	3d b3       	in	r19, 0x1d	; 29
    1622:	20 91 00 05 	lds	r18, 0x0500	; 0x800500 <_ZN8SPIClass13interruptMaskE>
    1626:	20 95       	com	r18
    1628:	23 23       	and	r18, r19
    162a:	2d bb       	out	0x1d, r18	; 29
        SREG = sreg;
    162c:	4f bf       	out	0x3f, r20	; 63
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      } else
      #endif
      {
        interruptSave = sreg;
    1630:	40 93 ff 04 	sts	0x04FF, r20	; 0x8004ff <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    1634:	8c bd       	out	0x2c, r24	; 44
    SPSR = settings.spsr;
    1636:	9d bd       	out	0x2d, r25	; 45
    1638:	08 95       	ret

0000163a <_ZN8SPIClass14endTransactionEv>:
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    163a:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <_ZN8SPIClass13interruptModeE>
    163e:	88 23       	and	r24, r24
    1640:	61 f0       	breq	.+24     	; 0x165a <_ZN8SPIClass14endTransactionEv+0x20>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    1642:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    1644:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    1646:	20 91 01 05 	lds	r18, 0x0501	; 0x800501 <_ZN8SPIClass13interruptModeE>
    164a:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <_ZN8SPIClass13interruptSaveE>
    164e:	21 30       	cpi	r18, 0x01	; 1
    1650:	19 f4       	brne	.+6      	; 0x1658 <_ZN8SPIClass14endTransactionEv+0x1e>
        SPI_AVR_EIMSK = interruptSave;
    1652:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    1654:	9f bf       	out	0x3f, r25	; 63
    1656:	08 95       	ret
      } else
      #endif
      {
        SREG = interruptSave;
    1658:	8f bf       	out	0x3f, r24	; 63
    165a:	08 95       	ret

0000165c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	08 95       	ret

00001662 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1662:	08 95       	ret

00001664 <_ZN12Adafruit_GFX9writeLineEiiiij>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
  drawChar(x, y, c, color, bg, size, size);
}
    1664:	2f 92       	push	r2
    1666:	3f 92       	push	r3
    1668:	4f 92       	push	r4
    166a:	5f 92       	push	r5
    166c:	6f 92       	push	r6
    166e:	7f 92       	push	r7
    1670:	8f 92       	push	r8
    1672:	9f 92       	push	r9
    1674:	af 92       	push	r10
    1676:	bf 92       	push	r11
    1678:	cf 92       	push	r12
    167a:	df 92       	push	r13
    167c:	ef 92       	push	r14
    167e:	ff 92       	push	r15
    1680:	0f 93       	push	r16
    1682:	1f 93       	push	r17
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	00 d0       	rcall	.+0      	; 0x168a <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    168a:	00 d0       	rcall	.+0      	; 0x168c <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	2c 01       	movw	r4, r24
    1692:	7e 83       	std	Y+6, r23	; 0x06
    1694:	6d 83       	std	Y+5, r22	; 0x05
    1696:	6a 01       	movw	r12, r20
    1698:	59 01       	movw	r10, r18
    169a:	c8 01       	movw	r24, r16
    169c:	fc 82       	std	Y+4, r15	; 0x04
    169e:	eb 82       	std	Y+3, r14	; 0x03
    16a0:	48 01       	movw	r8, r16
    16a2:	84 1a       	sub	r8, r20
    16a4:	95 0a       	sbc	r9, r21
    16a6:	97 fe       	sbrs	r9, 7
    16a8:	03 c0       	rjmp	.+6      	; 0x16b0 <_ZN12Adafruit_GFX9writeLineEiiiij+0x4c>
    16aa:	91 94       	neg	r9
    16ac:	81 94       	neg	r8
    16ae:	91 08       	sbc	r9, r1
    16b0:	35 01       	movw	r6, r10
    16b2:	2d 81       	ldd	r18, Y+5	; 0x05
    16b4:	3e 81       	ldd	r19, Y+6	; 0x06
    16b6:	62 1a       	sub	r6, r18
    16b8:	73 0a       	sbc	r7, r19
    16ba:	77 fe       	sbrs	r7, 7
    16bc:	03 c0       	rjmp	.+6      	; 0x16c4 <_ZN12Adafruit_GFX9writeLineEiiiij+0x60>
    16be:	71 94       	neg	r7
    16c0:	61 94       	neg	r6
    16c2:	71 08       	sbc	r7, r1
    16c4:	68 14       	cp	r6, r8
    16c6:	79 04       	cpc	r7, r9
    16c8:	5c f4       	brge	.+22     	; 0x16e0 <_ZN12Adafruit_GFX9writeLineEiiiij+0x7c>
    16ca:	3a 2d       	mov	r19, r10
    16cc:	2b 2d       	mov	r18, r11
    16ce:	5c 01       	movw	r10, r24
    16d0:	83 2f       	mov	r24, r19
    16d2:	92 2f       	mov	r25, r18
    16d4:	3d 81       	ldd	r19, Y+5	; 0x05
    16d6:	2e 81       	ldd	r18, Y+6	; 0x06
    16d8:	de 82       	std	Y+6, r13	; 0x06
    16da:	cd 82       	std	Y+5, r12	; 0x05
    16dc:	c3 2e       	mov	r12, r19
    16de:	d2 2e       	mov	r13, r18
    16e0:	ad 81       	ldd	r26, Y+5	; 0x05
    16e2:	be 81       	ldd	r27, Y+6	; 0x06
    16e4:	aa 16       	cp	r10, r26
    16e6:	bb 06       	cpc	r11, r27
    16e8:	5c f4       	brge	.+22     	; 0x1700 <_ZN12Adafruit_GFX9writeLineEiiiij+0x9c>
    16ea:	3c 2d       	mov	r19, r12
    16ec:	2d 2d       	mov	r18, r13
    16ee:	6c 01       	movw	r12, r24
    16f0:	83 2f       	mov	r24, r19
    16f2:	92 2f       	mov	r25, r18
    16f4:	3d 81       	ldd	r19, Y+5	; 0x05
    16f6:	2e 81       	ldd	r18, Y+6	; 0x06
    16f8:	be 82       	std	Y+6, r11	; 0x06
    16fa:	ad 82       	std	Y+5, r10	; 0x05
    16fc:	a3 2e       	mov	r10, r19
    16fe:	b2 2e       	mov	r11, r18
    1700:	85 01       	movw	r16, r10
    1702:	2d 81       	ldd	r18, Y+5	; 0x05
    1704:	3e 81       	ldd	r19, Y+6	; 0x06
    1706:	02 1b       	sub	r16, r18
    1708:	13 0b       	sbc	r17, r19
    170a:	1c 01       	movw	r2, r24
    170c:	2c 18       	sub	r2, r12
    170e:	3d 08       	sbc	r3, r13
    1710:	37 fe       	sbrs	r3, 7
    1712:	03 c0       	rjmp	.+6      	; 0x171a <_ZN12Adafruit_GFX9writeLineEiiiij+0xb6>
    1714:	31 94       	neg	r3
    1716:	21 94       	neg	r2
    1718:	31 08       	sbc	r3, r1
    171a:	78 01       	movw	r14, r16
    171c:	17 ff       	sbrs	r17, 7
    171e:	03 c0       	rjmp	.+6      	; 0x1726 <_ZN12Adafruit_GFX9writeLineEiiiij+0xc2>
    1720:	3f ef       	ldi	r19, 0xFF	; 255
    1722:	e3 1a       	sub	r14, r19
    1724:	f3 0a       	sbc	r15, r19
    1726:	f5 94       	asr	r15
    1728:	e7 94       	ror	r14
    172a:	c8 16       	cp	r12, r24
    172c:	d9 06       	cpc	r13, r25
    172e:	2c f0       	brlt	.+10     	; 0x173a <_ZN12Adafruit_GFX9writeLineEiiiij+0xd6>
    1730:	8f ef       	ldi	r24, 0xFF	; 255
    1732:	9f ef       	ldi	r25, 0xFF	; 255
    1734:	9a 83       	std	Y+2, r25	; 0x02
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	04 c0       	rjmp	.+8      	; 0x1742 <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
    173a:	a1 e0       	ldi	r26, 0x01	; 1
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	ba 83       	std	Y+2, r27	; 0x02
    1740:	a9 83       	std	Y+1, r26	; 0x01
    1742:	2d 81       	ldd	r18, Y+5	; 0x05
    1744:	3e 81       	ldd	r19, Y+6	; 0x06
    1746:	a2 16       	cp	r10, r18
    1748:	b3 06       	cpc	r11, r19
    174a:	24 f1       	brlt	.+72     	; 0x1794 <_ZN12Adafruit_GFX9writeLineEiiiij+0x130>
    174c:	d2 01       	movw	r26, r4
    174e:	ed 91       	ld	r30, X+
    1750:	fc 91       	ld	r31, X
    1752:	04 84       	ldd	r0, Z+12	; 0x0c
    1754:	f5 85       	ldd	r31, Z+13	; 0x0d
    1756:	e0 2d       	mov	r30, r0
    1758:	2b 81       	ldd	r18, Y+3	; 0x03
    175a:	3c 81       	ldd	r19, Y+4	; 0x04
    175c:	68 14       	cp	r6, r8
    175e:	79 04       	cpc	r7, r9
    1760:	24 f4       	brge	.+8      	; 0x176a <_ZN12Adafruit_GFX9writeLineEiiiij+0x106>
    1762:	4d 81       	ldd	r20, Y+5	; 0x05
    1764:	5e 81       	ldd	r21, Y+6	; 0x06
    1766:	b6 01       	movw	r22, r12
    1768:	03 c0       	rjmp	.+6      	; 0x1770 <_ZN12Adafruit_GFX9writeLineEiiiij+0x10c>
    176a:	a6 01       	movw	r20, r12
    176c:	6d 81       	ldd	r22, Y+5	; 0x05
    176e:	7e 81       	ldd	r23, Y+6	; 0x06
    1770:	c2 01       	movw	r24, r4
    1772:	19 95       	eicall
    1774:	e2 18       	sub	r14, r2
    1776:	f3 08       	sbc	r15, r3
    1778:	f7 fe       	sbrs	r15, 7
    177a:	06 c0       	rjmp	.+12     	; 0x1788 <_ZN12Adafruit_GFX9writeLineEiiiij+0x124>
    177c:	29 81       	ldd	r18, Y+1	; 0x01
    177e:	3a 81       	ldd	r19, Y+2	; 0x02
    1780:	c2 0e       	add	r12, r18
    1782:	d3 1e       	adc	r13, r19
    1784:	e0 0e       	add	r14, r16
    1786:	f1 1e       	adc	r15, r17
    1788:	8d 81       	ldd	r24, Y+5	; 0x05
    178a:	9e 81       	ldd	r25, Y+6	; 0x06
    178c:	01 96       	adiw	r24, 0x01	; 1
    178e:	9e 83       	std	Y+6, r25	; 0x06
    1790:	8d 83       	std	Y+5, r24	; 0x05
    1792:	d7 cf       	rjmp	.-82     	; 0x1742 <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
    1794:	26 96       	adiw	r28, 0x06	; 6
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	1f 91       	pop	r17
    17a6:	0f 91       	pop	r16
    17a8:	ff 90       	pop	r15
    17aa:	ef 90       	pop	r14
    17ac:	df 90       	pop	r13
    17ae:	cf 90       	pop	r12
    17b0:	bf 90       	pop	r11
    17b2:	af 90       	pop	r10
    17b4:	9f 90       	pop	r9
    17b6:	8f 90       	pop	r8
    17b8:	7f 90       	pop	r7
    17ba:	6f 90       	pop	r6
    17bc:	5f 90       	pop	r5
    17be:	4f 90       	pop	r4
    17c0:	3f 90       	pop	r3
    17c2:	2f 90       	pop	r2
    17c4:	08 95       	ret

000017c6 <_ZN12Adafruit_GFX10writePixelEiij>:
    17c6:	dc 01       	movw	r26, r24
    17c8:	ed 91       	ld	r30, X+
    17ca:	fc 91       	ld	r31, X
    17cc:	00 84       	ldd	r0, Z+8	; 0x08
    17ce:	f1 85       	ldd	r31, Z+9	; 0x09
    17d0:	e0 2d       	mov	r30, r0
    17d2:	19 94       	eijmp

000017d4 <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    17d4:	0f 93       	push	r16
    17d6:	1f 93       	push	r17
    17d8:	dc 01       	movw	r26, r24
    17da:	ed 91       	ld	r30, X+
    17dc:	fc 91       	ld	r31, X
    17de:	04 8c       	ldd	r0, Z+28	; 0x1c
    17e0:	f5 8d       	ldd	r31, Z+29	; 0x1d
    17e2:	e0 2d       	mov	r30, r0
    17e4:	19 95       	eicall
    17e6:	1f 91       	pop	r17
    17e8:	0f 91       	pop	r16
    17ea:	08 95       	ret

000017ec <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	dc 01       	movw	r26, r24
    17f2:	ed 91       	ld	r30, X+
    17f4:	fc 91       	ld	r31, X
    17f6:	06 8c       	ldd	r0, Z+30	; 0x1e
    17f8:	f7 8d       	ldd	r31, Z+31	; 0x1f
    17fa:	e0 2d       	mov	r30, r0
    17fc:	19 95       	eicall
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	08 95       	ret

00001804 <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    1804:	ef 92       	push	r14
    1806:	ff 92       	push	r15
    1808:	0f 93       	push	r16
    180a:	1f 93       	push	r17
    180c:	dc 01       	movw	r26, r24
    180e:	ed 91       	ld	r30, X+
    1810:	fc 91       	ld	r31, X
    1812:	00 a0       	ldd	r0, Z+32	; 0x20
    1814:	f1 a1       	ldd	r31, Z+33	; 0x21
    1816:	e0 2d       	mov	r30, r0
    1818:	19 95       	eicall
    181a:	1f 91       	pop	r17
    181c:	0f 91       	pop	r16
    181e:	ff 90       	pop	r15
    1820:	ef 90       	pop	r14
    1822:	08 95       	ret

00001824 <_ZN12Adafruit_GFX10startWriteEv>:
    1824:	08 95       	ret

00001826 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    1826:	8f 92       	push	r8
    1828:	9f 92       	push	r9
    182a:	af 92       	push	r10
    182c:	bf 92       	push	r11
    182e:	cf 92       	push	r12
    1830:	df 92       	push	r13
    1832:	ef 92       	push	r14
    1834:	ff 92       	push	r15
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	ec 01       	movw	r28, r24
    1840:	5b 01       	movw	r10, r22
    1842:	4a 01       	movw	r8, r20
    1844:	69 01       	movw	r12, r18
    1846:	78 01       	movw	r14, r16
    1848:	e8 81       	ld	r30, Y
    184a:	f9 81       	ldd	r31, Y+1	; 0x01
    184c:	02 84       	ldd	r0, Z+10	; 0x0a
    184e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1850:	e0 2d       	mov	r30, r0
    1852:	19 95       	eicall
    1854:	c8 0c       	add	r12, r8
    1856:	d9 1c       	adc	r13, r9
    1858:	86 01       	movw	r16, r12
    185a:	01 50       	subi	r16, 0x01	; 1
    185c:	11 09       	sbc	r17, r1
    185e:	e8 81       	ld	r30, Y
    1860:	f9 81       	ldd	r31, Y+1	; 0x01
    1862:	04 88       	ldd	r0, Z+20	; 0x14
    1864:	f5 89       	ldd	r31, Z+21	; 0x15
    1866:	e0 2d       	mov	r30, r0
    1868:	95 01       	movw	r18, r10
    186a:	a4 01       	movw	r20, r8
    186c:	b5 01       	movw	r22, r10
    186e:	ce 01       	movw	r24, r28
    1870:	19 95       	eicall
    1872:	e8 81       	ld	r30, Y
    1874:	f9 81       	ldd	r31, Y+1	; 0x01
    1876:	06 88       	ldd	r0, Z+22	; 0x16
    1878:	f7 89       	ldd	r31, Z+23	; 0x17
    187a:	e0 2d       	mov	r30, r0
    187c:	ce 01       	movw	r24, r28
    187e:	df 91       	pop	r29
    1880:	cf 91       	pop	r28
    1882:	1f 91       	pop	r17
    1884:	0f 91       	pop	r16
    1886:	ff 90       	pop	r15
    1888:	ef 90       	pop	r14
    188a:	df 90       	pop	r13
    188c:	cf 90       	pop	r12
    188e:	bf 90       	pop	r11
    1890:	af 90       	pop	r10
    1892:	9f 90       	pop	r9
    1894:	8f 90       	pop	r8
    1896:	19 94       	eijmp

00001898 <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    1898:	8f 92       	push	r8
    189a:	9f 92       	push	r9
    189c:	af 92       	push	r10
    189e:	bf 92       	push	r11
    18a0:	cf 92       	push	r12
    18a2:	df 92       	push	r13
    18a4:	ef 92       	push	r14
    18a6:	ff 92       	push	r15
    18a8:	0f 93       	push	r16
    18aa:	1f 93       	push	r17
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	ec 01       	movw	r28, r24
    18b2:	5b 01       	movw	r10, r22
    18b4:	4a 01       	movw	r8, r20
    18b6:	69 01       	movw	r12, r18
    18b8:	e8 81       	ld	r30, Y
    18ba:	f9 81       	ldd	r31, Y+1	; 0x01
    18bc:	02 84       	ldd	r0, Z+10	; 0x0a
    18be:	f3 85       	ldd	r31, Z+11	; 0x0b
    18c0:	e0 2d       	mov	r30, r0
    18c2:	19 95       	eicall
    18c4:	95 01       	movw	r18, r10
    18c6:	2c 0d       	add	r18, r12
    18c8:	3d 1d       	adc	r19, r13
    18ca:	21 50       	subi	r18, 0x01	; 1
    18cc:	31 09       	sbc	r19, r1
    18ce:	e8 81       	ld	r30, Y
    18d0:	f9 81       	ldd	r31, Y+1	; 0x01
    18d2:	04 88       	ldd	r0, Z+20	; 0x14
    18d4:	f5 89       	ldd	r31, Z+21	; 0x15
    18d6:	e0 2d       	mov	r30, r0
    18d8:	78 01       	movw	r14, r16
    18da:	84 01       	movw	r16, r8
    18dc:	a4 01       	movw	r20, r8
    18de:	b5 01       	movw	r22, r10
    18e0:	ce 01       	movw	r24, r28
    18e2:	19 95       	eicall
    18e4:	e8 81       	ld	r30, Y
    18e6:	f9 81       	ldd	r31, Y+1	; 0x01
    18e8:	06 88       	ldd	r0, Z+22	; 0x16
    18ea:	f7 89       	ldd	r31, Z+23	; 0x17
    18ec:	e0 2d       	mov	r30, r0
    18ee:	ce 01       	movw	r24, r28
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	1f 91       	pop	r17
    18f6:	0f 91       	pop	r16
    18f8:	ff 90       	pop	r15
    18fa:	ef 90       	pop	r14
    18fc:	df 90       	pop	r13
    18fe:	cf 90       	pop	r12
    1900:	bf 90       	pop	r11
    1902:	af 90       	pop	r10
    1904:	9f 90       	pop	r9
    1906:	8f 90       	pop	r8
    1908:	19 94       	eijmp

0000190a <_ZN12Adafruit_GFX8fillRectEiiiij>:
    190a:	4f 92       	push	r4
    190c:	5f 92       	push	r5
    190e:	6f 92       	push	r6
    1910:	7f 92       	push	r7
    1912:	8f 92       	push	r8
    1914:	9f 92       	push	r9
    1916:	af 92       	push	r10
    1918:	bf 92       	push	r11
    191a:	cf 92       	push	r12
    191c:	df 92       	push	r13
    191e:	ef 92       	push	r14
    1920:	ff 92       	push	r15
    1922:	0f 93       	push	r16
    1924:	1f 93       	push	r17
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    192a:	6c 01       	movw	r12, r24
    192c:	2b 01       	movw	r4, r22
    192e:	5a 01       	movw	r10, r20
    1930:	39 01       	movw	r6, r18
    1932:	48 01       	movw	r8, r16
    1934:	dc 01       	movw	r26, r24
    1936:	ed 91       	ld	r30, X+
    1938:	fc 91       	ld	r31, X
    193a:	02 84       	ldd	r0, Z+10	; 0x0a
    193c:	f3 85       	ldd	r31, Z+11	; 0x0b
    193e:	e0 2d       	mov	r30, r0
    1940:	19 95       	eicall
    1942:	e2 01       	movw	r28, r4
    1944:	64 0c       	add	r6, r4
    1946:	75 1c       	adc	r7, r5
    1948:	d6 01       	movw	r26, r12
    194a:	ed 91       	ld	r30, X+
    194c:	fc 91       	ld	r31, X
    194e:	c6 15       	cp	r28, r6
    1950:	d7 05       	cpc	r29, r7
    1952:	5c f4       	brge	.+22     	; 0x196a <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    1954:	00 88       	ldd	r0, Z+16	; 0x10
    1956:	f1 89       	ldd	r31, Z+17	; 0x11
    1958:	e0 2d       	mov	r30, r0
    195a:	87 01       	movw	r16, r14
    195c:	94 01       	movw	r18, r8
    195e:	a5 01       	movw	r20, r10
    1960:	be 01       	movw	r22, r28
    1962:	c6 01       	movw	r24, r12
    1964:	19 95       	eicall
    1966:	21 96       	adiw	r28, 0x01	; 1
    1968:	ef cf       	rjmp	.-34     	; 0x1948 <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    196a:	06 88       	ldd	r0, Z+22	; 0x16
    196c:	f7 89       	ldd	r31, Z+23	; 0x17
    196e:	e0 2d       	mov	r30, r0
    1970:	c6 01       	movw	r24, r12
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	0f 91       	pop	r16
    197a:	ff 90       	pop	r15
    197c:	ef 90       	pop	r14
    197e:	df 90       	pop	r13
    1980:	cf 90       	pop	r12
    1982:	bf 90       	pop	r11
    1984:	af 90       	pop	r10
    1986:	9f 90       	pop	r9
    1988:	8f 90       	pop	r8
    198a:	7f 90       	pop	r7
    198c:	6f 90       	pop	r6
    198e:	5f 90       	pop	r5
    1990:	4f 90       	pop	r4
    1992:	19 94       	eijmp

00001994 <_ZN12Adafruit_GFX10fillScreenEj>:
    1994:	ef 92       	push	r14
    1996:	ff 92       	push	r15
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	dc 01       	movw	r26, r24
    199e:	1a 96       	adiw	r26, 0x0a	; 10
    19a0:	0d 91       	ld	r16, X+
    19a2:	1c 91       	ld	r17, X
    19a4:	1b 97       	sbiw	r26, 0x0b	; 11
    19a6:	18 96       	adiw	r26, 0x08	; 8
    19a8:	2d 91       	ld	r18, X+
    19aa:	3c 91       	ld	r19, X
    19ac:	19 97       	sbiw	r26, 0x09	; 9
    19ae:	ed 91       	ld	r30, X+
    19b0:	fc 91       	ld	r31, X
    19b2:	00 a0       	ldd	r0, Z+32	; 0x20
    19b4:	f1 a1       	ldd	r31, Z+33	; 0x21
    19b6:	e0 2d       	mov	r30, r0
    19b8:	7b 01       	movw	r14, r22
    19ba:	40 e0       	ldi	r20, 0x00	; 0
    19bc:	50 e0       	ldi	r21, 0x00	; 0
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	19 95       	eicall
    19c4:	1f 91       	pop	r17
    19c6:	0f 91       	pop	r16
    19c8:	ff 90       	pop	r15
    19ca:	ef 90       	pop	r14
    19cc:	08 95       	ret

000019ce <_ZN12Adafruit_GFX8drawLineEiiiij>:
    19ce:	8f 92       	push	r8
    19d0:	9f 92       	push	r9
    19d2:	af 92       	push	r10
    19d4:	bf 92       	push	r11
    19d6:	cf 92       	push	r12
    19d8:	df 92       	push	r13
    19da:	ef 92       	push	r14
    19dc:	ff 92       	push	r15
    19de:	0f 93       	push	r16
    19e0:	1f 93       	push	r17
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	4c 01       	movw	r8, r24
    19e8:	6b 01       	movw	r12, r22
    19ea:	5a 01       	movw	r10, r20
    19ec:	e9 01       	movw	r28, r18
    19ee:	dc 01       	movw	r26, r24
    19f0:	ed 91       	ld	r30, X+
    19f2:	fc 91       	ld	r31, X
    19f4:	62 17       	cp	r22, r18
    19f6:	73 07       	cpc	r23, r19
    19f8:	81 f4       	brne	.+32     	; 0x1a1a <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    19fa:	04 17       	cp	r16, r20
    19fc:	15 07       	cpc	r17, r21
    19fe:	24 f4       	brge	.+8      	; 0x1a08 <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    1a00:	8b 2d       	mov	r24, r11
    1a02:	58 01       	movw	r10, r16
    1a04:	04 2f       	mov	r16, r20
    1a06:	18 2f       	mov	r17, r24
    1a08:	0a 19       	sub	r16, r10
    1a0a:	1b 09       	sbc	r17, r11
    1a0c:	98 01       	movw	r18, r16
    1a0e:	2f 5f       	subi	r18, 0xFF	; 255
    1a10:	3f 4f       	sbci	r19, 0xFF	; 255
    1a12:	04 8c       	ldd	r0, Z+28	; 0x1c
    1a14:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1a16:	e0 2d       	mov	r30, r0
    1a18:	12 c0       	rjmp	.+36     	; 0x1a3e <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    1a1a:	40 17       	cp	r20, r16
    1a1c:	51 07       	cpc	r21, r17
    1a1e:	09 f5       	brne	.+66     	; 0x1a62 <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    1a20:	26 17       	cp	r18, r22
    1a22:	37 07       	cpc	r19, r23
    1a24:	24 f4       	brge	.+8      	; 0x1a2e <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    1a26:	8d 2d       	mov	r24, r13
    1a28:	69 01       	movw	r12, r18
    1a2a:	c6 2f       	mov	r28, r22
    1a2c:	d8 2f       	mov	r29, r24
    1a2e:	9e 01       	movw	r18, r28
    1a30:	2c 19       	sub	r18, r12
    1a32:	3d 09       	sbc	r19, r13
    1a34:	2f 5f       	subi	r18, 0xFF	; 255
    1a36:	3f 4f       	sbci	r19, 0xFF	; 255
    1a38:	06 8c       	ldd	r0, Z+30	; 0x1e
    1a3a:	f7 8d       	ldd	r31, Z+31	; 0x1f
    1a3c:	e0 2d       	mov	r30, r0
    1a3e:	87 01       	movw	r16, r14
    1a40:	a5 01       	movw	r20, r10
    1a42:	b6 01       	movw	r22, r12
    1a44:	c4 01       	movw	r24, r8
    1a46:	19 95       	eicall
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	1f 91       	pop	r17
    1a4e:	0f 91       	pop	r16
    1a50:	ff 90       	pop	r15
    1a52:	ef 90       	pop	r14
    1a54:	df 90       	pop	r13
    1a56:	cf 90       	pop	r12
    1a58:	bf 90       	pop	r11
    1a5a:	af 90       	pop	r10
    1a5c:	9f 90       	pop	r9
    1a5e:	8f 90       	pop	r8
    1a60:	08 95       	ret
    1a62:	02 84       	ldd	r0, Z+10	; 0x0a
    1a64:	f3 85       	ldd	r31, Z+11	; 0x0b
    1a66:	e0 2d       	mov	r30, r0
    1a68:	19 95       	eicall
    1a6a:	d4 01       	movw	r26, r8
    1a6c:	ed 91       	ld	r30, X+
    1a6e:	fc 91       	ld	r31, X
    1a70:	04 88       	ldd	r0, Z+20	; 0x14
    1a72:	f5 89       	ldd	r31, Z+21	; 0x15
    1a74:	e0 2d       	mov	r30, r0
    1a76:	9e 01       	movw	r18, r28
    1a78:	a5 01       	movw	r20, r10
    1a7a:	b6 01       	movw	r22, r12
    1a7c:	c4 01       	movw	r24, r8
    1a7e:	19 95       	eicall
    1a80:	d4 01       	movw	r26, r8
    1a82:	ed 91       	ld	r30, X+
    1a84:	fc 91       	ld	r31, X
    1a86:	06 88       	ldd	r0, Z+22	; 0x16
    1a88:	f7 89       	ldd	r31, Z+23	; 0x17
    1a8a:	e0 2d       	mov	r30, r0
    1a8c:	c4 01       	movw	r24, r8
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	1f 91       	pop	r17
    1a94:	0f 91       	pop	r16
    1a96:	ff 90       	pop	r15
    1a98:	ef 90       	pop	r14
    1a9a:	df 90       	pop	r13
    1a9c:	cf 90       	pop	r12
    1a9e:	bf 90       	pop	r11
    1aa0:	af 90       	pop	r10
    1aa2:	9f 90       	pop	r9
    1aa4:	8f 90       	pop	r8
    1aa6:	19 94       	eijmp

00001aa8 <_ZN12Adafruit_GFX8drawRectEiiiij>:
    1aa8:	6f 92       	push	r6
    1aaa:	7f 92       	push	r7
    1aac:	8f 92       	push	r8
    1aae:	9f 92       	push	r9
    1ab0:	af 92       	push	r10
    1ab2:	bf 92       	push	r11
    1ab4:	cf 92       	push	r12
    1ab6:	df 92       	push	r13
    1ab8:	ef 92       	push	r14
    1aba:	ff 92       	push	r15
    1abc:	0f 93       	push	r16
    1abe:	1f 93       	push	r17
    1ac0:	cf 93       	push	r28
    1ac2:	df 93       	push	r29
    1ac4:	ec 01       	movw	r28, r24
    1ac6:	4b 01       	movw	r8, r22
    1ac8:	5a 01       	movw	r10, r20
    1aca:	69 01       	movw	r12, r18
    1acc:	38 01       	movw	r6, r16
    1ace:	e8 81       	ld	r30, Y
    1ad0:	f9 81       	ldd	r31, Y+1	; 0x01
    1ad2:	02 84       	ldd	r0, Z+10	; 0x0a
    1ad4:	f3 85       	ldd	r31, Z+11	; 0x0b
    1ad6:	e0 2d       	mov	r30, r0
    1ad8:	19 95       	eicall
    1ada:	e8 81       	ld	r30, Y
    1adc:	f9 81       	ldd	r31, Y+1	; 0x01
    1ade:	02 88       	ldd	r0, Z+18	; 0x12
    1ae0:	f3 89       	ldd	r31, Z+19	; 0x13
    1ae2:	e0 2d       	mov	r30, r0
    1ae4:	87 01       	movw	r16, r14
    1ae6:	96 01       	movw	r18, r12
    1ae8:	a5 01       	movw	r20, r10
    1aea:	b4 01       	movw	r22, r8
    1aec:	ce 01       	movw	r24, r28
    1aee:	19 95       	eicall
    1af0:	a5 01       	movw	r20, r10
    1af2:	46 0d       	add	r20, r6
    1af4:	57 1d       	adc	r21, r7
    1af6:	41 50       	subi	r20, 0x01	; 1
    1af8:	51 09       	sbc	r21, r1
    1afa:	e8 81       	ld	r30, Y
    1afc:	f9 81       	ldd	r31, Y+1	; 0x01
    1afe:	02 88       	ldd	r0, Z+18	; 0x12
    1b00:	f3 89       	ldd	r31, Z+19	; 0x13
    1b02:	e0 2d       	mov	r30, r0
    1b04:	96 01       	movw	r18, r12
    1b06:	b4 01       	movw	r22, r8
    1b08:	ce 01       	movw	r24, r28
    1b0a:	19 95       	eicall
    1b0c:	e8 81       	ld	r30, Y
    1b0e:	f9 81       	ldd	r31, Y+1	; 0x01
    1b10:	00 88       	ldd	r0, Z+16	; 0x10
    1b12:	f1 89       	ldd	r31, Z+17	; 0x11
    1b14:	e0 2d       	mov	r30, r0
    1b16:	93 01       	movw	r18, r6
    1b18:	a5 01       	movw	r20, r10
    1b1a:	b4 01       	movw	r22, r8
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	19 95       	eicall
    1b20:	c8 0c       	add	r12, r8
    1b22:	d9 1c       	adc	r13, r9
    1b24:	b6 01       	movw	r22, r12
    1b26:	61 50       	subi	r22, 0x01	; 1
    1b28:	71 09       	sbc	r23, r1
    1b2a:	e8 81       	ld	r30, Y
    1b2c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b2e:	00 88       	ldd	r0, Z+16	; 0x10
    1b30:	f1 89       	ldd	r31, Z+17	; 0x11
    1b32:	e0 2d       	mov	r30, r0
    1b34:	93 01       	movw	r18, r6
    1b36:	a5 01       	movw	r20, r10
    1b38:	ce 01       	movw	r24, r28
    1b3a:	19 95       	eicall
    1b3c:	e8 81       	ld	r30, Y
    1b3e:	f9 81       	ldd	r31, Y+1	; 0x01
    1b40:	06 88       	ldd	r0, Z+22	; 0x16
    1b42:	f7 89       	ldd	r31, Z+23	; 0x17
    1b44:	e0 2d       	mov	r30, r0
    1b46:	ce 01       	movw	r24, r28
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	1f 91       	pop	r17
    1b4e:	0f 91       	pop	r16
    1b50:	ff 90       	pop	r15
    1b52:	ef 90       	pop	r14
    1b54:	df 90       	pop	r13
    1b56:	cf 90       	pop	r12
    1b58:	bf 90       	pop	r11
    1b5a:	af 90       	pop	r10
    1b5c:	9f 90       	pop	r9
    1b5e:	8f 90       	pop	r8
    1b60:	7f 90       	pop	r7
    1b62:	6f 90       	pop	r6
    1b64:	19 94       	eijmp

00001b66 <_ZN12Adafruit_GFX13invertDisplayEb>:
    1b66:	08 95       	ret

00001b68 <_ZN12Adafruit_GFX11setRotationEh>:
    1b68:	fc 01       	movw	r30, r24
    1b6a:	63 70       	andi	r22, 0x03	; 3
    1b6c:	66 8b       	std	Z+22, r22	; 0x16
    1b6e:	84 81       	ldd	r24, Z+4	; 0x04
    1b70:	95 81       	ldd	r25, Z+5	; 0x05
    1b72:	26 81       	ldd	r18, Z+6	; 0x06
    1b74:	37 81       	ldd	r19, Z+7	; 0x07
    1b76:	61 30       	cpi	r22, 0x01	; 1
    1b78:	39 f0       	breq	.+14     	; 0x1b88 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    1b7a:	63 30       	cpi	r22, 0x03	; 3
    1b7c:	29 f0       	breq	.+10     	; 0x1b88 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    1b7e:	91 87       	std	Z+9, r25	; 0x09
    1b80:	80 87       	std	Z+8, r24	; 0x08
    1b82:	33 87       	std	Z+11, r19	; 0x0b
    1b84:	22 87       	std	Z+10, r18	; 0x0a
    1b86:	08 95       	ret
    1b88:	31 87       	std	Z+9, r19	; 0x09
    1b8a:	20 87       	std	Z+8, r18	; 0x08
    1b8c:	93 87       	std	Z+11, r25	; 0x0b
    1b8e:	82 87       	std	Z+10, r24	; 0x0a
    1b90:	08 95       	ret

00001b92 <_ZN12Adafruit_GFXC1Eii>:
    1b92:	fc 01       	movw	r30, r24
    1b94:	13 82       	std	Z+3, r1	; 0x03
    1b96:	12 82       	std	Z+2, r1	; 0x02
    1b98:	84 ec       	ldi	r24, 0xC4	; 196
    1b9a:	92 e0       	ldi	r25, 0x02	; 2
    1b9c:	91 83       	std	Z+1, r25	; 0x01
    1b9e:	80 83       	st	Z, r24
    1ba0:	75 83       	std	Z+5, r23	; 0x05
    1ba2:	64 83       	std	Z+4, r22	; 0x04
    1ba4:	57 83       	std	Z+7, r21	; 0x07
    1ba6:	46 83       	std	Z+6, r20	; 0x06
    1ba8:	71 87       	std	Z+9, r23	; 0x09
    1baa:	60 87       	std	Z+8, r22	; 0x08
    1bac:	53 87       	std	Z+11, r21	; 0x0b
    1bae:	42 87       	std	Z+10, r20	; 0x0a
    1bb0:	16 8a       	std	Z+22, r1	; 0x16
    1bb2:	15 86       	std	Z+13, r1	; 0x0d
    1bb4:	14 86       	std	Z+12, r1	; 0x0c
    1bb6:	17 86       	std	Z+15, r1	; 0x0f
    1bb8:	16 86       	std	Z+14, r1	; 0x0e
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	85 8b       	std	Z+21, r24	; 0x15
    1bbe:	84 8b       	std	Z+20, r24	; 0x14
    1bc0:	2f ef       	ldi	r18, 0xFF	; 255
    1bc2:	3f ef       	ldi	r19, 0xFF	; 255
    1bc4:	33 8b       	std	Z+19, r19	; 0x13
    1bc6:	22 8b       	std	Z+18, r18	; 0x12
    1bc8:	31 8b       	std	Z+17, r19	; 0x11
    1bca:	20 8b       	std	Z+16, r18	; 0x10
    1bcc:	87 8b       	std	Z+23, r24	; 0x17
    1bce:	10 8e       	std	Z+24, r1	; 0x18
    1bd0:	12 8e       	std	Z+26, r1	; 0x1a
    1bd2:	11 8e       	std	Z+25, r1	; 0x19
    1bd4:	08 95       	ret

00001bd6 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>:
    1bd6:	3f 92       	push	r3
    1bd8:	4f 92       	push	r4
    1bda:	5f 92       	push	r5
    1bdc:	6f 92       	push	r6
    1bde:	7f 92       	push	r7
    1be0:	8f 92       	push	r8
    1be2:	9f 92       	push	r9
    1be4:	af 92       	push	r10
    1be6:	bf 92       	push	r11
    1be8:	cf 92       	push	r12
    1bea:	df 92       	push	r13
    1bec:	ef 92       	push	r14
    1bee:	ff 92       	push	r15
    1bf0:	0f 93       	push	r16
    1bf2:	1f 93       	push	r17
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	2a 97       	sbiw	r28, 0x0a	; 10
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	5c 01       	movw	r10, r24
    1c0a:	7e 83       	std	Y+6, r23	; 0x06
    1c0c:	6d 83       	std	Y+5, r22	; 0x05
    1c0e:	58 87       	std	Y+8, r21	; 0x08
    1c10:	4f 83       	std	Y+7, r20	; 0x07
    1c12:	29 01       	movw	r4, r18
    1c14:	37 01       	movw	r6, r14
    1c16:	dc 01       	movw	r26, r24
    1c18:	ed 91       	ld	r30, X+
    1c1a:	fc 91       	ld	r31, X
    1c1c:	02 84       	ldd	r0, Z+10	; 0x0a
    1c1e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1c20:	e0 2d       	mov	r30, r0
    1c22:	19 95       	eicall
    1c24:	c8 01       	movw	r24, r16
    1c26:	07 96       	adiw	r24, 0x07	; 7
    1c28:	97 fd       	sbrc	r25, 7
    1c2a:	07 96       	adiw	r24, 0x07	; 7
    1c2c:	9c 01       	movw	r18, r24
    1c2e:	93 e0       	ldi	r25, 0x03	; 3
    1c30:	35 95       	asr	r19
    1c32:	27 95       	ror	r18
    1c34:	9a 95       	dec	r25
    1c36:	e1 f7       	brne	.-8      	; 0x1c30 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x5a>
    1c38:	3a 83       	std	Y+2, r19	; 0x02
    1c3a:	29 83       	std	Y+1, r18	; 0x01
    1c3c:	81 2c       	mov	r8, r1
    1c3e:	91 2c       	mov	r9, r1
    1c40:	e1 2c       	mov	r14, r1
    1c42:	f1 2c       	mov	r15, r1
    1c44:	31 2c       	mov	r3, r1
    1c46:	8f 81       	ldd	r24, Y+7	; 0x07
    1c48:	98 85       	ldd	r25, Y+8	; 0x08
    1c4a:	8e 0d       	add	r24, r14
    1c4c:	9f 1d       	adc	r25, r15
    1c4e:	9c 83       	std	Y+4, r25	; 0x04
    1c50:	8b 83       	std	Y+3, r24	; 0x03
    1c52:	e6 14       	cp	r14, r6
    1c54:	f7 04       	cpc	r15, r7
    1c56:	0c f0       	brlt	.+2      	; 0x1c5a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x84>
    1c58:	3d c0       	rjmp	.+122    	; 0x1cd4 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xfe>
    1c5a:	1a 86       	std	Y+10, r1	; 0x0a
    1c5c:	19 86       	std	Y+9, r1	; 0x09
    1c5e:	a9 85       	ldd	r26, Y+9	; 0x09
    1c60:	ba 85       	ldd	r27, Y+10	; 0x0a
    1c62:	a0 17       	cp	r26, r16
    1c64:	b1 07       	cpc	r27, r17
    1c66:	74 f5       	brge	.+92     	; 0x1cc4 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xee>
    1c68:	cd 01       	movw	r24, r26
    1c6a:	87 70       	andi	r24, 0x07	; 7
    1c6c:	99 27       	eor	r25, r25
    1c6e:	89 2b       	or	r24, r25
    1c70:	11 f0       	breq	.+4      	; 0x1c76 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xa0>
    1c72:	33 0c       	add	r3, r3
    1c74:	0e c0       	rjmp	.+28     	; 0x1c92 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xbc>
    1c76:	e9 85       	ldd	r30, Y+9	; 0x09
    1c78:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c7a:	f7 fd       	sbrc	r31, 7
    1c7c:	37 96       	adiw	r30, 0x07	; 7
    1c7e:	83 e0       	ldi	r24, 0x03	; 3
    1c80:	f5 95       	asr	r31
    1c82:	e7 95       	ror	r30
    1c84:	8a 95       	dec	r24
    1c86:	e1 f7       	brne	.-8      	; 0x1c80 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xaa>
    1c88:	e8 0d       	add	r30, r8
    1c8a:	f9 1d       	adc	r31, r9
    1c8c:	e4 0d       	add	r30, r4
    1c8e:	f5 1d       	adc	r31, r5
    1c90:	34 90       	lpm	r3, Z
    1c92:	37 fe       	sbrs	r3, 7
    1c94:	11 c0       	rjmp	.+34     	; 0x1cb8 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xe2>
    1c96:	d5 01       	movw	r26, r10
    1c98:	ed 91       	ld	r30, X+
    1c9a:	fc 91       	ld	r31, X
    1c9c:	04 84       	ldd	r0, Z+12	; 0x0c
    1c9e:	f5 85       	ldd	r31, Z+13	; 0x0d
    1ca0:	e0 2d       	mov	r30, r0
    1ca2:	96 01       	movw	r18, r12
    1ca4:	4b 81       	ldd	r20, Y+3	; 0x03
    1ca6:	5c 81       	ldd	r21, Y+4	; 0x04
    1ca8:	6d 81       	ldd	r22, Y+5	; 0x05
    1caa:	7e 81       	ldd	r23, Y+6	; 0x06
    1cac:	89 85       	ldd	r24, Y+9	; 0x09
    1cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb0:	68 0f       	add	r22, r24
    1cb2:	79 1f       	adc	r23, r25
    1cb4:	c5 01       	movw	r24, r10
    1cb6:	19 95       	eicall
    1cb8:	a9 85       	ldd	r26, Y+9	; 0x09
    1cba:	ba 85       	ldd	r27, Y+10	; 0x0a
    1cbc:	11 96       	adiw	r26, 0x01	; 1
    1cbe:	ba 87       	std	Y+10, r27	; 0x0a
    1cc0:	a9 87       	std	Y+9, r26	; 0x09
    1cc2:	cd cf       	rjmp	.-102    	; 0x1c5e <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x88>
    1cc4:	bf ef       	ldi	r27, 0xFF	; 255
    1cc6:	eb 1a       	sub	r14, r27
    1cc8:	fb 0a       	sbc	r15, r27
    1cca:	29 81       	ldd	r18, Y+1	; 0x01
    1ccc:	3a 81       	ldd	r19, Y+2	; 0x02
    1cce:	82 0e       	add	r8, r18
    1cd0:	93 1e       	adc	r9, r19
    1cd2:	b9 cf       	rjmp	.-142    	; 0x1c46 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x70>
    1cd4:	d5 01       	movw	r26, r10
    1cd6:	ed 91       	ld	r30, X+
    1cd8:	fc 91       	ld	r31, X
    1cda:	06 88       	ldd	r0, Z+22	; 0x16
    1cdc:	f7 89       	ldd	r31, Z+23	; 0x17
    1cde:	e0 2d       	mov	r30, r0
    1ce0:	c5 01       	movw	r24, r10
    1ce2:	2a 96       	adiw	r28, 0x0a	; 10
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	df 91       	pop	r29
    1cf0:	cf 91       	pop	r28
    1cf2:	1f 91       	pop	r17
    1cf4:	0f 91       	pop	r16
    1cf6:	ff 90       	pop	r15
    1cf8:	ef 90       	pop	r14
    1cfa:	df 90       	pop	r13
    1cfc:	cf 90       	pop	r12
    1cfe:	bf 90       	pop	r11
    1d00:	af 90       	pop	r10
    1d02:	9f 90       	pop	r9
    1d04:	8f 90       	pop	r8
    1d06:	7f 90       	pop	r7
    1d08:	6f 90       	pop	r6
    1d0a:	5f 90       	pop	r5
    1d0c:	4f 90       	pop	r4
    1d0e:	3f 90       	pop	r3
    1d10:	19 94       	eijmp

00001d12 <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    1d12:	2f 92       	push	r2
    1d14:	3f 92       	push	r3
    1d16:	4f 92       	push	r4
    1d18:	5f 92       	push	r5
    1d1a:	6f 92       	push	r6
    1d1c:	7f 92       	push	r7
    1d1e:	8f 92       	push	r8
    1d20:	9f 92       	push	r9
    1d22:	af 92       	push	r10
    1d24:	bf 92       	push	r11
    1d26:	cf 92       	push	r12
    1d28:	df 92       	push	r13
    1d2a:	ef 92       	push	r14
    1d2c:	ff 92       	push	r15
    1d2e:	0f 93       	push	r16
    1d30:	1f 93       	push	r17
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
    1d3a:	6b 97       	sbiw	r28, 0x1b	; 27
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	f8 94       	cli
    1d40:	de bf       	out	0x3e, r29	; 62
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	cd bf       	out	0x3d, r28	; 61
    1d46:	9b 8f       	std	Y+27, r25	; 0x1b
    1d48:	8a 8f       	std	Y+26, r24	; 0x1a
    1d4a:	2b 01       	movw	r4, r22
    1d4c:	5a 83       	std	Y+2, r21	; 0x02
    1d4e:	49 83       	std	Y+1, r20	; 0x01
    1d50:	d2 2e       	mov	r13, r18
    1d52:	19 87       	std	Y+9, r17	; 0x09
    1d54:	08 87       	std	Y+8, r16	; 0x08
    1d56:	47 01       	movw	r8, r14
    1d58:	ab 82       	std	Y+3, r10	; 0x03
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	59 96       	adiw	r26, 0x19	; 25
    1d5e:	2d 91       	ld	r18, X+
    1d60:	3c 91       	ld	r19, X
    1d62:	5a 97       	sbiw	r26, 0x1a	; 26
    1d64:	21 15       	cp	r18, r1
    1d66:	31 05       	cpc	r19, r1
    1d68:	09 f0       	breq	.+2      	; 0x1d6c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5a>
    1d6a:	00 c1       	rjmp	.+512    	; 0x1f6c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x25a>
    1d6c:	18 96       	adiw	r26, 0x08	; 8
    1d6e:	8d 91       	ld	r24, X+
    1d70:	9c 91       	ld	r25, X
    1d72:	19 97       	sbiw	r26, 0x09	; 9
    1d74:	68 17       	cp	r22, r24
    1d76:	79 07       	cpc	r23, r25
    1d78:	0c f0       	brlt	.+2      	; 0x1d7c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x6a>
    1d7a:	e7 c1       	rjmp	.+974    	; 0x214a <__DATA_REGION_LENGTH__+0x14a>
    1d7c:	1a 96       	adiw	r26, 0x0a	; 10
    1d7e:	8d 91       	ld	r24, X+
    1d80:	9c 91       	ld	r25, X
    1d82:	1b 97       	sbiw	r26, 0x0b	; 11
    1d84:	48 17       	cp	r20, r24
    1d86:	59 07       	cpc	r21, r25
    1d88:	0c f0       	brlt	.+2      	; 0x1d8c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x7a>
    1d8a:	df c1       	rjmp	.+958    	; 0x214a <__DATA_REGION_LENGTH__+0x14a>
    1d8c:	2c 2c       	mov	r2, r12
    1d8e:	31 2c       	mov	r3, r1
    1d90:	fb 01       	movw	r30, r22
    1d92:	26 e0       	ldi	r18, 0x06	; 6
    1d94:	c2 9e       	mul	r12, r18
    1d96:	e0 0d       	add	r30, r0
    1d98:	f1 1d       	adc	r31, r1
    1d9a:	11 24       	eor	r1, r1
    1d9c:	fd 87       	std	Y+13, r31	; 0x0d
    1d9e:	ec 87       	std	Y+12, r30	; 0x0c
    1da0:	1e 16       	cp	r1, r30
    1da2:	1f 06       	cpc	r1, r31
    1da4:	0c f0       	brlt	.+2      	; 0x1da8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x96>
    1da6:	d1 c1       	rjmp	.+930    	; 0x214a <__DATA_REGION_LENGTH__+0x14a>
    1da8:	4a 2d       	mov	r20, r10
    1daa:	50 e0       	ldi	r21, 0x00	; 0
    1dac:	5b 87       	std	Y+11, r21	; 0x0b
    1dae:	4a 87       	std	Y+10, r20	; 0x0a
    1db0:	83 e0       	ldi	r24, 0x03	; 3
    1db2:	44 0f       	add	r20, r20
    1db4:	55 1f       	adc	r21, r21
    1db6:	8a 95       	dec	r24
    1db8:	e1 f7       	brne	.-8      	; 0x1db2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa0>
    1dba:	5f 87       	std	Y+15, r21	; 0x0f
    1dbc:	4e 87       	std	Y+14, r20	; 0x0e
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc2:	84 0f       	add	r24, r20
    1dc4:	95 1f       	adc	r25, r21
    1dc6:	18 16       	cp	r1, r24
    1dc8:	19 06       	cpc	r1, r25
    1dca:	0c f0       	brlt	.+2      	; 0x1dce <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xbc>
    1dcc:	be c1       	rjmp	.+892    	; 0x214a <__DATA_REGION_LENGTH__+0x14a>
    1dce:	58 96       	adiw	r26, 0x18	; 24
    1dd0:	8c 91       	ld	r24, X
    1dd2:	81 11       	cpse	r24, r1
    1dd4:	04 c0       	rjmp	.+8      	; 0x1dde <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    1dd6:	6f ea       	ldi	r22, 0xAF	; 175
    1dd8:	6d 15       	cp	r22, r13
    1dda:	08 f4       	brcc	.+2      	; 0x1dde <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    1ddc:	d3 94       	inc	r13
    1dde:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1de0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1de2:	ed 91       	ld	r30, X+
    1de4:	fc 91       	ld	r31, X
    1de6:	11 97       	sbiw	r26, 0x01	; 1
    1de8:	02 84       	ldd	r0, Z+10	; 0x0a
    1dea:	f3 85       	ldd	r31, Z+11	; 0x0b
    1dec:	e0 2d       	mov	r30, r0
    1dee:	cd 01       	movw	r24, r26
    1df0:	19 95       	eicall
    1df2:	b5 e0       	ldi	r27, 0x05	; 5
    1df4:	db 9e       	mul	r13, r27
    1df6:	c0 01       	movw	r24, r0
    1df8:	11 24       	eor	r1, r1
    1dfa:	ec 2d       	mov	r30, r12
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	f9 8b       	std	Y+17, r31	; 0x11
    1e00:	e8 8b       	std	Y+16, r30	; 0x10
    1e02:	92 01       	movw	r18, r4
    1e04:	2b 5f       	subi	r18, 0xFB	; 251
    1e06:	3f 4f       	sbci	r19, 0xFF	; 255
    1e08:	3b 8b       	std	Y+19, r19	; 0x13
    1e0a:	2a 8b       	std	Y+18, r18	; 0x12
    1e0c:	32 01       	movw	r6, r4
    1e0e:	5d 82       	std	Y+5, r5	; 0x05
    1e10:	4c 82       	std	Y+4, r4	; 0x04
    1e12:	ac 01       	movw	r20, r24
    1e14:	44 19       	sub	r20, r4
    1e16:	55 09       	sbc	r21, r5
    1e18:	5d 8b       	std	Y+21, r21	; 0x15
    1e1a:	4c 8b       	std	Y+20, r20	; 0x14
    1e1c:	7b 81       	ldd	r23, Y+3	; 0x03
    1e1e:	67 2f       	mov	r22, r23
    1e20:	70 e0       	ldi	r23, 0x00	; 0
    1e22:	7f 8b       	std	Y+23, r23	; 0x17
    1e24:	6e 8b       	std	Y+22, r22	; 0x16
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2a:	08 96       	adiw	r24, 0x08	; 8
    1e2c:	99 8f       	std	Y+25, r25	; 0x19
    1e2e:	88 8f       	std	Y+24, r24	; 0x18
    1e30:	ec 89       	ldd	r30, Y+20	; 0x14
    1e32:	fd 89       	ldd	r31, Y+21	; 0x15
    1e34:	e6 0d       	add	r30, r6
    1e36:	f7 1d       	adc	r31, r7
    1e38:	e9 59       	subi	r30, 0x99	; 153
    1e3a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e3c:	d4 90       	lpm	r13, Z
    1e3e:	a9 81       	ldd	r26, Y+1	; 0x01
    1e40:	ba 81       	ldd	r27, Y+2	; 0x02
    1e42:	bf 83       	std	Y+7, r27	; 0x07
    1e44:	ae 83       	std	Y+6, r26	; 0x06
    1e46:	5d 01       	movw	r10, r26
    1e48:	d0 fe       	sbrs	r13, 0
    1e4a:	16 c0       	rjmp	.+44     	; 0x1e78 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x166>
    1e4c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1e4e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1e50:	ed 91       	ld	r30, X+
    1e52:	fc 91       	ld	r31, X
    1e54:	b1 e0       	ldi	r27, 0x01	; 1
    1e56:	cb 12       	cpse	r12, r27
    1e58:	09 c0       	rjmp	.+18     	; 0x1e6c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    1e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5c:	21 30       	cpi	r18, 0x01	; 1
    1e5e:	31 f4       	brne	.+12     	; 0x1e6c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    1e60:	04 84       	ldd	r0, Z+12	; 0x0c
    1e62:	f5 85       	ldd	r31, Z+13	; 0x0d
    1e64:	e0 2d       	mov	r30, r0
    1e66:	28 85       	ldd	r18, Y+8	; 0x08
    1e68:	39 85       	ldd	r19, Y+9	; 0x09
    1e6a:	19 c0       	rjmp	.+50     	; 0x1e9e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x18c>
    1e6c:	06 84       	ldd	r0, Z+14	; 0x0e
    1e6e:	f7 85       	ldd	r31, Z+15	; 0x0f
    1e70:	e0 2d       	mov	r30, r0
    1e72:	e8 84       	ldd	r14, Y+8	; 0x08
    1e74:	f9 84       	ldd	r15, Y+9	; 0x09
    1e76:	1d c0       	rjmp	.+58     	; 0x1eb2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a0>
    1e78:	48 85       	ldd	r20, Y+8	; 0x08
    1e7a:	59 85       	ldd	r21, Y+9	; 0x09
    1e7c:	48 15       	cp	r20, r8
    1e7e:	59 05       	cpc	r21, r9
    1e80:	11 f1       	breq	.+68     	; 0x1ec6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    1e82:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1e84:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1e86:	ed 91       	ld	r30, X+
    1e88:	fc 91       	ld	r31, X
    1e8a:	b1 e0       	ldi	r27, 0x01	; 1
    1e8c:	cb 12       	cpse	r12, r27
    1e8e:	0d c0       	rjmp	.+26     	; 0x1eaa <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    1e90:	2b 81       	ldd	r18, Y+3	; 0x03
    1e92:	21 30       	cpi	r18, 0x01	; 1
    1e94:	51 f4       	brne	.+20     	; 0x1eaa <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    1e96:	04 84       	ldd	r0, Z+12	; 0x0c
    1e98:	f5 85       	ldd	r31, Z+13	; 0x0d
    1e9a:	e0 2d       	mov	r30, r0
    1e9c:	94 01       	movw	r18, r8
    1e9e:	a5 01       	movw	r20, r10
    1ea0:	b3 01       	movw	r22, r6
    1ea2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ea4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ea6:	19 95       	eicall
    1ea8:	0e c0       	rjmp	.+28     	; 0x1ec6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    1eaa:	06 84       	ldd	r0, Z+14	; 0x0e
    1eac:	f7 85       	ldd	r31, Z+15	; 0x0f
    1eae:	e0 2d       	mov	r30, r0
    1eb0:	74 01       	movw	r14, r8
    1eb2:	0a 85       	ldd	r16, Y+10	; 0x0a
    1eb4:	1b 85       	ldd	r17, Y+11	; 0x0b
    1eb6:	91 01       	movw	r18, r2
    1eb8:	4e 81       	ldd	r20, Y+6	; 0x06
    1eba:	5f 81       	ldd	r21, Y+7	; 0x07
    1ebc:	6c 81       	ldd	r22, Y+4	; 0x04
    1ebe:	7d 81       	ldd	r23, Y+5	; 0x05
    1ec0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ec2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ec4:	19 95       	eicall
    1ec6:	d6 94       	lsr	r13
    1ec8:	4e 81       	ldd	r20, Y+6	; 0x06
    1eca:	5f 81       	ldd	r21, Y+7	; 0x07
    1ecc:	6e 89       	ldd	r22, Y+22	; 0x16
    1ece:	7f 89       	ldd	r23, Y+23	; 0x17
    1ed0:	46 0f       	add	r20, r22
    1ed2:	57 1f       	adc	r21, r23
    1ed4:	5f 83       	std	Y+7, r21	; 0x07
    1ed6:	4e 83       	std	Y+6, r20	; 0x06
    1ed8:	7f ef       	ldi	r23, 0xFF	; 255
    1eda:	a7 1a       	sub	r10, r23
    1edc:	b7 0a       	sbc	r11, r23
    1ede:	88 8d       	ldd	r24, Y+24	; 0x18
    1ee0:	99 8d       	ldd	r25, Y+25	; 0x19
    1ee2:	a8 16       	cp	r10, r24
    1ee4:	b9 06       	cpc	r11, r25
    1ee6:	09 f0       	breq	.+2      	; 0x1eea <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1d8>
    1ee8:	af cf       	rjmp	.-162    	; 0x1e48 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x136>
    1eea:	ac 81       	ldd	r26, Y+4	; 0x04
    1eec:	bd 81       	ldd	r27, Y+5	; 0x05
    1eee:	e8 89       	ldd	r30, Y+16	; 0x10
    1ef0:	f9 89       	ldd	r31, Y+17	; 0x11
    1ef2:	ae 0f       	add	r26, r30
    1ef4:	bf 1f       	adc	r27, r31
    1ef6:	bd 83       	std	Y+5, r27	; 0x05
    1ef8:	ac 83       	std	Y+4, r26	; 0x04
    1efa:	ff ef       	ldi	r31, 0xFF	; 255
    1efc:	6f 1a       	sub	r6, r31
    1efe:	7f 0a       	sbc	r7, r31
    1f00:	2a 89       	ldd	r18, Y+18	; 0x12
    1f02:	3b 89       	ldd	r19, Y+19	; 0x13
    1f04:	62 16       	cp	r6, r18
    1f06:	73 06       	cpc	r7, r19
    1f08:	09 f0       	breq	.+2      	; 0x1f0c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1fa>
    1f0a:	92 cf       	rjmp	.-220    	; 0x1e30 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x11e>
    1f0c:	48 85       	ldd	r20, Y+8	; 0x08
    1f0e:	59 85       	ldd	r21, Y+9	; 0x09
    1f10:	48 15       	cp	r20, r8
    1f12:	59 05       	cpc	r21, r9
    1f14:	09 f4       	brne	.+2      	; 0x1f18 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x206>
    1f16:	f7 c0       	rjmp	.+494    	; 0x2106 <__DATA_REGION_LENGTH__+0x106>
    1f18:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1f1a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1f1c:	ed 91       	ld	r30, X+
    1f1e:	fc 91       	ld	r31, X
    1f20:	b1 e0       	ldi	r27, 0x01	; 1
    1f22:	cb 12       	cpse	r12, r27
    1f24:	12 c0       	rjmp	.+36     	; 0x1f4a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    1f26:	2b 81       	ldd	r18, Y+3	; 0x03
    1f28:	21 30       	cpi	r18, 0x01	; 1
    1f2a:	79 f4       	brne	.+30     	; 0x1f4a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    1f2c:	b2 01       	movw	r22, r4
    1f2e:	6b 5f       	subi	r22, 0xFB	; 251
    1f30:	7f 4f       	sbci	r23, 0xFF	; 255
    1f32:	00 88       	ldd	r0, Z+16	; 0x10
    1f34:	f1 89       	ldd	r31, Z+17	; 0x11
    1f36:	e0 2d       	mov	r30, r0
    1f38:	84 01       	movw	r16, r8
    1f3a:	28 e0       	ldi	r18, 0x08	; 8
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	49 81       	ldd	r20, Y+1	; 0x01
    1f40:	5a 81       	ldd	r21, Y+2	; 0x02
    1f42:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f44:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f46:	19 95       	eicall
    1f48:	de c0       	rjmp	.+444    	; 0x2106 <__DATA_REGION_LENGTH__+0x106>
    1f4a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f4c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f4e:	62 19       	sub	r22, r2
    1f50:	73 09       	sbc	r23, r3
    1f52:	06 84       	ldd	r0, Z+14	; 0x0e
    1f54:	f7 85       	ldd	r31, Z+15	; 0x0f
    1f56:	e0 2d       	mov	r30, r0
    1f58:	74 01       	movw	r14, r8
    1f5a:	0e 85       	ldd	r16, Y+14	; 0x0e
    1f5c:	1f 85       	ldd	r17, Y+15	; 0x0f
    1f5e:	91 01       	movw	r18, r2
    1f60:	49 81       	ldd	r20, Y+1	; 0x01
    1f62:	5a 81       	ldd	r21, Y+2	; 0x02
    1f64:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f66:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f68:	19 95       	eicall
    1f6a:	cd c0       	rjmp	.+410    	; 0x2106 <__DATA_REGION_LENGTH__+0x106>
    1f6c:	f9 01       	movw	r30, r18
    1f6e:	34 96       	adiw	r30, 0x04	; 4
    1f70:	e4 91       	lpm	r30, Z
    1f72:	de 1a       	sub	r13, r30
    1f74:	f9 01       	movw	r30, r18
    1f76:	32 96       	adiw	r30, 0x02	; 2
    1f78:	85 91       	lpm	r24, Z+
    1f7a:	94 91       	lpm	r25, Z
    1f7c:	b7 e0       	ldi	r27, 0x07	; 7
    1f7e:	db 9e       	mul	r13, r27
    1f80:	80 0d       	add	r24, r0
    1f82:	91 1d       	adc	r25, r1
    1f84:	11 24       	eor	r1, r1
    1f86:	f9 01       	movw	r30, r18
    1f88:	25 91       	lpm	r18, Z+
    1f8a:	34 91       	lpm	r19, Z
    1f8c:	39 8b       	std	Y+17, r19	; 0x11
    1f8e:	28 8b       	std	Y+16, r18	; 0x10
    1f90:	fc 01       	movw	r30, r24
    1f92:	25 90       	lpm	r2, Z+
    1f94:	34 90       	lpm	r3, Z
    1f96:	fc 01       	movw	r30, r24
    1f98:	32 96       	adiw	r30, 0x02	; 2
    1f9a:	74 90       	lpm	r7, Z
    1f9c:	31 96       	adiw	r30, 0x01	; 1
    1f9e:	a4 90       	lpm	r10, Z
    1fa0:	32 96       	adiw	r30, 0x02	; 2
    1fa2:	94 90       	lpm	r9, Z
    1fa4:	31 96       	adiw	r30, 0x01	; 1
    1fa6:	b4 90       	lpm	r11, Z
    1fa8:	31 e0       	ldi	r19, 0x01	; 1
    1faa:	3c 15       	cp	r19, r12
    1fac:	18 f0       	brcs	.+6      	; 0x1fb4 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2a2>
    1fae:	4b 81       	ldd	r20, Y+3	; 0x03
    1fb0:	42 30       	cpi	r20, 0x02	; 2
    1fb2:	68 f0       	brcs	.+26     	; 0x1fce <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2bc>
    1fb4:	69 2d       	mov	r22, r9
    1fb6:	09 2c       	mov	r0, r9
    1fb8:	00 0c       	add	r0, r0
    1fba:	77 0b       	sbc	r23, r23
    1fbc:	7d 83       	std	Y+5, r23	; 0x05
    1fbe:	6c 83       	std	Y+4, r22	; 0x04
    1fc0:	8b 2d       	mov	r24, r11
    1fc2:	0b 2c       	mov	r0, r11
    1fc4:	00 0c       	add	r0, r0
    1fc6:	99 0b       	sbc	r25, r25
    1fc8:	9f 83       	std	Y+7, r25	; 0x07
    1fca:	8e 83       	std	Y+6, r24	; 0x06
    1fcc:	04 c0       	rjmp	.+8      	; 0x1fd6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2c4>
    1fce:	1f 82       	std	Y+7, r1	; 0x07
    1fd0:	1e 82       	std	Y+6, r1	; 0x06
    1fd2:	1d 82       	std	Y+5, r1	; 0x05
    1fd4:	1c 82       	std	Y+4, r1	; 0x04
    1fd6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1fd8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1fda:	ed 91       	ld	r30, X+
    1fdc:	fc 91       	ld	r31, X
    1fde:	11 97       	sbiw	r26, 0x01	; 1
    1fe0:	02 84       	ldd	r0, Z+10	; 0x0a
    1fe2:	f3 85       	ldd	r31, Z+11	; 0x0b
    1fe4:	e0 2d       	mov	r30, r0
    1fe6:	cd 01       	movw	r24, r26
    1fe8:	19 95       	eicall
    1fea:	61 2c       	mov	r6, r1
    1fec:	d1 2c       	mov	r13, r1
    1fee:	81 2c       	mov	r8, r1
    1ff0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ff2:	ef 2f       	mov	r30, r31
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	fb 87       	std	Y+11, r31	; 0x0b
    1ff8:	ea 87       	std	Y+10, r30	; 0x0a
    1ffa:	2c 2d       	mov	r18, r12
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	3d 87       	std	Y+13, r19	; 0x0d
    2000:	2c 87       	std	Y+12, r18	; 0x0c
    2002:	49 81       	ldd	r20, Y+1	; 0x01
    2004:	5a 81       	ldd	r21, Y+2	; 0x02
    2006:	4b 0d       	add	r20, r11
    2008:	51 1d       	adc	r21, r1
    200a:	b7 fc       	sbrc	r11, 7
    200c:	5a 95       	dec	r21
    200e:	5d 8b       	std	Y+21, r21	; 0x15
    2010:	4c 8b       	std	Y+20, r20	; 0x14
    2012:	b2 01       	movw	r22, r4
    2014:	69 0d       	add	r22, r9
    2016:	71 1d       	adc	r23, r1
    2018:	97 fc       	sbrc	r9, 7
    201a:	7a 95       	dec	r23
    201c:	7f 8b       	std	Y+23, r23	; 0x17
    201e:	6e 8b       	std	Y+22, r22	; 0x16
    2020:	8a 14       	cp	r8, r10
    2022:	08 f0       	brcs	.+2      	; 0x2026 <__DATA_REGION_LENGTH__+0x26>
    2024:	70 c0       	rjmp	.+224    	; 0x2106 <__DATA_REGION_LENGTH__+0x106>
    2026:	28 2d       	mov	r18, r8
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	4e 81       	ldd	r20, Y+6	; 0x06
    202c:	5f 81       	ldd	r21, Y+7	; 0x07
    202e:	42 0f       	add	r20, r18
    2030:	53 1f       	adc	r21, r19
    2032:	aa 85       	ldd	r26, Y+10	; 0x0a
    2034:	bb 85       	ldd	r27, Y+11	; 0x0b
    2036:	a4 9f       	mul	r26, r20
    2038:	c0 01       	movw	r24, r0
    203a:	a5 9f       	mul	r26, r21
    203c:	90 0d       	add	r25, r0
    203e:	b4 9f       	mul	r27, r20
    2040:	90 0d       	add	r25, r0
    2042:	11 24       	eor	r1, r1
    2044:	e9 81       	ldd	r30, Y+1	; 0x01
    2046:	fa 81       	ldd	r31, Y+2	; 0x02
    2048:	e8 0f       	add	r30, r24
    204a:	f9 1f       	adc	r31, r25
    204c:	ff 87       	std	Y+15, r31	; 0x0f
    204e:	ee 87       	std	Y+14, r30	; 0x0e
    2050:	86 2d       	mov	r24, r6
    2052:	91 2c       	mov	r9, r1
    2054:	4c 89       	ldd	r20, Y+20	; 0x14
    2056:	5d 89       	ldd	r21, Y+21	; 0x15
    2058:	42 0f       	add	r20, r18
    205a:	53 1f       	adc	r21, r19
    205c:	5b 8b       	std	Y+19, r21	; 0x13
    205e:	4a 8b       	std	Y+18, r20	; 0x12
    2060:	97 14       	cp	r9, r7
    2062:	08 f0       	brcs	.+2      	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    2064:	4d c0       	rjmp	.+154    	; 0x2100 <__DATA_REGION_LENGTH__+0x100>
    2066:	bb 24       	eor	r11, r11
    2068:	b3 94       	inc	r11
    206a:	b8 0e       	add	r11, r24
    206c:	87 70       	andi	r24, 0x07	; 7
    206e:	41 f4       	brne	.+16     	; 0x2080 <__DATA_REGION_LENGTH__+0x80>
    2070:	c1 01       	movw	r24, r2
    2072:	01 96       	adiw	r24, 0x01	; 1
    2074:	e8 89       	ldd	r30, Y+16	; 0x10
    2076:	f9 89       	ldd	r31, Y+17	; 0x11
    2078:	e2 0d       	add	r30, r2
    207a:	f3 1d       	adc	r31, r3
    207c:	d4 90       	lpm	r13, Z
    207e:	1c 01       	movw	r2, r24
    2080:	d7 fe       	sbrs	r13, 7
    2082:	3a c0       	rjmp	.+116    	; 0x20f8 <__DATA_REGION_LENGTH__+0xf8>
    2084:	51 e0       	ldi	r21, 0x01	; 1
    2086:	c5 12       	cpse	r12, r21
    2088:	16 c0       	rjmp	.+44     	; 0x20b6 <__DATA_REGION_LENGTH__+0xb6>
    208a:	6b 81       	ldd	r22, Y+3	; 0x03
    208c:	61 30       	cpi	r22, 0x01	; 1
    208e:	99 f4       	brne	.+38     	; 0x20b6 <__DATA_REGION_LENGTH__+0xb6>
    2090:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2092:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2094:	ed 91       	ld	r30, X+
    2096:	fc 91       	ld	r31, X
    2098:	11 97       	sbiw	r26, 0x01	; 1
    209a:	04 84       	ldd	r0, Z+12	; 0x0c
    209c:	f5 85       	ldd	r31, Z+13	; 0x0d
    209e:	e0 2d       	mov	r30, r0
    20a0:	28 85       	ldd	r18, Y+8	; 0x08
    20a2:	39 85       	ldd	r19, Y+9	; 0x09
    20a4:	4a 89       	ldd	r20, Y+18	; 0x12
    20a6:	5b 89       	ldd	r21, Y+19	; 0x13
    20a8:	6e 89       	ldd	r22, Y+22	; 0x16
    20aa:	7f 89       	ldd	r23, Y+23	; 0x17
    20ac:	69 0d       	add	r22, r9
    20ae:	71 1d       	adc	r23, r1
    20b0:	cd 01       	movw	r24, r26
    20b2:	19 95       	eicall
    20b4:	21 c0       	rjmp	.+66     	; 0x20f8 <__DATA_REGION_LENGTH__+0xf8>
    20b6:	8c 81       	ldd	r24, Y+4	; 0x04
    20b8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ba:	89 0d       	add	r24, r9
    20bc:	91 1d       	adc	r25, r1
    20be:	ec 85       	ldd	r30, Y+12	; 0x0c
    20c0:	fd 85       	ldd	r31, Y+13	; 0x0d
    20c2:	8e 9f       	mul	r24, r30
    20c4:	b0 01       	movw	r22, r0
    20c6:	8f 9f       	mul	r24, r31
    20c8:	70 0d       	add	r23, r0
    20ca:	9e 9f       	mul	r25, r30
    20cc:	70 0d       	add	r23, r0
    20ce:	11 24       	eor	r1, r1
    20d0:	64 0d       	add	r22, r4
    20d2:	75 1d       	adc	r23, r5
    20d4:	aa 8d       	ldd	r26, Y+26	; 0x1a
    20d6:	bb 8d       	ldd	r27, Y+27	; 0x1b
    20d8:	ed 91       	ld	r30, X+
    20da:	fc 91       	ld	r31, X
    20dc:	11 97       	sbiw	r26, 0x01	; 1
    20de:	06 84       	ldd	r0, Z+14	; 0x0e
    20e0:	f7 85       	ldd	r31, Z+15	; 0x0f
    20e2:	e0 2d       	mov	r30, r0
    20e4:	e8 84       	ldd	r14, Y+8	; 0x08
    20e6:	f9 84       	ldd	r15, Y+9	; 0x09
    20e8:	0a 85       	ldd	r16, Y+10	; 0x0a
    20ea:	1b 85       	ldd	r17, Y+11	; 0x0b
    20ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    20ee:	3d 85       	ldd	r19, Y+13	; 0x0d
    20f0:	4e 85       	ldd	r20, Y+14	; 0x0e
    20f2:	5f 85       	ldd	r21, Y+15	; 0x0f
    20f4:	cd 01       	movw	r24, r26
    20f6:	19 95       	eicall
    20f8:	dd 0c       	add	r13, r13
    20fa:	93 94       	inc	r9
    20fc:	8b 2d       	mov	r24, r11
    20fe:	b0 cf       	rjmp	.-160    	; 0x2060 <__DATA_REGION_LENGTH__+0x60>
    2100:	67 0c       	add	r6, r7
    2102:	83 94       	inc	r8
    2104:	8d cf       	rjmp	.-230    	; 0x2020 <__DATA_REGION_LENGTH__+0x20>
    2106:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2108:	bb 8d       	ldd	r27, Y+27	; 0x1b
    210a:	ed 91       	ld	r30, X+
    210c:	fc 91       	ld	r31, X
    210e:	11 97       	sbiw	r26, 0x01	; 1
    2110:	06 88       	ldd	r0, Z+22	; 0x16
    2112:	f7 89       	ldd	r31, Z+23	; 0x17
    2114:	e0 2d       	mov	r30, r0
    2116:	cd 01       	movw	r24, r26
    2118:	6b 96       	adiw	r28, 0x1b	; 27
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	cd bf       	out	0x3d, r28	; 61
    2124:	df 91       	pop	r29
    2126:	cf 91       	pop	r28
    2128:	1f 91       	pop	r17
    212a:	0f 91       	pop	r16
    212c:	ff 90       	pop	r15
    212e:	ef 90       	pop	r14
    2130:	df 90       	pop	r13
    2132:	cf 90       	pop	r12
    2134:	bf 90       	pop	r11
    2136:	af 90       	pop	r10
    2138:	9f 90       	pop	r9
    213a:	8f 90       	pop	r8
    213c:	7f 90       	pop	r7
    213e:	6f 90       	pop	r6
    2140:	5f 90       	pop	r5
    2142:	4f 90       	pop	r4
    2144:	3f 90       	pop	r3
    2146:	2f 90       	pop	r2
    2148:	19 94       	eijmp
    214a:	6b 96       	adiw	r28, 0x1b	; 27
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	1f 91       	pop	r17
    215c:	0f 91       	pop	r16
    215e:	ff 90       	pop	r15
    2160:	ef 90       	pop	r14
    2162:	df 90       	pop	r13
    2164:	cf 90       	pop	r12
    2166:	bf 90       	pop	r11
    2168:	af 90       	pop	r10
    216a:	9f 90       	pop	r9
    216c:	8f 90       	pop	r8
    216e:	7f 90       	pop	r7
    2170:	6f 90       	pop	r6
    2172:	5f 90       	pop	r5
    2174:	4f 90       	pop	r4
    2176:	3f 90       	pop	r3
    2178:	2f 90       	pop	r2
    217a:	08 95       	ret

0000217c <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    217c:	8f 92       	push	r8
    217e:	9f 92       	push	r9
    2180:	af 92       	push	r10
    2182:	cf 92       	push	r12
    2184:	ef 92       	push	r14
    2186:	ff 92       	push	r15
    2188:	0f 93       	push	r16
    218a:	1f 93       	push	r17
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	ec 01       	movw	r28, r24
    2192:	26 2f       	mov	r18, r22
  if (!gfxFont) { // 'Classic' built-in font
    2194:	89 8d       	ldd	r24, Y+25	; 0x19
    2196:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	09 f0       	breq	.+2      	; 0x219e <_ZN12Adafruit_GFX5writeEh+0x22>
    219c:	41 c0       	rjmp	.+130    	; 0x2220 <__stack+0x21>

    if (c == '\n') {              // Newline?
    219e:	6a 30       	cpi	r22, 0x0A	; 10
    21a0:	59 f4       	brne	.+22     	; 0x21b8 <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
    21a2:	1d 86       	std	Y+13, r1	; 0x0d
    21a4:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += textsize_y * 8; // advance y one line
    21a6:	2d 89       	ldd	r18, Y+21	; 0x15
    21a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    21aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    21ac:	38 e0       	ldi	r19, 0x08	; 8
    21ae:	23 9f       	mul	r18, r19
    21b0:	80 0d       	add	r24, r0
    21b2:	91 1d       	adc	r25, r1
    21b4:	11 24       	eor	r1, r1
    21b6:	42 c0       	rjmp	.+132    	; 0x223c <__stack+0x3d>
    } else if (c != '\r') {       // Ignore carriage returns
    21b8:	6d 30       	cpi	r22, 0x0D	; 13
    21ba:	09 f4       	brne	.+2      	; 0x21be <_ZN12Adafruit_GFX5writeEh+0x42>
    21bc:	a8 c0       	rjmp	.+336    	; 0x230e <__stack+0x10f>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    21be:	8f 89       	ldd	r24, Y+23	; 0x17
    21c0:	88 23       	and	r24, r24
    21c2:	c9 f0       	breq	.+50     	; 0x21f6 <_ZN12Adafruit_GFX5writeEh+0x7a>
    21c4:	3c 89       	ldd	r19, Y+20	; 0x14
    21c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    21c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    21ca:	46 e0       	ldi	r20, 0x06	; 6
    21cc:	34 9f       	mul	r19, r20
    21ce:	80 0d       	add	r24, r0
    21d0:	91 1d       	adc	r25, r1
    21d2:	11 24       	eor	r1, r1
    21d4:	48 85       	ldd	r20, Y+8	; 0x08
    21d6:	59 85       	ldd	r21, Y+9	; 0x09
    21d8:	48 17       	cp	r20, r24
    21da:	59 07       	cpc	r21, r25
    21dc:	64 f4       	brge	.+24     	; 0x21f6 <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x = 0;                                       // Reset x to zero,
    21de:	1d 86       	std	Y+13, r1	; 0x0d
    21e0:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize_y * 8; // advance y one line
    21e2:	3d 89       	ldd	r19, Y+21	; 0x15
    21e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    21e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    21e8:	48 e0       	ldi	r20, 0x08	; 8
    21ea:	34 9f       	mul	r19, r20
    21ec:	80 0d       	add	r24, r0
    21ee:	91 1d       	adc	r25, r1
    21f0:	11 24       	eor	r1, r1
    21f2:	9f 87       	std	Y+15, r25	; 0x0f
    21f4:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
               textsize_y);
    21f6:	ea 88       	ldd	r14, Y+18	; 0x12
    21f8:	fb 88       	ldd	r15, Y+19	; 0x13
    21fa:	08 89       	ldd	r16, Y+16	; 0x10
    21fc:	19 89       	ldd	r17, Y+17	; 0x11
    21fe:	4e 85       	ldd	r20, Y+14	; 0x0e
    2200:	5f 85       	ldd	r21, Y+15	; 0x0f
    2202:	6c 85       	ldd	r22, Y+12	; 0x0c
    2204:	7d 85       	ldd	r23, Y+13	; 0x0d
    2206:	ad 88       	ldd	r10, Y+21	; 0x15
    2208:	cc 88       	ldd	r12, Y+20	; 0x14
    220a:	ce 01       	movw	r24, r28
    220c:	82 dd       	rcall	.-1276   	; 0x1d12 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
      cursor_x += textsize_x * 6; // Advance x one char
    220e:	2c 89       	ldd	r18, Y+20	; 0x14
    2210:	8c 85       	ldd	r24, Y+12	; 0x0c
    2212:	9d 85       	ldd	r25, Y+13	; 0x0d
    2214:	36 e0       	ldi	r19, 0x06	; 6
    2216:	23 9f       	mul	r18, r19
    2218:	80 0d       	add	r24, r0
    221a:	91 1d       	adc	r25, r1
    221c:	11 24       	eor	r1, r1
    221e:	3e c0       	rjmp	.+124    	; 0x229c <__stack+0x9d>
    }

  } else { // Custom font

    if (c == '\n') {
    2220:	6a 30       	cpi	r22, 0x0A	; 10
    2222:	79 f4       	brne	.+30     	; 0x2242 <__stack+0x43>
      cursor_x = 0;
    2224:	1d 86       	std	Y+13, r1	; 0x0d
    2226:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    2228:	2d 89       	ldd	r18, Y+21	; 0x15
    222a:	fc 01       	movw	r30, r24
    222c:	38 96       	adiw	r30, 0x08	; 8
    222e:	e4 91       	lpm	r30, Z
    2230:	8e 85       	ldd	r24, Y+14	; 0x0e
    2232:	9f 85       	ldd	r25, Y+15	; 0x0f
    2234:	2e 9f       	mul	r18, r30
    2236:	80 0d       	add	r24, r0
    2238:	91 1d       	adc	r25, r1
    223a:	11 24       	eor	r1, r1
    223c:	9f 87       	std	Y+15, r25	; 0x0f
    223e:	8e 87       	std	Y+14, r24	; 0x0e
    2240:	66 c0       	rjmp	.+204    	; 0x230e <__stack+0x10f>
    } else if (c != '\r') {
    2242:	6d 30       	cpi	r22, 0x0D	; 13
    2244:	09 f4       	brne	.+2      	; 0x2248 <__stack+0x49>
    2246:	63 c0       	rjmp	.+198    	; 0x230e <__stack+0x10f>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    2248:	fc 01       	movw	r30, r24
    224a:	34 96       	adiw	r30, 0x04	; 4
    224c:	34 91       	lpm	r19, Z
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    224e:	63 17       	cp	r22, r19
    2250:	08 f4       	brcc	.+2      	; 0x2254 <__stack+0x55>
    2252:	5d c0       	rjmp	.+186    	; 0x230e <__stack+0x10f>
    2254:	32 96       	adiw	r30, 0x02	; 2
    2256:	e4 91       	lpm	r30, Z
    2258:	e6 17       	cp	r30, r22
    225a:	08 f4       	brcc	.+2      	; 0x225e <__stack+0x5f>
    225c:	58 c0       	rjmp	.+176    	; 0x230e <__stack+0x10f>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    225e:	46 2f       	mov	r20, r22
    2260:	43 1b       	sub	r20, r19
    2262:	34 2f       	mov	r19, r20
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    2264:	fc 01       	movw	r30, r24
    2266:	32 96       	adiw	r30, 0x02	; 2
    2268:	85 90       	lpm	r8, Z+
    226a:	94 90       	lpm	r9, Z
    226c:	47 e0       	ldi	r20, 0x07	; 7
    226e:	34 9f       	mul	r19, r20
    2270:	80 0c       	add	r8, r0
    2272:	91 1c       	adc	r9, r1
    2274:	11 24       	eor	r1, r1
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    2276:	f4 01       	movw	r30, r8
    2278:	32 96       	adiw	r30, 0x02	; 2
    227a:	34 91       	lpm	r19, Z
                h = pgm_read_byte(&glyph->height);
    227c:	31 96       	adiw	r30, 0x01	; 1
    227e:	e4 91       	lpm	r30, Z
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    2280:	33 23       	and	r19, r19
    2282:	11 f0       	breq	.+4      	; 0x2288 <__stack+0x89>
    2284:	e1 11       	cpse	r30, r1
    2286:	0d c0       	rjmp	.+26     	; 0x22a2 <__stack+0xa3>
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    2288:	f4 01       	movw	r30, r8
    228a:	34 96       	adiw	r30, 0x04	; 4
    228c:	e4 91       	lpm	r30, Z
    228e:	2c 89       	ldd	r18, Y+20	; 0x14
    2290:	8c 85       	ldd	r24, Y+12	; 0x0c
    2292:	9d 85       	ldd	r25, Y+13	; 0x0d
    2294:	e2 9f       	mul	r30, r18
    2296:	80 0d       	add	r24, r0
    2298:	91 1d       	adc	r25, r1
    229a:	11 24       	eor	r1, r1
    229c:	9d 87       	std	Y+13, r25	; 0x0d
    229e:	8c 87       	std	Y+12, r24	; 0x0c
      }
    }
  }
  return 1;
    22a0:	36 c0       	rjmp	.+108    	; 0x230e <__stack+0x10f>
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    22a2:	f4 01       	movw	r30, r8
    22a4:	35 96       	adiw	r30, 0x05	; 5
    22a6:	44 91       	lpm	r20, Z
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    22a8:	5f 89       	ldd	r21, Y+23	; 0x17
    22aa:	55 23       	and	r21, r21
    22ac:	19 f1       	breq	.+70     	; 0x22f4 <__stack+0xf5>
    22ae:	5c 89       	ldd	r21, Y+20	; 0x14
    22b0:	e3 2f       	mov	r30, r19
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	e4 0f       	add	r30, r20
    22b6:	f1 1d       	adc	r31, r1
    22b8:	47 fd       	sbrc	r20, 7
    22ba:	fa 95       	dec	r31
    22bc:	5e 9f       	mul	r21, r30
    22be:	b0 01       	movw	r22, r0
    22c0:	5f 9f       	mul	r21, r31
    22c2:	70 0d       	add	r23, r0
    22c4:	11 24       	eor	r1, r1
    22c6:	4c 85       	ldd	r20, Y+12	; 0x0c
    22c8:	5d 85       	ldd	r21, Y+13	; 0x0d
    22ca:	46 0f       	add	r20, r22
    22cc:	57 1f       	adc	r21, r23
    22ce:	68 85       	ldd	r22, Y+8	; 0x08
    22d0:	79 85       	ldd	r23, Y+9	; 0x09
    22d2:	64 17       	cp	r22, r20
    22d4:	75 07       	cpc	r23, r21
    22d6:	74 f4       	brge	.+28     	; 0x22f4 <__stack+0xf5>
            cursor_x = 0;
    22d8:	1d 86       	std	Y+13, r1	; 0x0d
    22da:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize_y *
    22dc:	3d 89       	ldd	r19, Y+21	; 0x15
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    22de:	fc 01       	movw	r30, r24
    22e0:	38 96       	adiw	r30, 0x08	; 8
    22e2:	e4 91       	lpm	r30, Z
    22e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    22e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    22e8:	3e 9f       	mul	r19, r30
    22ea:	80 0d       	add	r24, r0
    22ec:	91 1d       	adc	r25, r1
    22ee:	11 24       	eor	r1, r1
    22f0:	9f 87       	std	Y+15, r25	; 0x0f
    22f2:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
    22f4:	ea 88       	ldd	r14, Y+18	; 0x12
    22f6:	fb 88       	ldd	r15, Y+19	; 0x13
    22f8:	08 89       	ldd	r16, Y+16	; 0x10
    22fa:	19 89       	ldd	r17, Y+17	; 0x11
    22fc:	4e 85       	ldd	r20, Y+14	; 0x0e
    22fe:	5f 85       	ldd	r21, Y+15	; 0x0f
    2300:	6c 85       	ldd	r22, Y+12	; 0x0c
    2302:	7d 85       	ldd	r23, Y+13	; 0x0d
    2304:	ad 88       	ldd	r10, Y+21	; 0x15
    2306:	cc 88       	ldd	r12, Y+20	; 0x14
    2308:	ce 01       	movw	r24, r28
    230a:	03 dd       	rcall	.-1530   	; 0x1d12 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    230c:	bd cf       	rjmp	.-134    	; 0x2288 <__stack+0x89>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	df 91       	pop	r29
    2314:	cf 91       	pop	r28
    2316:	1f 91       	pop	r17
    2318:	0f 91       	pop	r16
    231a:	ff 90       	pop	r15
    231c:	ef 90       	pop	r14
    231e:	cf 90       	pop	r12
    2320:	af 90       	pop	r10
    2322:	9f 90       	pop	r9
    2324:	8f 90       	pop	r8
    2326:	08 95       	ret

00002328 <_ZN12Adafruit_GFX11setTextSizeEhh>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    2328:	61 11       	cpse	r22, r1
    232a:	01 c0       	rjmp	.+2      	; 0x232e <_ZN12Adafruit_GFX11setTextSizeEhh+0x6>
    232c:	61 e0       	ldi	r22, 0x01	; 1
    232e:	fc 01       	movw	r30, r24
    2330:	64 8b       	std	Z+20, r22	; 0x14
  textsize_y = (s_y > 0) ? s_y : 1;
    2332:	41 11       	cpse	r20, r1
    2334:	01 c0       	rjmp	.+2      	; 0x2338 <_ZN12Adafruit_GFX11setTextSizeEhh+0x10>
    2336:	41 e0       	ldi	r20, 0x01	; 1
    2338:	fc 01       	movw	r30, r24
    233a:	45 8b       	std	Z+21, r20	; 0x15
    233c:	08 95       	ret

0000233e <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel
   that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
    233e:	46 2f       	mov	r20, r22
    2340:	f3 cf       	rjmp	.-26     	; 0x2328 <_ZN12Adafruit_GFX11setTextSizeEhh>

00002342 <_ZN16Adafruit_SSD13069drawPixelEiij>:
/*!
    @brief  Get base address of display buffer for direct reading or writing.
    @return Pointer to an unsigned 8-bit array, column-major, columns padded
            to full byte boundary if needed.
*/
uint8_t *Adafruit_SSD1306::getBuffer(void) { return buffer; }
    2342:	fc 01       	movw	r30, r24
    2344:	77 fd       	sbrc	r23, 7
    2346:	b9 c0       	rjmp	.+370    	; 0x24ba <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    2348:	80 85       	ldd	r24, Z+8	; 0x08
    234a:	91 85       	ldd	r25, Z+9	; 0x09
    234c:	68 17       	cp	r22, r24
    234e:	79 07       	cpc	r23, r25
    2350:	0c f0       	brlt	.+2      	; 0x2354 <_ZN16Adafruit_SSD13069drawPixelEiij+0x12>
    2352:	b3 c0       	rjmp	.+358    	; 0x24ba <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    2354:	57 fd       	sbrc	r21, 7
    2356:	b1 c0       	rjmp	.+354    	; 0x24ba <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    2358:	82 85       	ldd	r24, Z+10	; 0x0a
    235a:	93 85       	ldd	r25, Z+11	; 0x0b
    235c:	48 17       	cp	r20, r24
    235e:	59 07       	cpc	r21, r25
    2360:	0c f0       	brlt	.+2      	; 0x2364 <_ZN16Adafruit_SSD13069drawPixelEiij+0x22>
    2362:	08 95       	ret
    2364:	86 89       	ldd	r24, Z+22	; 0x16
    2366:	82 30       	cpi	r24, 0x02	; 2
    2368:	79 f4       	brne	.+30     	; 0x2388 <_ZN16Adafruit_SSD13069drawPixelEiij+0x46>
    236a:	84 81       	ldd	r24, Z+4	; 0x04
    236c:	95 81       	ldd	r25, Z+5	; 0x05
    236e:	dc 01       	movw	r26, r24
    2370:	a6 1b       	sub	r26, r22
    2372:	b7 0b       	sbc	r27, r23
    2374:	bd 01       	movw	r22, r26
    2376:	61 50       	subi	r22, 0x01	; 1
    2378:	71 09       	sbc	r23, r1
    237a:	86 81       	ldd	r24, Z+6	; 0x06
    237c:	97 81       	ldd	r25, Z+7	; 0x07
    237e:	dc 01       	movw	r26, r24
    2380:	a4 1b       	sub	r26, r20
    2382:	b5 0b       	sbc	r27, r21
    2384:	ad 01       	movw	r20, r26
    2386:	0e c0       	rjmp	.+28     	; 0x23a4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    2388:	83 30       	cpi	r24, 0x03	; 3
    238a:	09 f0       	breq	.+2      	; 0x238e <_ZN16Adafruit_SSD13069drawPixelEiij+0x4c>
    238c:	84 c0       	rjmp	.+264    	; 0x2496 <_ZN16Adafruit_SSD13069drawPixelEiij+0x154>
    238e:	64 27       	eor	r22, r20
    2390:	75 27       	eor	r23, r21
    2392:	ca 01       	movw	r24, r20
    2394:	86 27       	eor	r24, r22
    2396:	97 27       	eor	r25, r23
    2398:	68 27       	eor	r22, r24
    239a:	79 27       	eor	r23, r25
    239c:	46 81       	ldd	r20, Z+6	; 0x06
    239e:	57 81       	ldd	r21, Z+7	; 0x07
    23a0:	48 1b       	sub	r20, r24
    23a2:	59 0b       	sbc	r21, r25
    23a4:	41 50       	subi	r20, 0x01	; 1
    23a6:	51 09       	sbc	r21, r1
    23a8:	21 30       	cpi	r18, 0x01	; 1
    23aa:	31 05       	cpc	r19, r1
    23ac:	31 f0       	breq	.+12     	; 0x23ba <_ZN16Adafruit_SSD13069drawPixelEiij+0x78>
    23ae:	48 f1       	brcs	.+82     	; 0x2402 <_ZN16Adafruit_SSD13069drawPixelEiij+0xc0>
    23b0:	22 30       	cpi	r18, 0x02	; 2
    23b2:	31 05       	cpc	r19, r1
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <_ZN16Adafruit_SSD13069drawPixelEiij+0x76>
    23b6:	4a c0       	rjmp	.+148    	; 0x244c <_ZN16Adafruit_SSD13069drawPixelEiij+0x10a>
    23b8:	08 95       	ret
    23ba:	ca 01       	movw	r24, r20
    23bc:	57 fd       	sbrc	r21, 7
    23be:	07 96       	adiw	r24, 0x07	; 7
    23c0:	9c 01       	movw	r18, r24
    23c2:	a3 e0       	ldi	r26, 0x03	; 3
    23c4:	35 95       	asr	r19
    23c6:	27 95       	ror	r18
    23c8:	aa 95       	dec	r26
    23ca:	e1 f7       	brne	.-8      	; 0x23c4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x82>
    23cc:	a4 81       	ldd	r26, Z+4	; 0x04
    23ce:	b5 81       	ldd	r27, Z+5	; 0x05
    23d0:	2a 9f       	mul	r18, r26
    23d2:	c0 01       	movw	r24, r0
    23d4:	2b 9f       	mul	r18, r27
    23d6:	90 0d       	add	r25, r0
    23d8:	3a 9f       	mul	r19, r26
    23da:	90 0d       	add	r25, r0
    23dc:	11 24       	eor	r1, r1
    23de:	68 0f       	add	r22, r24
    23e0:	79 1f       	adc	r23, r25
    23e2:	07 8c       	ldd	r0, Z+31	; 0x1f
    23e4:	f0 a1       	ldd	r31, Z+32	; 0x20
    23e6:	e0 2d       	mov	r30, r0
    23e8:	e6 0f       	add	r30, r22
    23ea:	f7 1f       	adc	r31, r23
    23ec:	47 70       	andi	r20, 0x07	; 7
    23ee:	55 27       	eor	r21, r21
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	01 c0       	rjmp	.+2      	; 0x23f8 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb6>
    23f6:	88 0f       	add	r24, r24
    23f8:	4a 95       	dec	r20
    23fa:	ea f7       	brpl	.-6      	; 0x23f6 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb4>
    23fc:	90 81       	ld	r25, Z
    23fe:	89 2b       	or	r24, r25
    2400:	48 c0       	rjmp	.+144    	; 0x2492 <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    2402:	ca 01       	movw	r24, r20
    2404:	57 fd       	sbrc	r21, 7
    2406:	07 96       	adiw	r24, 0x07	; 7
    2408:	9c 01       	movw	r18, r24
    240a:	93 e0       	ldi	r25, 0x03	; 3
    240c:	35 95       	asr	r19
    240e:	27 95       	ror	r18
    2410:	9a 95       	dec	r25
    2412:	e1 f7       	brne	.-8      	; 0x240c <_ZN16Adafruit_SSD13069drawPixelEiij+0xca>
    2414:	a4 81       	ldd	r26, Z+4	; 0x04
    2416:	b5 81       	ldd	r27, Z+5	; 0x05
    2418:	2a 9f       	mul	r18, r26
    241a:	c0 01       	movw	r24, r0
    241c:	2b 9f       	mul	r18, r27
    241e:	90 0d       	add	r25, r0
    2420:	3a 9f       	mul	r19, r26
    2422:	90 0d       	add	r25, r0
    2424:	11 24       	eor	r1, r1
    2426:	68 0f       	add	r22, r24
    2428:	79 1f       	adc	r23, r25
    242a:	07 8c       	ldd	r0, Z+31	; 0x1f
    242c:	f0 a1       	ldd	r31, Z+32	; 0x20
    242e:	e0 2d       	mov	r30, r0
    2430:	e6 0f       	add	r30, r22
    2432:	f7 1f       	adc	r31, r23
    2434:	47 70       	andi	r20, 0x07	; 7
    2436:	55 27       	eor	r21, r21
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	01 c0       	rjmp	.+2      	; 0x2440 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfe>
    243e:	88 0f       	add	r24, r24
    2440:	4a 95       	dec	r20
    2442:	ea f7       	brpl	.-6      	; 0x243e <_ZN16Adafruit_SSD13069drawPixelEiij+0xfc>
    2444:	80 95       	com	r24
    2446:	90 81       	ld	r25, Z
    2448:	89 23       	and	r24, r25
    244a:	23 c0       	rjmp	.+70     	; 0x2492 <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    244c:	ca 01       	movw	r24, r20
    244e:	57 fd       	sbrc	r21, 7
    2450:	07 96       	adiw	r24, 0x07	; 7
    2452:	9c 01       	movw	r18, r24
    2454:	83 e0       	ldi	r24, 0x03	; 3
    2456:	35 95       	asr	r19
    2458:	27 95       	ror	r18
    245a:	8a 95       	dec	r24
    245c:	e1 f7       	brne	.-8      	; 0x2456 <_ZN16Adafruit_SSD13069drawPixelEiij+0x114>
    245e:	a4 81       	ldd	r26, Z+4	; 0x04
    2460:	b5 81       	ldd	r27, Z+5	; 0x05
    2462:	2a 9f       	mul	r18, r26
    2464:	c0 01       	movw	r24, r0
    2466:	2b 9f       	mul	r18, r27
    2468:	90 0d       	add	r25, r0
    246a:	3a 9f       	mul	r19, r26
    246c:	90 0d       	add	r25, r0
    246e:	11 24       	eor	r1, r1
    2470:	68 0f       	add	r22, r24
    2472:	79 1f       	adc	r23, r25
    2474:	07 8c       	ldd	r0, Z+31	; 0x1f
    2476:	f0 a1       	ldd	r31, Z+32	; 0x20
    2478:	e0 2d       	mov	r30, r0
    247a:	e6 0f       	add	r30, r22
    247c:	f7 1f       	adc	r31, r23
    247e:	47 70       	andi	r20, 0x07	; 7
    2480:	55 27       	eor	r21, r21
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	01 c0       	rjmp	.+2      	; 0x248a <_ZN16Adafruit_SSD13069drawPixelEiij+0x148>
    2488:	88 0f       	add	r24, r24
    248a:	4a 95       	dec	r20
    248c:	ea f7       	brpl	.-6      	; 0x2488 <_ZN16Adafruit_SSD13069drawPixelEiij+0x146>
    248e:	90 81       	ld	r25, Z
    2490:	89 27       	eor	r24, r25
    2492:	80 83       	st	Z, r24
    2494:	08 95       	ret
    2496:	81 30       	cpi	r24, 0x01	; 1
    2498:	09 f0       	breq	.+2      	; 0x249c <_ZN16Adafruit_SSD13069drawPixelEiij+0x15a>
    249a:	86 cf       	rjmp	.-244    	; 0x23a8 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    249c:	64 27       	eor	r22, r20
    249e:	75 27       	eor	r23, r21
    24a0:	46 27       	eor	r20, r22
    24a2:	57 27       	eor	r21, r23
    24a4:	64 27       	eor	r22, r20
    24a6:	75 27       	eor	r23, r21
    24a8:	84 81       	ldd	r24, Z+4	; 0x04
    24aa:	95 81       	ldd	r25, Z+5	; 0x05
    24ac:	dc 01       	movw	r26, r24
    24ae:	a6 1b       	sub	r26, r22
    24b0:	b7 0b       	sbc	r27, r23
    24b2:	bd 01       	movw	r22, r26
    24b4:	61 50       	subi	r22, 0x01	; 1
    24b6:	71 09       	sbc	r23, r1
    24b8:	77 cf       	rjmp	.-274    	; 0x23a8 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    24ba:	08 95       	ret

000024bc <_ZN8SPIClass8transferEh>:
    24bc:	8e bd       	out	0x2e, r24	; 46
    24be:	00 00       	nop
    24c0:	0d b4       	in	r0, 0x2d	; 45
    24c2:	07 fe       	sbrs	r0, 7
    24c4:	fd cf       	rjmp	.-6      	; 0x24c0 <_ZN8SPIClass8transferEh+0x4>
    24c6:	8e b5       	in	r24, 0x2e	; 46
    24c8:	08 95       	ret

000024ca <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
    24ca:	4f 92       	push	r4
    24cc:	5f 92       	push	r5
    24ce:	6f 92       	push	r6
    24d0:	7f 92       	push	r7
    24d2:	8f 92       	push	r8
    24d4:	9f 92       	push	r9
    24d6:	af 92       	push	r10
    24d8:	bf 92       	push	r11
    24da:	cf 92       	push	r12
    24dc:	df 92       	push	r13
    24de:	ef 92       	push	r14
    24e0:	ff 92       	push	r15
    24e2:	0f 93       	push	r16
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	3c 01       	movw	r6, r24
    24ee:	29 01       	movw	r4, r18
    24f0:	50 e0       	ldi	r21, 0x00	; 0
    24f2:	70 e0       	ldi	r23, 0x00	; 0
    24f4:	4e db       	rcall	.-2404   	; 0x1b92 <_ZN12Adafruit_GFXC1Eii>
    24f6:	80 ef       	ldi	r24, 0xF0	; 240
    24f8:	92 e0       	ldi	r25, 0x02	; 2
    24fa:	f3 01       	movw	r30, r6
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
    2500:	14 8e       	std	Z+28, r1	; 0x1c
    2502:	13 8e       	std	Z+27, r1	; 0x1b
    2504:	41 14       	cp	r4, r1
    2506:	51 04       	cpc	r5, r1
    2508:	11 f0       	breq	.+4      	; 0x250e <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x44>
    250a:	c2 01       	movw	r24, r4
    250c:	02 c0       	rjmp	.+4      	; 0x2512 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x48>
    250e:	89 e7       	ldi	r24, 0x79	; 121
    2510:	95 e0       	ldi	r25, 0x05	; 5
    2512:	f3 01       	movw	r30, r6
    2514:	96 8f       	std	Z+30, r25	; 0x1e
    2516:	85 8f       	std	Z+29, r24	; 0x1d
    2518:	10 a2       	std	Z+32, r1	; 0x20
    251a:	17 8e       	std	Z+31, r1	; 0x1f
    251c:	8f ef       	ldi	r24, 0xFF	; 255
    251e:	84 a3       	std	Z+36, r24	; 0x24
    2520:	85 a3       	std	Z+37, r24	; 0x25
    2522:	86 a3       	std	Z+38, r24	; 0x26
    2524:	87 a3       	std	Z+39, r24	; 0x27
    2526:	00 a7       	std	Z+40, r16	; 0x28
    2528:	c5 aa       	std	Z+53, r12	; 0x35
    252a:	d6 aa       	std	Z+54, r13	; 0x36
    252c:	e7 aa       	std	Z+55, r14	; 0x37
    252e:	f0 ae       	std	Z+56, r15	; 0x38
    2530:	81 ae       	std	Z+57, r8	; 0x39
    2532:	92 ae       	std	Z+58, r9	; 0x3a
    2534:	a3 ae       	std	Z+59, r10	; 0x3b
    2536:	b4 ae       	std	Z+60, r11	; 0x3c
    2538:	80 e5       	ldi	r24, 0x50	; 80
    253a:	86 af       	std	Z+62, r24	; 0x3e
    253c:	17 ae       	std	Z+63, r1	; 0x3f
    253e:	df 91       	pop	r29
    2540:	cf 91       	pop	r28
    2542:	0f 91       	pop	r16
    2544:	ff 90       	pop	r15
    2546:	ef 90       	pop	r14
    2548:	df 90       	pop	r13
    254a:	cf 90       	pop	r12
    254c:	bf 90       	pop	r11
    254e:	af 90       	pop	r10
    2550:	9f 90       	pop	r9
    2552:	8f 90       	pop	r8
    2554:	7f 90       	pop	r7
    2556:	6f 90       	pop	r6
    2558:	5f 90       	pop	r5
    255a:	4f 90       	pop	r4
    255c:	08 95       	ret

0000255e <_ZN16Adafruit_SSD1306D1Ev>:
    255e:	20 ef       	ldi	r18, 0xF0	; 240
    2560:	32 e0       	ldi	r19, 0x02	; 2
    2562:	fc 01       	movw	r30, r24
    2564:	31 83       	std	Z+1, r19	; 0x01
    2566:	20 83       	st	Z, r18
    2568:	87 8d       	ldd	r24, Z+31	; 0x1f
    256a:	90 a1       	ldd	r25, Z+32	; 0x20
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	11 f0       	breq	.+4      	; 0x2574 <_ZN16Adafruit_SSD1306D1Ev+0x16>
    2570:	0c 94 cf 3b 	jmp	0x779e	; 0x779e <free>
    2574:	08 95       	ret

00002576 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
    2576:	1f 93       	push	r17
    2578:	cf 93       	push	r28
    257a:	df 93       	push	r29
    257c:	fc 01       	movw	r30, r24
    257e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2580:	96 8d       	ldd	r25, Z+30	; 0x1e
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	19 f1       	breq	.+70     	; 0x25cc <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x56>
    2586:	16 2f       	mov	r17, r22
    2588:	ef 01       	movw	r28, r30
    258a:	61 a1       	ldd	r22, Z+33	; 0x21
    258c:	06 2e       	mov	r0, r22
    258e:	00 0c       	add	r0, r0
    2590:	77 0b       	sbc	r23, r23
    2592:	0e 94 23 2b 	call	0x5646	; 0x5646 <_ZN7TwoWire17beginTransmissionEi>
    2596:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2598:	9e 8d       	ldd	r25, Y+30	; 0x1e
    259a:	dc 01       	movw	r26, r24
    259c:	ed 91       	ld	r30, X+
    259e:	fc 91       	ld	r31, X
    25a0:	01 90       	ld	r0, Z+
    25a2:	f0 81       	ld	r31, Z
    25a4:	e0 2d       	mov	r30, r0
    25a6:	60 e0       	ldi	r22, 0x00	; 0
    25a8:	19 95       	eicall
    25aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25ae:	dc 01       	movw	r26, r24
    25b0:	ed 91       	ld	r30, X+
    25b2:	fc 91       	ld	r31, X
    25b4:	01 90       	ld	r0, Z+
    25b6:	f0 81       	ld	r31, Z
    25b8:	e0 2d       	mov	r30, r0
    25ba:	61 2f       	mov	r22, r17
    25bc:	19 95       	eicall
    25be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25c2:	df 91       	pop	r29
    25c4:	cf 91       	pop	r28
    25c6:	1f 91       	pop	r17
    25c8:	0c 94 36 2b 	jmp	0x566c	; 0x566c <_ZN7TwoWire15endTransmissionEv>
    25cc:	a5 a5       	ldd	r26, Z+45	; 0x2d
    25ce:	b6 a5       	ldd	r27, Z+46	; 0x2e
    25d0:	9c 91       	ld	r25, X
    25d2:	83 a9       	ldd	r24, Z+51	; 0x33
    25d4:	80 95       	com	r24
    25d6:	89 23       	and	r24, r25
    25d8:	8c 93       	st	X, r24
    25da:	83 8d       	ldd	r24, Z+27	; 0x1b
    25dc:	94 8d       	ldd	r25, Z+28	; 0x1c
    25de:	89 2b       	or	r24, r25
    25e0:	29 f0       	breq	.+10     	; 0x25ec <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x76>
    25e2:	86 2f       	mov	r24, r22
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	1f 91       	pop	r17
    25ea:	68 cf       	rjmp	.-304    	; 0x24bc <_ZN8SPIClass8transferEh>
    25ec:	28 e0       	ldi	r18, 0x08	; 8
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	80 e8       	ldi	r24, 0x80	; 128
    25f2:	a1 a5       	ldd	r26, Z+41	; 0x29
    25f4:	b2 a5       	ldd	r27, Z+42	; 0x2a
    25f6:	91 a9       	ldd	r25, Z+49	; 0x31
    25f8:	46 2f       	mov	r20, r22
    25fa:	48 23       	and	r20, r24
    25fc:	19 f0       	breq	.+6      	; 0x2604 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x8e>
    25fe:	4c 91       	ld	r20, X
    2600:	94 2b       	or	r25, r20
    2602:	03 c0       	rjmp	.+6      	; 0x260a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x94>
    2604:	4c 91       	ld	r20, X
    2606:	90 95       	com	r25
    2608:	94 23       	and	r25, r20
    260a:	9c 93       	st	X, r25
    260c:	a3 a5       	ldd	r26, Z+43	; 0x2b
    260e:	b4 a5       	ldd	r27, Z+44	; 0x2c
    2610:	4c 91       	ld	r20, X
    2612:	92 a9       	ldd	r25, Z+50	; 0x32
    2614:	94 2b       	or	r25, r20
    2616:	9c 93       	st	X, r25
    2618:	a3 a5       	ldd	r26, Z+43	; 0x2b
    261a:	b4 a5       	ldd	r27, Z+44	; 0x2c
    261c:	4c 91       	ld	r20, X
    261e:	92 a9       	ldd	r25, Z+50	; 0x32
    2620:	90 95       	com	r25
    2622:	94 23       	and	r25, r20
    2624:	9c 93       	st	X, r25
    2626:	86 95       	lsr	r24
    2628:	21 50       	subi	r18, 0x01	; 1
    262a:	31 09       	sbc	r19, r1
    262c:	11 f7       	brne	.-60     	; 0x25f2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x7c>
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	1f 91       	pop	r17
    2634:	08 95       	ret

00002636 <_ZN16Adafruit_SSD130613invertDisplayEb>:
    2636:	1f 93       	push	r17
    2638:	cf 93       	push	r28
    263a:	df 93       	push	r29
    263c:	ec 01       	movw	r28, r24
    263e:	16 2f       	mov	r17, r22
    2640:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2642:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2644:	00 97       	sbiw	r24, 0x00	; 0
    2646:	39 f0       	breq	.+14     	; 0x2656 <_ZN16Adafruit_SSD130613invertDisplayEb+0x20>
    2648:	4d a9       	ldd	r20, Y+53	; 0x35
    264a:	5e a9       	ldd	r21, Y+54	; 0x36
    264c:	6f a9       	ldd	r22, Y+55	; 0x37
    264e:	78 ad       	ldd	r23, Y+56	; 0x38
    2650:	0e 94 16 2b 	call	0x562c	; 0x562c <_ZN7TwoWire8setClockEm>
    2654:	0f c0       	rjmp	.+30     	; 0x2674 <_ZN16Adafruit_SSD130613invertDisplayEb+0x3e>
    2656:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2658:	9c 8d       	ldd	r25, Y+28	; 0x1c
    265a:	89 2b       	or	r24, r25
    265c:	21 f0       	breq	.+8      	; 0x2666 <_ZN16Adafruit_SSD130613invertDisplayEb+0x30>
    265e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2660:	9f ad       	ldd	r25, Y+63	; 0x3f
    2662:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2666:	ef a5       	ldd	r30, Y+47	; 0x2f
    2668:	f8 a9       	ldd	r31, Y+48	; 0x30
    266a:	90 81       	ld	r25, Z
    266c:	8c a9       	ldd	r24, Y+52	; 0x34
    266e:	80 95       	com	r24
    2670:	89 23       	and	r24, r25
    2672:	80 83       	st	Z, r24
    2674:	11 11       	cpse	r17, r1
    2676:	02 c0       	rjmp	.+4      	; 0x267c <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
    2678:	66 ea       	ldi	r22, 0xA6	; 166
    267a:	01 c0       	rjmp	.+2      	; 0x267e <_ZN16Adafruit_SSD130613invertDisplayEb+0x48>
    267c:	67 ea       	ldi	r22, 0xA7	; 167
    267e:	ce 01       	movw	r24, r28
    2680:	7a df       	rcall	.-268    	; 0x2576 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2682:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2684:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	49 f0       	breq	.+18     	; 0x269c <_ZN16Adafruit_SSD130613invertDisplayEb+0x66>
    268a:	49 ad       	ldd	r20, Y+57	; 0x39
    268c:	5a ad       	ldd	r21, Y+58	; 0x3a
    268e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2690:	7c ad       	ldd	r23, Y+60	; 0x3c
    2692:	df 91       	pop	r29
    2694:	cf 91       	pop	r28
    2696:	1f 91       	pop	r17
    2698:	0c 94 16 2b 	jmp	0x562c	; 0x562c <_ZN7TwoWire8setClockEm>
    269c:	ef a5       	ldd	r30, Y+47	; 0x2f
    269e:	f8 a9       	ldd	r31, Y+48	; 0x30
    26a0:	90 81       	ld	r25, Z
    26a2:	8c a9       	ldd	r24, Y+52	; 0x34
    26a4:	89 2b       	or	r24, r25
    26a6:	80 83       	st	Z, r24
    26a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ac:	89 2b       	or	r24, r25
    26ae:	29 f0       	breq	.+10     	; 0x26ba <_ZN16Adafruit_SSD130613invertDisplayEb+0x84>
    26b0:	df 91       	pop	r29
    26b2:	cf 91       	pop	r28
    26b4:	1f 91       	pop	r17
    26b6:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <_ZN8SPIClass14endTransactionEv>
    26ba:	df 91       	pop	r29
    26bc:	cf 91       	pop	r28
    26be:	1f 91       	pop	r17
    26c0:	08 95       	ret

000026c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
    26c2:	bf 92       	push	r11
    26c4:	cf 92       	push	r12
    26c6:	df 92       	push	r13
    26c8:	ef 92       	push	r14
    26ca:	ff 92       	push	r15
    26cc:	0f 93       	push	r16
    26ce:	1f 93       	push	r17
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	ec 01       	movw	r28, r24
    26d6:	b6 2e       	mov	r11, r22
    26d8:	07 2f       	mov	r16, r23
    26da:	14 2f       	mov	r17, r20
    26dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	09 f4       	brne	.+2      	; 0x26e6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x24>
    26e4:	52 c0       	rjmp	.+164    	; 0x278a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xc8>
    26e6:	69 a1       	ldd	r22, Y+33	; 0x21
    26e8:	06 2e       	mov	r0, r22
    26ea:	00 0c       	add	r0, r0
    26ec:	77 0b       	sbc	r23, r23
    26ee:	0e 94 23 2b 	call	0x5646	; 0x5646 <_ZN7TwoWire17beginTransmissionEi>
    26f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26f6:	dc 01       	movw	r26, r24
    26f8:	ed 91       	ld	r30, X+
    26fa:	fc 91       	ld	r31, X
    26fc:	01 90       	ld	r0, Z+
    26fe:	f0 81       	ld	r31, Z
    2700:	e0 2d       	mov	r30, r0
    2702:	60 e0       	ldi	r22, 0x00	; 0
    2704:	19 95       	eicall
    2706:	cb 2c       	mov	r12, r11
    2708:	d0 2e       	mov	r13, r16
    270a:	ee 24       	eor	r14, r14
    270c:	e3 94       	inc	r14
    270e:	f1 2c       	mov	r15, r1
    2710:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2712:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2714:	11 23       	and	r17, r17
    2716:	71 f1       	breq	.+92     	; 0x2774 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb2>
    2718:	b0 e2       	ldi	r27, 0x20	; 32
    271a:	eb 16       	cp	r14, r27
    271c:	f1 04       	cpc	r15, r1
    271e:	b8 f0       	brcs	.+46     	; 0x274e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x8c>
    2720:	0e 94 36 2b 	call	0x566c	; 0x566c <_ZN7TwoWire15endTransmissionEv>
    2724:	69 a1       	ldd	r22, Y+33	; 0x21
    2726:	06 2e       	mov	r0, r22
    2728:	00 0c       	add	r0, r0
    272a:	77 0b       	sbc	r23, r23
    272c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    272e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2730:	0e 94 23 2b 	call	0x5646	; 0x5646 <_ZN7TwoWire17beginTransmissionEi>
    2734:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2736:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2738:	dc 01       	movw	r26, r24
    273a:	ed 91       	ld	r30, X+
    273c:	fc 91       	ld	r31, X
    273e:	01 90       	ld	r0, Z+
    2740:	f0 81       	ld	r31, Z
    2742:	e0 2d       	mov	r30, r0
    2744:	60 e0       	ldi	r22, 0x00	; 0
    2746:	19 95       	eicall
    2748:	ee 24       	eor	r14, r14
    274a:	e3 94       	inc	r14
    274c:	f1 2c       	mov	r15, r1
    274e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2750:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2752:	f6 01       	movw	r30, r12
    2754:	64 91       	lpm	r22, Z
    2756:	dc 01       	movw	r26, r24
    2758:	ed 91       	ld	r30, X+
    275a:	fc 91       	ld	r31, X
    275c:	01 90       	ld	r0, Z+
    275e:	f0 81       	ld	r31, Z
    2760:	e0 2d       	mov	r30, r0
    2762:	19 95       	eicall
    2764:	bf ef       	ldi	r27, 0xFF	; 255
    2766:	eb 1a       	sub	r14, r27
    2768:	fb 0a       	sbc	r15, r27
    276a:	11 50       	subi	r17, 0x01	; 1
    276c:	f6 01       	movw	r30, r12
    276e:	31 96       	adiw	r30, 0x01	; 1
    2770:	6f 01       	movw	r12, r30
    2772:	ce cf       	rjmp	.-100    	; 0x2710 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x4e>
    2774:	df 91       	pop	r29
    2776:	cf 91       	pop	r28
    2778:	1f 91       	pop	r17
    277a:	0f 91       	pop	r16
    277c:	ff 90       	pop	r15
    277e:	ef 90       	pop	r14
    2780:	df 90       	pop	r13
    2782:	cf 90       	pop	r12
    2784:	bf 90       	pop	r11
    2786:	0c 94 36 2b 	jmp	0x566c	; 0x566c <_ZN7TwoWire15endTransmissionEv>
    278a:	ed a5       	ldd	r30, Y+45	; 0x2d
    278c:	fe a5       	ldd	r31, Y+46	; 0x2e
    278e:	90 81       	ld	r25, Z
    2790:	8b a9       	ldd	r24, Y+51	; 0x33
    2792:	80 95       	com	r24
    2794:	89 23       	and	r24, r25
    2796:	80 83       	st	Z, r24
    2798:	e6 2e       	mov	r14, r22
    279a:	f7 2e       	mov	r15, r23
    279c:	11 23       	and	r17, r17
    279e:	71 f1       	breq	.+92     	; 0x27fc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x13a>
    27a0:	f7 01       	movw	r30, r14
    27a2:	84 91       	lpm	r24, Z
    27a4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    27a6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    27a8:	23 2b       	or	r18, r19
    27aa:	31 f0       	breq	.+12     	; 0x27b8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xf6>
    27ac:	87 de       	rcall	.-754    	; 0x24bc <_ZN8SPIClass8transferEh>
    27ae:	11 50       	subi	r17, 0x01	; 1
    27b0:	c7 01       	movw	r24, r14
    27b2:	01 96       	adiw	r24, 0x01	; 1
    27b4:	7c 01       	movw	r14, r24
    27b6:	f2 cf       	rjmp	.-28     	; 0x279c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xda>
    27b8:	28 e0       	ldi	r18, 0x08	; 8
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e8       	ldi	r20, 0x80	; 128
    27be:	e9 a5       	ldd	r30, Y+41	; 0x29
    27c0:	fa a5       	ldd	r31, Y+42	; 0x2a
    27c2:	99 a9       	ldd	r25, Y+49	; 0x31
    27c4:	58 2f       	mov	r21, r24
    27c6:	54 23       	and	r21, r20
    27c8:	19 f0       	breq	.+6      	; 0x27d0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x10e>
    27ca:	50 81       	ld	r21, Z
    27cc:	95 2b       	or	r25, r21
    27ce:	03 c0       	rjmp	.+6      	; 0x27d6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x114>
    27d0:	50 81       	ld	r21, Z
    27d2:	90 95       	com	r25
    27d4:	95 23       	and	r25, r21
    27d6:	90 83       	st	Z, r25
    27d8:	eb a5       	ldd	r30, Y+43	; 0x2b
    27da:	fc a5       	ldd	r31, Y+44	; 0x2c
    27dc:	50 81       	ld	r21, Z
    27de:	9a a9       	ldd	r25, Y+50	; 0x32
    27e0:	95 2b       	or	r25, r21
    27e2:	90 83       	st	Z, r25
    27e4:	eb a5       	ldd	r30, Y+43	; 0x2b
    27e6:	fc a5       	ldd	r31, Y+44	; 0x2c
    27e8:	50 81       	ld	r21, Z
    27ea:	9a a9       	ldd	r25, Y+50	; 0x32
    27ec:	90 95       	com	r25
    27ee:	95 23       	and	r25, r21
    27f0:	90 83       	st	Z, r25
    27f2:	46 95       	lsr	r20
    27f4:	21 50       	subi	r18, 0x01	; 1
    27f6:	31 09       	sbc	r19, r1
    27f8:	11 f7       	brne	.-60     	; 0x27be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xfc>
    27fa:	d9 cf       	rjmp	.-78     	; 0x27ae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xec>
    27fc:	df 91       	pop	r29
    27fe:	cf 91       	pop	r28
    2800:	1f 91       	pop	r17
    2802:	0f 91       	pop	r16
    2804:	ff 90       	pop	r15
    2806:	ef 90       	pop	r14
    2808:	df 90       	pop	r13
    280a:	cf 90       	pop	r12
    280c:	bf 90       	pop	r11
    280e:	08 95       	ret

00002810 <_ZN16Adafruit_SSD130612clearDisplayEv>:
    2810:	fc 01       	movw	r30, r24
    2812:	86 81       	ldd	r24, Z+6	; 0x06
    2814:	97 81       	ldd	r25, Z+7	; 0x07
    2816:	9c 01       	movw	r18, r24
    2818:	29 5f       	subi	r18, 0xF9	; 249
    281a:	3f 4f       	sbci	r19, 0xFF	; 255
    281c:	37 ff       	sbrs	r19, 7
    281e:	02 c0       	rjmp	.+4      	; 0x2824 <_ZN16Adafruit_SSD130612clearDisplayEv+0x14>
    2820:	29 5f       	subi	r18, 0xF9	; 249
    2822:	3f 4f       	sbci	r19, 0xFF	; 255
    2824:	83 e0       	ldi	r24, 0x03	; 3
    2826:	35 95       	asr	r19
    2828:	27 95       	ror	r18
    282a:	8a 95       	dec	r24
    282c:	e1 f7       	brne	.-8      	; 0x2826 <_ZN16Adafruit_SSD130612clearDisplayEv+0x16>
    282e:	84 81       	ldd	r24, Z+4	; 0x04
    2830:	95 81       	ldd	r25, Z+5	; 0x05
    2832:	28 9f       	mul	r18, r24
    2834:	a0 01       	movw	r20, r0
    2836:	29 9f       	mul	r18, r25
    2838:	50 0d       	add	r21, r0
    283a:	38 9f       	mul	r19, r24
    283c:	50 0d       	add	r21, r0
    283e:	11 24       	eor	r1, r1
    2840:	60 e0       	ldi	r22, 0x00	; 0
    2842:	70 e0       	ldi	r23, 0x00	; 0
    2844:	87 8d       	ldd	r24, Z+31	; 0x1f
    2846:	90 a1       	ldd	r25, Z+32	; 0x20
    2848:	0c 94 7e 3d 	jmp	0x7afc	; 0x7afc <memset>

0000284c <_ZN16Adafruit_SSD13065beginEhhbb>:
    284c:	8f 92       	push	r8
    284e:	9f 92       	push	r9
    2850:	af 92       	push	r10
    2852:	bf 92       	push	r11
    2854:	cf 92       	push	r12
    2856:	df 92       	push	r13
    2858:	ef 92       	push	r14
    285a:	ff 92       	push	r15
    285c:	0f 93       	push	r16
    285e:	1f 93       	push	r17
    2860:	cf 93       	push	r28
    2862:	df 93       	push	r29
    2864:	ec 01       	movw	r28, r24
    2866:	86 2e       	mov	r8, r22
    2868:	b4 2e       	mov	r11, r20
    286a:	a2 2e       	mov	r10, r18
    286c:	90 2e       	mov	r9, r16
    286e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2870:	98 a1       	ldd	r25, Y+32	; 0x20
    2872:	89 2b       	or	r24, r25
    2874:	e9 f4       	brne	.+58     	; 0x28b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    2876:	2e 81       	ldd	r18, Y+6	; 0x06
    2878:	3f 81       	ldd	r19, Y+7	; 0x07
    287a:	c9 01       	movw	r24, r18
    287c:	07 96       	adiw	r24, 0x07	; 7
    287e:	97 fd       	sbrc	r25, 7
    2880:	07 96       	adiw	r24, 0x07	; 7
    2882:	23 e0       	ldi	r18, 0x03	; 3
    2884:	95 95       	asr	r25
    2886:	87 95       	ror	r24
    2888:	2a 95       	dec	r18
    288a:	e1 f7       	brne	.-8      	; 0x2884 <_ZN16Adafruit_SSD13065beginEhhbb+0x38>
    288c:	2c 81       	ldd	r18, Y+4	; 0x04
    288e:	3d 81       	ldd	r19, Y+5	; 0x05
    2890:	ac 01       	movw	r20, r24
    2892:	42 9f       	mul	r20, r18
    2894:	c0 01       	movw	r24, r0
    2896:	43 9f       	mul	r20, r19
    2898:	90 0d       	add	r25, r0
    289a:	52 9f       	mul	r21, r18
    289c:	90 0d       	add	r25, r0
    289e:	11 24       	eor	r1, r1
    28a0:	0e 94 37 3b 	call	0x766e	; 0x766e <malloc>
    28a4:	98 a3       	std	Y+32, r25	; 0x20
    28a6:	8f 8f       	std	Y+31, r24	; 0x1f
    28a8:	89 2b       	or	r24, r25
    28aa:	11 f4       	brne	.+4      	; 0x28b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	84 c1       	rjmp	.+776    	; 0x2bb8 <_ZN16Adafruit_SSD13065beginEhhbb+0x36c>
    28b0:	ce 01       	movw	r24, r28
    28b2:	ae df       	rcall	.-164    	; 0x2810 <_ZN16Adafruit_SSD130612clearDisplayEv>
    28b4:	8e 81       	ldd	r24, Y+6	; 0x06
    28b6:	9f 81       	ldd	r25, Y+7	; 0x07
    28b8:	6c 81       	ldd	r22, Y+4	; 0x04
    28ba:	7d 81       	ldd	r23, Y+5	; 0x05
    28bc:	81 32       	cpi	r24, 0x21	; 33
    28be:	91 05       	cpc	r25, r1
    28c0:	e4 f0       	brlt	.+56     	; 0x28fa <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    28c2:	ac 01       	movw	r20, r24
    28c4:	40 54       	subi	r20, 0x40	; 64
    28c6:	51 09       	sbc	r21, r1
    28c8:	57 ff       	sbrs	r21, 7
    28ca:	02 c0       	rjmp	.+4      	; 0x28d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x84>
    28cc:	4f 5f       	subi	r20, 0xFF	; 255
    28ce:	5f 4f       	sbci	r21, 0xFF	; 255
    28d0:	55 95       	asr	r21
    28d2:	47 95       	ror	r20
    28d4:	62 55       	subi	r22, 0x52	; 82
    28d6:	71 09       	sbc	r23, r1
    28d8:	77 ff       	sbrs	r23, 7
    28da:	02 c0       	rjmp	.+4      	; 0x28e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x94>
    28dc:	6f 5f       	subi	r22, 0xFF	; 255
    28de:	7f 4f       	sbci	r23, 0xFF	; 255
    28e0:	75 95       	asr	r23
    28e2:	67 95       	ror	r22
    28e4:	cc 24       	eor	r12, r12
    28e6:	c3 94       	inc	r12
    28e8:	d1 2c       	mov	r13, r1
    28ea:	80 e4       	ldi	r24, 0x40	; 64
    28ec:	e8 2e       	mov	r14, r24
    28ee:	f1 2c       	mov	r15, r1
    28f0:	02 e5       	ldi	r16, 0x52	; 82
    28f2:	10 e0       	ldi	r17, 0x00	; 0
    28f4:	2e e6       	ldi	r18, 0x6E	; 110
    28f6:	38 e0       	ldi	r19, 0x08	; 8
    28f8:	1b c0       	rjmp	.+54     	; 0x2930 <_ZN16Adafruit_SSD13065beginEhhbb+0xe4>
    28fa:	ac 01       	movw	r20, r24
    28fc:	40 52       	subi	r20, 0x20	; 32
    28fe:	51 09       	sbc	r21, r1
    2900:	57 ff       	sbrs	r21, 7
    2902:	02 c0       	rjmp	.+4      	; 0x2908 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
    2904:	4f 5f       	subi	r20, 0xFF	; 255
    2906:	5f 4f       	sbci	r21, 0xFF	; 255
    2908:	55 95       	asr	r21
    290a:	47 95       	ror	r20
    290c:	63 57       	subi	r22, 0x73	; 115
    290e:	71 09       	sbc	r23, r1
    2910:	77 ff       	sbrs	r23, 7
    2912:	02 c0       	rjmp	.+4      	; 0x2918 <_ZN16Adafruit_SSD13065beginEhhbb+0xcc>
    2914:	6f 5f       	subi	r22, 0xFF	; 255
    2916:	7f 4f       	sbci	r23, 0xFF	; 255
    2918:	75 95       	asr	r23
    291a:	67 95       	ror	r22
    291c:	cc 24       	eor	r12, r12
    291e:	c3 94       	inc	r12
    2920:	d1 2c       	mov	r13, r1
    2922:	a0 e2       	ldi	r26, 0x20	; 32
    2924:	ea 2e       	mov	r14, r26
    2926:	f1 2c       	mov	r15, r1
    2928:	03 e7       	ldi	r16, 0x73	; 115
    292a:	10 e0       	ldi	r17, 0x00	; 0
    292c:	2e e8       	ldi	r18, 0x8E	; 142
    292e:	36 e0       	ldi	r19, 0x06	; 6
    2930:	ce 01       	movw	r24, r28
    2932:	51 d9       	rcall	.-3422   	; 0x1bd6 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    2934:	8a a2       	std	Y+34, r8	; 0x22
    2936:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2938:	9e 8d       	ldd	r25, Y+30	; 0x1e
    293a:	00 97       	sbiw	r24, 0x00	; 0
    293c:	99 f0       	breq	.+38     	; 0x2964 <_ZN16Adafruit_SSD13065beginEhhbb+0x118>
    293e:	b1 10       	cpse	r11, r1
    2940:	07 c0       	rjmp	.+14     	; 0x2950 <_ZN16Adafruit_SSD13065beginEhhbb+0x104>
    2942:	2e 81       	ldd	r18, Y+6	; 0x06
    2944:	3f 81       	ldd	r19, Y+7	; 0x07
    2946:	20 32       	cpi	r18, 0x20	; 32
    2948:	31 05       	cpc	r19, r1
    294a:	21 f4       	brne	.+8      	; 0x2954 <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
    294c:	2c e3       	ldi	r18, 0x3C	; 60
    294e:	03 c0       	rjmp	.+6      	; 0x2956 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
    2950:	2b 2d       	mov	r18, r11
    2952:	01 c0       	rjmp	.+2      	; 0x2956 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
    2954:	2d e3       	ldi	r18, 0x3D	; 61
    2956:	29 a3       	std	Y+33, r18	; 0x21
    2958:	99 20       	and	r9, r9
    295a:	09 f4       	brne	.+2      	; 0x295e <_ZN16Adafruit_SSD13065beginEhhbb+0x112>
    295c:	2a c1       	rjmp	.+596    	; 0x2bb2 <_ZN16Adafruit_SSD13065beginEhhbb+0x366>
    295e:	0e 94 07 2b 	call	0x560e	; 0x560e <_ZN7TwoWire5beginEv>
    2962:	79 c0       	rjmp	.+242    	; 0x2a56 <_ZN16Adafruit_SSD13065beginEhhbb+0x20a>
    2964:	61 e0       	ldi	r22, 0x01	; 1
    2966:	8e a1       	ldd	r24, Y+38	; 0x26
    2968:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
    296c:	61 e0       	ldi	r22, 0x01	; 1
    296e:	8f a1       	ldd	r24, Y+39	; 0x27
    2970:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
    2974:	8e a1       	ldd	r24, Y+38	; 0x26
    2976:	08 2e       	mov	r0, r24
    2978:	00 0c       	add	r0, r0
    297a:	99 0b       	sbc	r25, r25
    297c:	fc 01       	movw	r30, r24
    297e:	e5 54       	subi	r30, 0x45	; 69
    2980:	f4 4f       	sbci	r31, 0xF4	; 244
    2982:	e4 91       	lpm	r30, Z
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	ee 0f       	add	r30, r30
    2988:	ff 1f       	adc	r31, r31
    298a:	e5 5e       	subi	r30, 0xE5	; 229
    298c:	f3 4f       	sbci	r31, 0xF3	; 243
    298e:	25 91       	lpm	r18, Z+
    2990:	34 91       	lpm	r19, Z
    2992:	3e a7       	std	Y+46, r19	; 0x2e
    2994:	2d a7       	std	Y+45, r18	; 0x2d
    2996:	fc 01       	movw	r30, r24
    2998:	eb 58       	subi	r30, 0x8B	; 139
    299a:	f4 4f       	sbci	r31, 0xF4	; 244
    299c:	e4 91       	lpm	r30, Z
    299e:	eb ab       	std	Y+51, r30	; 0x33
    29a0:	8f a1       	ldd	r24, Y+39	; 0x27
    29a2:	08 2e       	mov	r0, r24
    29a4:	00 0c       	add	r0, r0
    29a6:	99 0b       	sbc	r25, r25
    29a8:	fc 01       	movw	r30, r24
    29aa:	e5 54       	subi	r30, 0x45	; 69
    29ac:	f4 4f       	sbci	r31, 0xF4	; 244
    29ae:	e4 91       	lpm	r30, Z
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	ee 0f       	add	r30, r30
    29b4:	ff 1f       	adc	r31, r31
    29b6:	e5 5e       	subi	r30, 0xE5	; 229
    29b8:	f3 4f       	sbci	r31, 0xF3	; 243
    29ba:	a5 91       	lpm	r26, Z+
    29bc:	b4 91       	lpm	r27, Z
    29be:	b8 ab       	std	Y+48, r27	; 0x30
    29c0:	af a7       	std	Y+47, r26	; 0x2f
    29c2:	fc 01       	movw	r30, r24
    29c4:	eb 58       	subi	r30, 0x8B	; 139
    29c6:	f4 4f       	sbci	r31, 0xF4	; 244
    29c8:	e4 91       	lpm	r30, Z
    29ca:	ec ab       	std	Y+52, r30	; 0x34
    29cc:	8c 91       	ld	r24, X
    29ce:	e8 2b       	or	r30, r24
    29d0:	ec 93       	st	X, r30
    29d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29d6:	89 2b       	or	r24, r25
    29d8:	31 f0       	breq	.+12     	; 0x29e6 <_ZN16Adafruit_SSD13065beginEhhbb+0x19a>
    29da:	99 20       	and	r9, r9
    29dc:	09 f4       	brne	.+2      	; 0x29e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x194>
    29de:	3b c0       	rjmp	.+118    	; 0x2a56 <_ZN16Adafruit_SSD13065beginEhhbb+0x20a>
    29e0:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <_ZN8SPIClass5beginEv>
    29e4:	38 c0       	rjmp	.+112    	; 0x2a56 <_ZN16Adafruit_SSD13065beginEhhbb+0x20a>
    29e6:	61 e0       	ldi	r22, 0x01	; 1
    29e8:	8c a1       	ldd	r24, Y+36	; 0x24
    29ea:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
    29ee:	61 e0       	ldi	r22, 0x01	; 1
    29f0:	8d a1       	ldd	r24, Y+37	; 0x25
    29f2:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
    29f6:	8c a1       	ldd	r24, Y+36	; 0x24
    29f8:	08 2e       	mov	r0, r24
    29fa:	00 0c       	add	r0, r0
    29fc:	99 0b       	sbc	r25, r25
    29fe:	fc 01       	movw	r30, r24
    2a00:	e5 54       	subi	r30, 0x45	; 69
    2a02:	f4 4f       	sbci	r31, 0xF4	; 244
    2a04:	e4 91       	lpm	r30, Z
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	ee 0f       	add	r30, r30
    2a0a:	ff 1f       	adc	r31, r31
    2a0c:	e5 5e       	subi	r30, 0xE5	; 229
    2a0e:	f3 4f       	sbci	r31, 0xF3	; 243
    2a10:	25 91       	lpm	r18, Z+
    2a12:	34 91       	lpm	r19, Z
    2a14:	3a a7       	std	Y+42, r19	; 0x2a
    2a16:	29 a7       	std	Y+41, r18	; 0x29
    2a18:	fc 01       	movw	r30, r24
    2a1a:	eb 58       	subi	r30, 0x8B	; 139
    2a1c:	f4 4f       	sbci	r31, 0xF4	; 244
    2a1e:	e4 91       	lpm	r30, Z
    2a20:	e9 ab       	std	Y+49, r30	; 0x31
    2a22:	8d a1       	ldd	r24, Y+37	; 0x25
    2a24:	08 2e       	mov	r0, r24
    2a26:	00 0c       	add	r0, r0
    2a28:	99 0b       	sbc	r25, r25
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	e5 54       	subi	r30, 0x45	; 69
    2a2e:	f4 4f       	sbci	r31, 0xF4	; 244
    2a30:	e4 91       	lpm	r30, Z
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	ee 0f       	add	r30, r30
    2a36:	ff 1f       	adc	r31, r31
    2a38:	e5 5e       	subi	r30, 0xE5	; 229
    2a3a:	f3 4f       	sbci	r31, 0xF3	; 243
    2a3c:	a5 91       	lpm	r26, Z+
    2a3e:	b4 91       	lpm	r27, Z
    2a40:	bc a7       	std	Y+44, r27	; 0x2c
    2a42:	ab a7       	std	Y+43, r26	; 0x2b
    2a44:	fc 01       	movw	r30, r24
    2a46:	eb 58       	subi	r30, 0x8B	; 139
    2a48:	f4 4f       	sbci	r31, 0xF4	; 244
    2a4a:	e4 91       	lpm	r30, Z
    2a4c:	ea ab       	std	Y+50, r30	; 0x32
    2a4e:	8c 91       	ld	r24, X
    2a50:	e0 95       	com	r30
    2a52:	e8 23       	and	r30, r24
    2a54:	ec 93       	st	X, r30
    2a56:	aa 20       	and	r10, r10
    2a58:	f1 f0       	breq	.+60     	; 0x2a96 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
    2a5a:	88 a5       	ldd	r24, Y+40	; 0x28
    2a5c:	87 fd       	sbrc	r24, 7
    2a5e:	1b c0       	rjmp	.+54     	; 0x2a96 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
    2a60:	61 e0       	ldi	r22, 0x01	; 1
    2a62:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
    2a66:	61 e0       	ldi	r22, 0x01	; 1
    2a68:	88 a5       	ldd	r24, Y+40	; 0x28
    2a6a:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    2a6e:	61 e0       	ldi	r22, 0x01	; 1
    2a70:	70 e0       	ldi	r23, 0x00	; 0
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	0e 94 7a 35 	call	0x6af4	; 0x6af4 <delay>
    2a7a:	60 e0       	ldi	r22, 0x00	; 0
    2a7c:	88 a5       	ldd	r24, Y+40	; 0x28
    2a7e:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    2a82:	6a e0       	ldi	r22, 0x0A	; 10
    2a84:	70 e0       	ldi	r23, 0x00	; 0
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	0e 94 7a 35 	call	0x6af4	; 0x6af4 <delay>
    2a8e:	61 e0       	ldi	r22, 0x01	; 1
    2a90:	88 a5       	ldd	r24, Y+40	; 0x28
    2a92:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    2a96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a9a:	00 97       	sbiw	r24, 0x00	; 0
    2a9c:	39 f0       	breq	.+14     	; 0x2aac <_ZN16Adafruit_SSD13065beginEhhbb+0x260>
    2a9e:	4d a9       	ldd	r20, Y+53	; 0x35
    2aa0:	5e a9       	ldd	r21, Y+54	; 0x36
    2aa2:	6f a9       	ldd	r22, Y+55	; 0x37
    2aa4:	78 ad       	ldd	r23, Y+56	; 0x38
    2aa6:	0e 94 16 2b 	call	0x562c	; 0x562c <_ZN7TwoWire8setClockEm>
    2aaa:	0f c0       	rjmp	.+30     	; 0x2aca <_ZN16Adafruit_SSD13065beginEhhbb+0x27e>
    2aac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ab0:	89 2b       	or	r24, r25
    2ab2:	21 f0       	breq	.+8      	; 0x2abc <_ZN16Adafruit_SSD13065beginEhhbb+0x270>
    2ab4:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ab6:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ab8:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2abc:	ef a5       	ldd	r30, Y+47	; 0x2f
    2abe:	f8 a9       	ldd	r31, Y+48	; 0x30
    2ac0:	90 81       	ld	r25, Z
    2ac2:	8c a9       	ldd	r24, Y+52	; 0x34
    2ac4:	80 95       	com	r24
    2ac6:	89 23       	and	r24, r25
    2ac8:	80 83       	st	Z, r24
    2aca:	44 e0       	ldi	r20, 0x04	; 4
    2acc:	6a e8       	ldi	r22, 0x8A	; 138
    2ace:	76 e0       	ldi	r23, 0x06	; 6
    2ad0:	ce 01       	movw	r24, r28
    2ad2:	f7 dd       	rcall	.-1042   	; 0x26c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    2ad4:	6e 81       	ldd	r22, Y+6	; 0x06
    2ad6:	61 50       	subi	r22, 0x01	; 1
    2ad8:	ce 01       	movw	r24, r28
    2ada:	4d dd       	rcall	.-1382   	; 0x2576 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2adc:	44 e0       	ldi	r20, 0x04	; 4
    2ade:	66 e8       	ldi	r22, 0x86	; 134
    2ae0:	76 e0       	ldi	r23, 0x06	; 6
    2ae2:	ce 01       	movw	r24, r28
    2ae4:	ee dd       	rcall	.-1060   	; 0x26c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    2ae6:	8a a1       	ldd	r24, Y+34	; 0x22
    2ae8:	81 30       	cpi	r24, 0x01	; 1
    2aea:	11 f4       	brne	.+4      	; 0x2af0 <_ZN16Adafruit_SSD13065beginEhhbb+0x2a4>
    2aec:	60 e1       	ldi	r22, 0x10	; 16
    2aee:	01 c0       	rjmp	.+2      	; 0x2af2 <_ZN16Adafruit_SSD13065beginEhhbb+0x2a6>
    2af0:	64 e1       	ldi	r22, 0x14	; 20
    2af2:	ce 01       	movw	r24, r28
    2af4:	40 dd       	rcall	.-1408   	; 0x2576 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2af6:	44 e0       	ldi	r20, 0x04	; 4
    2af8:	62 e8       	ldi	r22, 0x82	; 130
    2afa:	76 e0       	ldi	r23, 0x06	; 6
    2afc:	ce 01       	movw	r24, r28
    2afe:	e1 dd       	rcall	.-1086   	; 0x26c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    2b00:	8f e8       	ldi	r24, 0x8F	; 143
    2b02:	8d af       	std	Y+61, r24	; 0x3d
    2b04:	8c 81       	ldd	r24, Y+4	; 0x04
    2b06:	9d 81       	ldd	r25, Y+5	; 0x05
    2b08:	80 38       	cpi	r24, 0x80	; 128
    2b0a:	91 05       	cpc	r25, r1
    2b0c:	71 f4       	brne	.+28     	; 0x2b2a <_ZN16Adafruit_SSD13065beginEhhbb+0x2de>
    2b0e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b10:	9f 81       	ldd	r25, Y+7	; 0x07
    2b12:	80 34       	cpi	r24, 0x40	; 64
    2b14:	91 05       	cpc	r25, r1
    2b16:	b9 f4       	brne	.+46     	; 0x2b46 <_ZN16Adafruit_SSD13065beginEhhbb+0x2fa>
    2b18:	8a a1       	ldd	r24, Y+34	; 0x22
    2b1a:	81 30       	cpi	r24, 0x01	; 1
    2b1c:	11 f4       	brne	.+4      	; 0x2b22 <_ZN16Adafruit_SSD13065beginEhhbb+0x2d6>
    2b1e:	8f e9       	ldi	r24, 0x9F	; 159
    2b20:	01 c0       	rjmp	.+2      	; 0x2b24 <_ZN16Adafruit_SSD13065beginEhhbb+0x2d8>
    2b22:	8f ec       	ldi	r24, 0xCF	; 207
    2b24:	8d af       	std	Y+61, r24	; 0x3d
    2b26:	12 e1       	ldi	r17, 0x12	; 18
    2b28:	0f c0       	rjmp	.+30     	; 0x2b48 <_ZN16Adafruit_SSD13065beginEhhbb+0x2fc>
    2b2a:	80 36       	cpi	r24, 0x60	; 96
    2b2c:	91 05       	cpc	r25, r1
    2b2e:	59 f4       	brne	.+22     	; 0x2b46 <_ZN16Adafruit_SSD13065beginEhhbb+0x2fa>
    2b30:	8e 81       	ldd	r24, Y+6	; 0x06
    2b32:	9f 81       	ldd	r25, Y+7	; 0x07
    2b34:	40 97       	sbiw	r24, 0x10	; 16
    2b36:	39 f4       	brne	.+14     	; 0x2b46 <_ZN16Adafruit_SSD13065beginEhhbb+0x2fa>
    2b38:	8a a1       	ldd	r24, Y+34	; 0x22
    2b3a:	81 30       	cpi	r24, 0x01	; 1
    2b3c:	11 f4       	brne	.+4      	; 0x2b42 <_ZN16Adafruit_SSD13065beginEhhbb+0x2f6>
    2b3e:	80 e1       	ldi	r24, 0x10	; 16
    2b40:	01 c0       	rjmp	.+2      	; 0x2b44 <_ZN16Adafruit_SSD13065beginEhhbb+0x2f8>
    2b42:	8f ea       	ldi	r24, 0xAF	; 175
    2b44:	8d af       	std	Y+61, r24	; 0x3d
    2b46:	12 e0       	ldi	r17, 0x02	; 2
    2b48:	6a ed       	ldi	r22, 0xDA	; 218
    2b4a:	ce 01       	movw	r24, r28
    2b4c:	14 dd       	rcall	.-1496   	; 0x2576 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2b4e:	61 2f       	mov	r22, r17
    2b50:	ce 01       	movw	r24, r28
    2b52:	11 dd       	rcall	.-1502   	; 0x2576 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2b54:	61 e8       	ldi	r22, 0x81	; 129
    2b56:	ce 01       	movw	r24, r28
    2b58:	0e dd       	rcall	.-1508   	; 0x2576 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2b5a:	6d ad       	ldd	r22, Y+61	; 0x3d
    2b5c:	ce 01       	movw	r24, r28
    2b5e:	0b dd       	rcall	.-1514   	; 0x2576 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2b60:	69 ed       	ldi	r22, 0xD9	; 217
    2b62:	ce 01       	movw	r24, r28
    2b64:	08 dd       	rcall	.-1520   	; 0x2576 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2b66:	8a a1       	ldd	r24, Y+34	; 0x22
    2b68:	81 30       	cpi	r24, 0x01	; 1
    2b6a:	11 f4       	brne	.+4      	; 0x2b70 <_ZN16Adafruit_SSD13065beginEhhbb+0x324>
    2b6c:	62 e2       	ldi	r22, 0x22	; 34
    2b6e:	01 c0       	rjmp	.+2      	; 0x2b72 <_ZN16Adafruit_SSD13065beginEhhbb+0x326>
    2b70:	61 ef       	ldi	r22, 0xF1	; 241
    2b72:	ce 01       	movw	r24, r28
    2b74:	00 dd       	rcall	.-1536   	; 0x2576 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2b76:	46 e0       	ldi	r20, 0x06	; 6
    2b78:	6c e7       	ldi	r22, 0x7C	; 124
    2b7a:	76 e0       	ldi	r23, 0x06	; 6
    2b7c:	ce 01       	movw	r24, r28
    2b7e:	a1 dd       	rcall	.-1214   	; 0x26c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    2b80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b84:	00 97       	sbiw	r24, 0x00	; 0
    2b86:	39 f0       	breq	.+14     	; 0x2b96 <_ZN16Adafruit_SSD13065beginEhhbb+0x34a>
    2b88:	49 ad       	ldd	r20, Y+57	; 0x39
    2b8a:	5a ad       	ldd	r21, Y+58	; 0x3a
    2b8c:	6b ad       	ldd	r22, Y+59	; 0x3b
    2b8e:	7c ad       	ldd	r23, Y+60	; 0x3c
    2b90:	0e 94 16 2b 	call	0x562c	; 0x562c <_ZN7TwoWire8setClockEm>
    2b94:	0c c0       	rjmp	.+24     	; 0x2bae <_ZN16Adafruit_SSD13065beginEhhbb+0x362>
    2b96:	ef a5       	ldd	r30, Y+47	; 0x2f
    2b98:	f8 a9       	ldd	r31, Y+48	; 0x30
    2b9a:	90 81       	ld	r25, Z
    2b9c:	8c a9       	ldd	r24, Y+52	; 0x34
    2b9e:	89 2b       	or	r24, r25
    2ba0:	80 83       	st	Z, r24
    2ba2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ba4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ba6:	89 2b       	or	r24, r25
    2ba8:	11 f0       	breq	.+4      	; 0x2bae <_ZN16Adafruit_SSD13065beginEhhbb+0x362>
    2baa:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN8SPIClass14endTransactionEv>
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	03 c0       	rjmp	.+6      	; 0x2bb8 <_ZN16Adafruit_SSD13065beginEhhbb+0x36c>
    2bb2:	a1 10       	cpse	r10, r1
    2bb4:	52 cf       	rjmp	.-348    	; 0x2a5a <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    2bb6:	73 cf       	rjmp	.-282    	; 0x2a9e <_ZN16Adafruit_SSD13065beginEhhbb+0x252>
    2bb8:	df 91       	pop	r29
    2bba:	cf 91       	pop	r28
    2bbc:	1f 91       	pop	r17
    2bbe:	0f 91       	pop	r16
    2bc0:	ff 90       	pop	r15
    2bc2:	ef 90       	pop	r14
    2bc4:	df 90       	pop	r13
    2bc6:	cf 90       	pop	r12
    2bc8:	bf 90       	pop	r11
    2bca:	af 90       	pop	r10
    2bcc:	9f 90       	pop	r9
    2bce:	8f 90       	pop	r8
    2bd0:	08 95       	ret

00002bd2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>:
    2bd2:	0f 93       	push	r16
    2bd4:	1f 93       	push	r17
    2bd6:	cf 93       	push	r28
    2bd8:	df 93       	push	r29
    2bda:	dc 01       	movw	r26, r24
    2bdc:	57 fd       	sbrc	r21, 7
    2bde:	64 c0       	rjmp	.+200    	; 0x2ca8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2be0:	16 96       	adiw	r26, 0x06	; 6
    2be2:	8d 91       	ld	r24, X+
    2be4:	9c 91       	ld	r25, X
    2be6:	17 97       	sbiw	r26, 0x07	; 7
    2be8:	48 17       	cp	r20, r24
    2bea:	59 07       	cpc	r21, r25
    2bec:	0c f0       	brlt	.+2      	; 0x2bf0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1e>
    2bee:	5c c0       	rjmp	.+184    	; 0x2ca8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2bf0:	77 ff       	sbrs	r23, 7
    2bf2:	04 c0       	rjmp	.+8      	; 0x2bfc <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x2a>
    2bf4:	26 0f       	add	r18, r22
    2bf6:	37 1f       	adc	r19, r23
    2bf8:	60 e0       	ldi	r22, 0x00	; 0
    2bfa:	70 e0       	ldi	r23, 0x00	; 0
    2bfc:	14 96       	adiw	r26, 0x04	; 4
    2bfe:	cd 91       	ld	r28, X+
    2c00:	dc 91       	ld	r29, X
    2c02:	15 97       	sbiw	r26, 0x05	; 5
    2c04:	cb 01       	movw	r24, r22
    2c06:	82 0f       	add	r24, r18
    2c08:	93 1f       	adc	r25, r19
    2c0a:	c8 17       	cp	r28, r24
    2c0c:	d9 07       	cpc	r29, r25
    2c0e:	1c f4       	brge	.+6      	; 0x2c16 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x44>
    2c10:	9e 01       	movw	r18, r28
    2c12:	26 1b       	sub	r18, r22
    2c14:	37 0b       	sbc	r19, r23
    2c16:	12 16       	cp	r1, r18
    2c18:	13 06       	cpc	r1, r19
    2c1a:	0c f0       	brlt	.+2      	; 0x2c1e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x4c>
    2c1c:	45 c0       	rjmp	.+138    	; 0x2ca8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2c1e:	fa 01       	movw	r30, r20
    2c20:	57 fd       	sbrc	r21, 7
    2c22:	37 96       	adiw	r30, 0x07	; 7
    2c24:	cf 01       	movw	r24, r30
    2c26:	e3 e0       	ldi	r30, 0x03	; 3
    2c28:	95 95       	asr	r25
    2c2a:	87 95       	ror	r24
    2c2c:	ea 95       	dec	r30
    2c2e:	e1 f7       	brne	.-8      	; 0x2c28 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x56>
    2c30:	8c 9f       	mul	r24, r28
    2c32:	f0 01       	movw	r30, r0
    2c34:	8d 9f       	mul	r24, r29
    2c36:	f0 0d       	add	r31, r0
    2c38:	9c 9f       	mul	r25, r28
    2c3a:	f0 0d       	add	r31, r0
    2c3c:	11 24       	eor	r1, r1
    2c3e:	6e 0f       	add	r22, r30
    2c40:	7f 1f       	adc	r23, r31
    2c42:	5f 96       	adiw	r26, 0x1f	; 31
    2c44:	ed 91       	ld	r30, X+
    2c46:	fc 91       	ld	r31, X
    2c48:	90 97       	sbiw	r26, 0x20	; 32
    2c4a:	e6 0f       	add	r30, r22
    2c4c:	f7 1f       	adc	r31, r23
    2c4e:	47 70       	andi	r20, 0x07	; 7
    2c50:	55 27       	eor	r21, r21
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	01 c0       	rjmp	.+2      	; 0x2c5a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x88>
    2c58:	88 0f       	add	r24, r24
    2c5a:	4a 95       	dec	r20
    2c5c:	ea f7       	brpl	.-6      	; 0x2c58 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x86>
    2c5e:	48 2f       	mov	r20, r24
    2c60:	01 30       	cpi	r16, 0x01	; 1
    2c62:	11 05       	cpc	r17, r1
    2c64:	39 f0       	breq	.+14     	; 0x2c74 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa2>
    2c66:	78 f0       	brcs	.+30     	; 0x2c86 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xb4>
    2c68:	02 30       	cpi	r16, 0x02	; 2
    2c6a:	11 05       	cpc	r17, r1
    2c6c:	e9 f4       	brne	.+58     	; 0x2ca8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2c6e:	2e 0f       	add	r18, r30
    2c70:	3f 1f       	adc	r19, r31
    2c72:	13 c0       	rjmp	.+38     	; 0x2c9a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    2c74:	2e 0f       	add	r18, r30
    2c76:	3f 1f       	adc	r19, r31
    2c78:	e2 17       	cp	r30, r18
    2c7a:	f3 07       	cpc	r31, r19
    2c7c:	a9 f0       	breq	.+42     	; 0x2ca8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2c7e:	80 81       	ld	r24, Z
    2c80:	84 2b       	or	r24, r20
    2c82:	81 93       	st	Z+, r24
    2c84:	f9 cf       	rjmp	.-14     	; 0x2c78 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa6>
    2c86:	80 95       	com	r24
    2c88:	2e 0f       	add	r18, r30
    2c8a:	3f 1f       	adc	r19, r31
    2c8c:	e2 17       	cp	r30, r18
    2c8e:	f3 07       	cpc	r31, r19
    2c90:	59 f0       	breq	.+22     	; 0x2ca8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2c92:	90 81       	ld	r25, Z
    2c94:	98 23       	and	r25, r24
    2c96:	91 93       	st	Z+, r25
    2c98:	f9 cf       	rjmp	.-14     	; 0x2c8c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xba>
    2c9a:	e2 17       	cp	r30, r18
    2c9c:	f3 07       	cpc	r31, r19
    2c9e:	21 f0       	breq	.+8      	; 0x2ca8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2ca0:	80 81       	ld	r24, Z
    2ca2:	84 27       	eor	r24, r20
    2ca4:	81 93       	st	Z+, r24
    2ca6:	f9 cf       	rjmp	.-14     	; 0x2c9a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    2ca8:	df 91       	pop	r29
    2caa:	cf 91       	pop	r28
    2cac:	1f 91       	pop	r17
    2cae:	0f 91       	pop	r16
    2cb0:	08 95       	ret

00002cb2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>:
    2cb2:	ef 92       	push	r14
    2cb4:	ff 92       	push	r15
    2cb6:	0f 93       	push	r16
    2cb8:	1f 93       	push	r17
    2cba:	cf 93       	push	r28
    2cbc:	df 93       	push	r29
    2cbe:	ec 01       	movw	r28, r24
    2cc0:	77 fd       	sbrc	r23, 7
    2cc2:	a5 c0       	rjmp	.+330    	; 0x2e0e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2cc4:	ec 80       	ldd	r14, Y+4	; 0x04
    2cc6:	fd 80       	ldd	r15, Y+5	; 0x05
    2cc8:	6e 15       	cp	r22, r14
    2cca:	7f 05       	cpc	r23, r15
    2ccc:	0c f0       	brlt	.+2      	; 0x2cd0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1e>
    2cce:	9f c0       	rjmp	.+318    	; 0x2e0e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2cd0:	57 ff       	sbrs	r21, 7
    2cd2:	04 c0       	rjmp	.+8      	; 0x2cdc <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2a>
    2cd4:	24 0f       	add	r18, r20
    2cd6:	35 1f       	adc	r19, r21
    2cd8:	40 e0       	ldi	r20, 0x00	; 0
    2cda:	50 e0       	ldi	r21, 0x00	; 0
    2cdc:	8e 81       	ldd	r24, Y+6	; 0x06
    2cde:	9f 81       	ldd	r25, Y+7	; 0x07
    2ce0:	fa 01       	movw	r30, r20
    2ce2:	e2 0f       	add	r30, r18
    2ce4:	f3 1f       	adc	r31, r19
    2ce6:	8e 17       	cp	r24, r30
    2ce8:	9f 07       	cpc	r25, r31
    2cea:	1c f4       	brge	.+6      	; 0x2cf2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x40>
    2cec:	9c 01       	movw	r18, r24
    2cee:	24 1b       	sub	r18, r20
    2cf0:	35 0b       	sbc	r19, r21
    2cf2:	12 16       	cp	r1, r18
    2cf4:	13 06       	cpc	r1, r19
    2cf6:	0c f0       	brlt	.+2      	; 0x2cfa <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x48>
    2cf8:	8a c0       	rjmp	.+276    	; 0x2e0e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2cfa:	92 2f       	mov	r25, r18
    2cfc:	84 2f       	mov	r24, r20
    2cfe:	86 95       	lsr	r24
    2d00:	86 95       	lsr	r24
    2d02:	86 95       	lsr	r24
    2d04:	8e 9d       	mul	r24, r14
    2d06:	d0 01       	movw	r26, r0
    2d08:	8f 9d       	mul	r24, r15
    2d0a:	b0 0d       	add	r27, r0
    2d0c:	11 24       	eor	r1, r1
    2d0e:	6a 0f       	add	r22, r26
    2d10:	7b 1f       	adc	r23, r27
    2d12:	af 8d       	ldd	r26, Y+31	; 0x1f
    2d14:	b8 a1       	ldd	r27, Y+32	; 0x20
    2d16:	a6 0f       	add	r26, r22
    2d18:	b7 1f       	adc	r27, r23
    2d1a:	47 70       	andi	r20, 0x07	; 7
    2d1c:	b1 f1       	breq	.+108    	; 0x2d8a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    2d1e:	88 e0       	ldi	r24, 0x08	; 8
    2d20:	84 1b       	sub	r24, r20
    2d22:	48 2f       	mov	r20, r24
    2d24:	68 2f       	mov	r22, r24
    2d26:	70 e0       	ldi	r23, 0x00	; 0
    2d28:	fb 01       	movw	r30, r22
    2d2a:	ec 58       	subi	r30, 0x8C	; 140
    2d2c:	f9 4f       	sbci	r31, 0xF9	; 249
    2d2e:	e4 91       	lpm	r30, Z
    2d30:	28 17       	cp	r18, r24
    2d32:	98 f4       	brcc	.+38     	; 0x2d5a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa8>
    2d34:	62 1b       	sub	r22, r18
    2d36:	71 09       	sbc	r23, r1
    2d38:	2f ef       	ldi	r18, 0xFF	; 255
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	02 c0       	rjmp	.+4      	; 0x2d42 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x90>
    2d3e:	35 95       	asr	r19
    2d40:	27 95       	ror	r18
    2d42:	6a 95       	dec	r22
    2d44:	e2 f7       	brpl	.-8      	; 0x2d3e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x8c>
    2d46:	e2 23       	and	r30, r18
    2d48:	01 30       	cpi	r16, 0x01	; 1
    2d4a:	11 05       	cpc	r17, r1
    2d4c:	49 f0       	breq	.+18     	; 0x2d60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xae>
    2d4e:	78 f0       	brcs	.+30     	; 0x2d6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    2d50:	02 30       	cpi	r16, 0x02	; 2
    2d52:	11 05       	cpc	r17, r1
    2d54:	09 f0       	breq	.+2      	; 0x2d58 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa6>
    2d56:	5b c0       	rjmp	.+182    	; 0x2e0e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2d58:	0e c0       	rjmp	.+28     	; 0x2d76 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    2d5a:	01 30       	cpi	r16, 0x01	; 1
    2d5c:	11 05       	cpc	r17, r1
    2d5e:	19 f4       	brne	.+6      	; 0x2d66 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xb4>
    2d60:	8c 91       	ld	r24, X
    2d62:	e8 2b       	or	r30, r24
    2d64:	0a c0       	rjmp	.+20     	; 0x2d7a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    2d66:	01 30       	cpi	r16, 0x01	; 1
    2d68:	11 05       	cpc	r17, r1
    2d6a:	08 f0       	brcs	.+2      	; 0x2d6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    2d6c:	49 c0       	rjmp	.+146    	; 0x2e00 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14e>
    2d6e:	e0 95       	com	r30
    2d70:	8c 91       	ld	r24, X
    2d72:	e8 23       	and	r30, r24
    2d74:	02 c0       	rjmp	.+4      	; 0x2d7a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    2d76:	8c 91       	ld	r24, X
    2d78:	e8 27       	eor	r30, r24
    2d7a:	ec 93       	st	X, r30
    2d7c:	94 17       	cp	r25, r20
    2d7e:	08 f4       	brcc	.+2      	; 0x2d82 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd0>
    2d80:	46 c0       	rjmp	.+140    	; 0x2e0e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2d82:	2c 81       	ldd	r18, Y+4	; 0x04
    2d84:	3d 81       	ldd	r19, Y+5	; 0x05
    2d86:	a2 0f       	add	r26, r18
    2d88:	b3 1f       	adc	r27, r19
    2d8a:	e9 2f       	mov	r30, r25
    2d8c:	e4 1b       	sub	r30, r20
    2d8e:	e8 30       	cpi	r30, 0x08	; 8
    2d90:	f8 f0       	brcs	.+62     	; 0x2dd0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11e>
    2d92:	02 30       	cpi	r16, 0x02	; 2
    2d94:	11 05       	cpc	r17, r1
    2d96:	61 f4       	brne	.+24     	; 0x2db0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xfe>
    2d98:	8e 2f       	mov	r24, r30
    2d9a:	9c 91       	ld	r25, X
    2d9c:	90 95       	com	r25
    2d9e:	9c 93       	st	X, r25
    2da0:	2c 81       	ldd	r18, Y+4	; 0x04
    2da2:	3d 81       	ldd	r19, Y+5	; 0x05
    2da4:	a2 0f       	add	r26, r18
    2da6:	b3 1f       	adc	r27, r19
    2da8:	88 50       	subi	r24, 0x08	; 8
    2daa:	88 30       	cpi	r24, 0x08	; 8
    2dac:	b0 f7       	brcc	.-20     	; 0x2d9a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xe8>
    2dae:	0f c0       	rjmp	.+30     	; 0x2dce <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11c>
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	01 15       	cp	r16, r1
    2db4:	11 05       	cpc	r17, r1
    2db6:	09 f4       	brne	.+2      	; 0x2dba <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x108>
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	81 95       	neg	r24
    2dbc:	9e 2f       	mov	r25, r30
    2dbe:	8c 93       	st	X, r24
    2dc0:	2c 81       	ldd	r18, Y+4	; 0x04
    2dc2:	3d 81       	ldd	r19, Y+5	; 0x05
    2dc4:	a2 0f       	add	r26, r18
    2dc6:	b3 1f       	adc	r27, r19
    2dc8:	98 50       	subi	r25, 0x08	; 8
    2dca:	98 30       	cpi	r25, 0x08	; 8
    2dcc:	c0 f7       	brcc	.-16     	; 0x2dbe <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x10c>
    2dce:	e7 70       	andi	r30, 0x07	; 7
    2dd0:	ee 23       	and	r30, r30
    2dd2:	e9 f0       	breq	.+58     	; 0x2e0e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	e4 59       	subi	r30, 0x94	; 148
    2dd8:	f9 4f       	sbci	r31, 0xF9	; 249
    2dda:	e4 91       	lpm	r30, Z
    2ddc:	01 30       	cpi	r16, 0x01	; 1
    2dde:	11 05       	cpc	r17, r1
    2de0:	39 f0       	breq	.+14     	; 0x2df0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x13e>
    2de2:	48 f0       	brcs	.+18     	; 0x2df6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x144>
    2de4:	02 30       	cpi	r16, 0x02	; 2
    2de6:	11 05       	cpc	r17, r1
    2de8:	91 f4       	brne	.+36     	; 0x2e0e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2dea:	8c 91       	ld	r24, X
    2dec:	e8 27       	eor	r30, r24
    2dee:	06 c0       	rjmp	.+12     	; 0x2dfc <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    2df0:	8c 91       	ld	r24, X
    2df2:	e8 2b       	or	r30, r24
    2df4:	03 c0       	rjmp	.+6      	; 0x2dfc <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    2df6:	e0 95       	com	r30
    2df8:	8c 91       	ld	r24, X
    2dfa:	e8 23       	and	r30, r24
    2dfc:	ec 93       	st	X, r30
    2dfe:	07 c0       	rjmp	.+14     	; 0x2e0e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2e00:	02 30       	cpi	r16, 0x02	; 2
    2e02:	11 05       	cpc	r17, r1
    2e04:	09 f4       	brne	.+2      	; 0x2e08 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x156>
    2e06:	b7 cf       	rjmp	.-146    	; 0x2d76 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    2e08:	ae 0d       	add	r26, r14
    2e0a:	bf 1d       	adc	r27, r15
    2e0c:	be cf       	rjmp	.-132    	; 0x2d8a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	1f 91       	pop	r17
    2e14:	0f 91       	pop	r16
    2e16:	ff 90       	pop	r15
    2e18:	ef 90       	pop	r14
    2e1a:	08 95       	ret

00002e1c <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    2e1c:	0f 93       	push	r16
    2e1e:	1f 93       	push	r17
    2e20:	dc 01       	movw	r26, r24
    2e22:	56 96       	adiw	r26, 0x16	; 22
    2e24:	ec 91       	ld	r30, X
    2e26:	56 97       	sbiw	r26, 0x16	; 22
    2e28:	e2 30       	cpi	r30, 0x02	; 2
    2e2a:	61 f0       	breq	.+24     	; 0x2e44 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28>
    2e2c:	e3 30       	cpi	r30, 0x03	; 3
    2e2e:	09 f1       	breq	.+66     	; 0x2e72 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x56>
    2e30:	e1 30       	cpi	r30, 0x01	; 1
    2e32:	79 f5       	brne	.+94     	; 0x2e92 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x76>
    2e34:	14 96       	adiw	r26, 0x04	; 4
    2e36:	ed 91       	ld	r30, X+
    2e38:	fc 91       	ld	r31, X
    2e3a:	15 97       	sbiw	r26, 0x05	; 5
    2e3c:	e4 1b       	sub	r30, r20
    2e3e:	f5 0b       	sbc	r31, r21
    2e40:	31 97       	sbiw	r30, 0x01	; 1
    2e42:	23 c0       	rjmp	.+70     	; 0x2e8a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x6e>
    2e44:	dc 01       	movw	r26, r24
    2e46:	14 96       	adiw	r26, 0x04	; 4
    2e48:	ed 91       	ld	r30, X+
    2e4a:	fc 91       	ld	r31, X
    2e4c:	15 97       	sbiw	r26, 0x05	; 5
    2e4e:	df 01       	movw	r26, r30
    2e50:	a6 1b       	sub	r26, r22
    2e52:	b7 0b       	sbc	r27, r23
    2e54:	bd 01       	movw	r22, r26
    2e56:	dc 01       	movw	r26, r24
    2e58:	16 96       	adiw	r26, 0x06	; 6
    2e5a:	ed 91       	ld	r30, X+
    2e5c:	fc 91       	ld	r31, X
    2e5e:	17 97       	sbiw	r26, 0x07	; 7
    2e60:	df 01       	movw	r26, r30
    2e62:	a4 1b       	sub	r26, r20
    2e64:	b5 0b       	sbc	r27, r21
    2e66:	ad 01       	movw	r20, r26
    2e68:	41 50       	subi	r20, 0x01	; 1
    2e6a:	51 09       	sbc	r21, r1
    2e6c:	62 1b       	sub	r22, r18
    2e6e:	73 0b       	sbc	r23, r19
    2e70:	10 c0       	rjmp	.+32     	; 0x2e92 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x76>
    2e72:	fa 01       	movw	r30, r20
    2e74:	dc 01       	movw	r26, r24
    2e76:	16 96       	adiw	r26, 0x06	; 6
    2e78:	4d 91       	ld	r20, X+
    2e7a:	5c 91       	ld	r21, X
    2e7c:	17 97       	sbiw	r26, 0x07	; 7
    2e7e:	da 01       	movw	r26, r20
    2e80:	a6 1b       	sub	r26, r22
    2e82:	b7 0b       	sbc	r27, r23
    2e84:	bd 01       	movw	r22, r26
    2e86:	62 1b       	sub	r22, r18
    2e88:	73 0b       	sbc	r23, r19
    2e8a:	ab 01       	movw	r20, r22
    2e8c:	bf 01       	movw	r22, r30
    2e8e:	11 df       	rcall	.-478    	; 0x2cb2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    2e90:	01 c0       	rjmp	.+2      	; 0x2e94 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    2e92:	9f de       	rcall	.-706    	; 0x2bd2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    2e94:	1f 91       	pop	r17
    2e96:	0f 91       	pop	r16
    2e98:	08 95       	ret

00002e9a <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    2e9a:	0f 93       	push	r16
    2e9c:	1f 93       	push	r17
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	56 96       	adiw	r26, 0x16	; 22
    2ea2:	ec 91       	ld	r30, X
    2ea4:	56 97       	sbiw	r26, 0x16	; 22
    2ea6:	e2 30       	cpi	r30, 0x02	; 2
    2ea8:	69 f0       	breq	.+26     	; 0x2ec4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a>
    2eaa:	e3 30       	cpi	r30, 0x03	; 3
    2eac:	11 f1       	breq	.+68     	; 0x2ef2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x58>
    2eae:	e1 30       	cpi	r30, 0x01	; 1
    2eb0:	81 f5       	brne	.+96     	; 0x2f12 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x78>
    2eb2:	14 96       	adiw	r26, 0x04	; 4
    2eb4:	ed 91       	ld	r30, X+
    2eb6:	fc 91       	ld	r31, X
    2eb8:	15 97       	sbiw	r26, 0x05	; 5
    2eba:	e4 1b       	sub	r30, r20
    2ebc:	f5 0b       	sbc	r31, r21
    2ebe:	e2 1b       	sub	r30, r18
    2ec0:	f3 0b       	sbc	r31, r19
    2ec2:	23 c0       	rjmp	.+70     	; 0x2f0a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x70>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	14 96       	adiw	r26, 0x04	; 4
    2ec8:	ed 91       	ld	r30, X+
    2eca:	fc 91       	ld	r31, X
    2ecc:	15 97       	sbiw	r26, 0x05	; 5
    2ece:	df 01       	movw	r26, r30
    2ed0:	a6 1b       	sub	r26, r22
    2ed2:	b7 0b       	sbc	r27, r23
    2ed4:	bd 01       	movw	r22, r26
    2ed6:	61 50       	subi	r22, 0x01	; 1
    2ed8:	71 09       	sbc	r23, r1
    2eda:	dc 01       	movw	r26, r24
    2edc:	16 96       	adiw	r26, 0x06	; 6
    2ede:	ed 91       	ld	r30, X+
    2ee0:	fc 91       	ld	r31, X
    2ee2:	17 97       	sbiw	r26, 0x07	; 7
    2ee4:	df 01       	movw	r26, r30
    2ee6:	a4 1b       	sub	r26, r20
    2ee8:	b5 0b       	sbc	r27, r21
    2eea:	ad 01       	movw	r20, r26
    2eec:	42 1b       	sub	r20, r18
    2eee:	53 0b       	sbc	r21, r19
    2ef0:	10 c0       	rjmp	.+32     	; 0x2f12 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x78>
    2ef2:	fa 01       	movw	r30, r20
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	16 96       	adiw	r26, 0x06	; 6
    2ef8:	4d 91       	ld	r20, X+
    2efa:	5c 91       	ld	r21, X
    2efc:	17 97       	sbiw	r26, 0x07	; 7
    2efe:	da 01       	movw	r26, r20
    2f00:	a6 1b       	sub	r26, r22
    2f02:	b7 0b       	sbc	r27, r23
    2f04:	bd 01       	movw	r22, r26
    2f06:	61 50       	subi	r22, 0x01	; 1
    2f08:	71 09       	sbc	r23, r1
    2f0a:	ab 01       	movw	r20, r22
    2f0c:	bf 01       	movw	r22, r30
    2f0e:	61 de       	rcall	.-830    	; 0x2bd2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    2f10:	01 c0       	rjmp	.+2      	; 0x2f14 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    2f12:	cf de       	rcall	.-610    	; 0x2cb2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    2f14:	1f 91       	pop	r17
    2f16:	0f 91       	pop	r16
    2f18:	08 95       	ret

00002f1a <_ZN16Adafruit_SSD13067displayEv>:
    @return None (void).
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
    2f1a:	cf 92       	push	r12
    2f1c:	df 92       	push	r13
    2f1e:	ef 92       	push	r14
    2f20:	ff 92       	push	r15
    2f22:	0f 93       	push	r16
    2f24:	1f 93       	push	r17
    2f26:	cf 93       	push	r28
    2f28:	df 93       	push	r29
    2f2a:	ec 01       	movw	r28, r24
  TRANSACTION_START
    2f2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f30:	00 97       	sbiw	r24, 0x00	; 0
    2f32:	39 f0       	breq	.+14     	; 0x2f42 <_ZN16Adafruit_SSD13067displayEv+0x28>
    2f34:	4d a9       	ldd	r20, Y+53	; 0x35
    2f36:	5e a9       	ldd	r21, Y+54	; 0x36
    2f38:	6f a9       	ldd	r22, Y+55	; 0x37
    2f3a:	78 ad       	ldd	r23, Y+56	; 0x38
    2f3c:	0e 94 16 2b 	call	0x562c	; 0x562c <_ZN7TwoWire8setClockEm>
    2f40:	0f c0       	rjmp	.+30     	; 0x2f60 <_ZN16Adafruit_SSD13067displayEv+0x46>
    2f42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f46:	89 2b       	or	r24, r25
    2f48:	21 f0       	breq	.+8      	; 0x2f52 <_ZN16Adafruit_SSD13067displayEv+0x38>
    2f4a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f4e:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2f52:	ef a5       	ldd	r30, Y+47	; 0x2f
    2f54:	f8 a9       	ldd	r31, Y+48	; 0x30
    2f56:	90 81       	ld	r25, Z
    2f58:	8c a9       	ldd	r24, Y+52	; 0x34
    2f5a:	80 95       	com	r24
    2f5c:	89 23       	and	r24, r25
    2f5e:	80 83       	st	Z, r24
  static const uint8_t PROGMEM dlist1[] = {
      SSD1306_PAGEADDR,
      0,                      // Page start address
      0xFF,                   // Page end (not really, but works here)
      SSD1306_COLUMNADDR, 0}; // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
    2f60:	45 e0       	ldi	r20, 0x05	; 5
    2f62:	67 e6       	ldi	r22, 0x67	; 103
    2f64:	76 e0       	ldi	r23, 0x06	; 6
    2f66:	ce 01       	movw	r24, r28
    2f68:	ac db       	rcall	.-2216   	; 0x26c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
    2f6a:	6c 81       	ldd	r22, Y+4	; 0x04
    2f6c:	61 50       	subi	r22, 0x01	; 1
    2f6e:	ce 01       	movw	r24, r28
    2f70:	02 db       	rcall	.-2556   	; 0x2576 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    2f72:	2e 81       	ldd	r18, Y+6	; 0x06
    2f74:	3f 81       	ldd	r19, Y+7	; 0x07
    2f76:	c9 01       	movw	r24, r18
    2f78:	07 96       	adiw	r24, 0x07	; 7
    2f7a:	97 fd       	sbrc	r25, 7
    2f7c:	07 96       	adiw	r24, 0x07	; 7
    2f7e:	23 e0       	ldi	r18, 0x03	; 3
    2f80:	95 95       	asr	r25
    2f82:	87 95       	ror	r24
    2f84:	2a 95       	dec	r18
    2f86:	e1 f7       	brne	.-8      	; 0x2f80 <_ZN16Adafruit_SSD13067displayEv+0x66>
    2f88:	2c 81       	ldd	r18, Y+4	; 0x04
    2f8a:	3d 81       	ldd	r19, Y+5	; 0x05
    2f8c:	82 9f       	mul	r24, r18
    2f8e:	70 01       	movw	r14, r0
    2f90:	83 9f       	mul	r24, r19
    2f92:	f0 0c       	add	r15, r0
    2f94:	92 9f       	mul	r25, r18
    2f96:	f0 0c       	add	r15, r0
    2f98:	11 24       	eor	r1, r1
  uint8_t *ptr = buffer;
    2f9a:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2f9c:	18 a1       	ldd	r17, Y+32	; 0x20
  if (wire) { // I2C
    2f9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fa0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fa2:	e0 0e       	add	r14, r16
    2fa4:	f1 1e       	adc	r15, r17
    2fa6:	00 97       	sbiw	r24, 0x00	; 0
    2fa8:	09 f4       	brne	.+2      	; 0x2fac <_ZN16Adafruit_SSD13067displayEv+0x92>
    2faa:	43 c0       	rjmp	.+134    	; 0x3032 <_ZN16Adafruit_SSD13067displayEv+0x118>
    wire->beginTransmission(i2caddr);
    2fac:	69 a1       	ldd	r22, Y+33	; 0x21
    2fae:	06 2e       	mov	r0, r22
    2fb0:	00 0c       	add	r0, r0
    2fb2:	77 0b       	sbc	r23, r23
    2fb4:	0e 94 23 2b 	call	0x5646	; 0x5646 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
    2fb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	ed 91       	ld	r30, X+
    2fc0:	fc 91       	ld	r31, X
    2fc2:	01 90       	ld	r0, Z+
    2fc4:	f0 81       	ld	r31, Z
    2fc6:	e0 2d       	mov	r30, r0
    2fc8:	60 e4       	ldi	r22, 0x40	; 64
    2fca:	19 95       	eicall
    2fcc:	68 01       	movw	r12, r16
    uint16_t bytesOut = 1;
    2fce:	01 e0       	ldi	r16, 0x01	; 1
    2fd0:	10 e0       	ldi	r17, 0x00	; 0
    2fd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fd4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    while (count--) {
    2fd6:	ec 14       	cp	r14, r12
    2fd8:	fd 04       	cpc	r15, r13
    2fda:	41 f1       	breq	.+80     	; 0x302c <_ZN16Adafruit_SSD13067displayEv+0x112>
      if (bytesOut >= WIRE_MAX) {
    2fdc:	00 32       	cpi	r16, 0x20	; 32
    2fde:	11 05       	cpc	r17, r1
    2fe0:	b0 f0       	brcs	.+44     	; 0x300e <_ZN16Adafruit_SSD13067displayEv+0xf4>
        wire->endTransmission();
    2fe2:	0e 94 36 2b 	call	0x566c	; 0x566c <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
    2fe6:	69 a1       	ldd	r22, Y+33	; 0x21
    2fe8:	06 2e       	mov	r0, r22
    2fea:	00 0c       	add	r0, r0
    2fec:	77 0b       	sbc	r23, r23
    2fee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ff0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ff2:	0e 94 23 2b 	call	0x5646	; 0x5646 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
    2ff6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ff8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	ed 91       	ld	r30, X+
    2ffe:	fc 91       	ld	r31, X
    3000:	01 90       	ld	r0, Z+
    3002:	f0 81       	ld	r31, Z
    3004:	e0 2d       	mov	r30, r0
    3006:	60 e4       	ldi	r22, 0x40	; 64
    3008:	19 95       	eicall
        bytesOut = 1;
    300a:	01 e0       	ldi	r16, 0x01	; 1
    300c:	10 e0       	ldi	r17, 0x00	; 0
      }
      WIRE_WRITE(*ptr++);
    300e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3010:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3012:	f6 01       	movw	r30, r12
    3014:	61 91       	ld	r22, Z+
    3016:	6f 01       	movw	r12, r30
    3018:	dc 01       	movw	r26, r24
    301a:	ed 91       	ld	r30, X+
    301c:	fc 91       	ld	r31, X
    301e:	01 90       	ld	r0, Z+
    3020:	f0 81       	ld	r31, Z
    3022:	e0 2d       	mov	r30, r0
    3024:	19 95       	eicall
      bytesOut++;
    3026:	0f 5f       	subi	r16, 0xFF	; 255
    3028:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t *ptr = buffer;
  if (wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    uint16_t bytesOut = 1;
    while (count--) {
    302a:	d3 cf       	rjmp	.-90     	; 0x2fd2 <_ZN16Adafruit_SSD13067displayEv+0xb8>
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
    302c:	0e 94 36 2b 	call	0x566c	; 0x566c <_ZN7TwoWire15endTransmissionEv>
    3030:	34 c0       	rjmp	.+104    	; 0x309a <_ZN16Adafruit_SSD13067displayEv+0x180>
  } else { // SPI
    SSD1306_MODE_DATA
    3032:	ed a5       	ldd	r30, Y+45	; 0x2d
    3034:	fe a5       	ldd	r31, Y+46	; 0x2e
    3036:	90 81       	ld	r25, Z
    3038:	8b a9       	ldd	r24, Y+51	; 0x33
    303a:	89 2b       	or	r24, r25
    303c:	80 83       	st	Z, r24
    while (count--)
    303e:	0e 15       	cp	r16, r14
    3040:	1f 05       	cpc	r17, r15
    3042:	59 f1       	breq	.+86     	; 0x309a <_ZN16Adafruit_SSD13067displayEv+0x180>
      SPIwrite(*ptr++);
    3044:	f8 01       	movw	r30, r16
    3046:	81 91       	ld	r24, Z+
    3048:	8f 01       	movw	r16, r30
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    304a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    304c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    304e:	23 2b       	or	r18, r19
    (void)spi->transfer(d);
    3050:	11 f0       	breq	.+4      	; 0x3056 <_ZN16Adafruit_SSD13067displayEv+0x13c>
    3052:	34 da       	rcall	.-2968   	; 0x24bc <_ZN8SPIClass8transferEh>
    3054:	f4 cf       	rjmp	.-24     	; 0x303e <_ZN16Adafruit_SSD13067displayEv+0x124>
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    3056:	28 e0       	ldi	r18, 0x08	; 8
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	40 e8       	ldi	r20, 0x80	; 128
    305c:	e9 a5       	ldd	r30, Y+41	; 0x29
    305e:	fa a5       	ldd	r31, Y+42	; 0x2a
    3060:	99 a9       	ldd	r25, Y+49	; 0x31
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
#ifdef HAVE_PORTREG
      if (d & bit)
    3062:	58 2f       	mov	r21, r24
    3064:	54 23       	and	r21, r20
    3066:	19 f0       	breq	.+6      	; 0x306e <_ZN16Adafruit_SSD13067displayEv+0x154>
        *mosiPort |= mosiPinMask;
    3068:	50 81       	ld	r21, Z
    306a:	95 2b       	or	r25, r21
    306c:	03 c0       	rjmp	.+6      	; 0x3074 <_ZN16Adafruit_SSD13067displayEv+0x15a>
      else
        *mosiPort &= ~mosiPinMask;
    306e:	50 81       	ld	r21, Z
    3070:	90 95       	com	r25
    3072:	95 23       	and	r25, r21
    3074:	90 83       	st	Z, r25
      *clkPort |= clkPinMask;  // Clock high
    3076:	eb a5       	ldd	r30, Y+43	; 0x2b
    3078:	fc a5       	ldd	r31, Y+44	; 0x2c
    307a:	50 81       	ld	r21, Z
    307c:	9a a9       	ldd	r25, Y+50	; 0x32
    307e:	95 2b       	or	r25, r21
    3080:	90 83       	st	Z, r25
      *clkPort &= ~clkPinMask; // Clock low
    3082:	eb a5       	ldd	r30, Y+43	; 0x2b
    3084:	fc a5       	ldd	r31, Y+44	; 0x2c
    3086:	50 81       	ld	r21, Z
    3088:	9a a9       	ldd	r25, Y+50	; 0x32
    308a:	90 95       	com	r25
    308c:	95 23       	and	r25, r21
    308e:	90 83       	st	Z, r25
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    3090:	46 95       	lsr	r20
    3092:	21 50       	subi	r18, 0x01	; 1
    3094:	31 09       	sbc	r19, r1
    3096:	11 f7       	brne	.-60     	; 0x305c <_ZN16Adafruit_SSD13067displayEv+0x142>
    3098:	d2 cf       	rjmp	.-92     	; 0x303e <_ZN16Adafruit_SSD13067displayEv+0x124>
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    309a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    309c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    309e:	00 97       	sbiw	r24, 0x00	; 0
    30a0:	71 f0       	breq	.+28     	; 0x30be <_ZN16Adafruit_SSD13067displayEv+0x1a4>
    30a2:	49 ad       	ldd	r20, Y+57	; 0x39
    30a4:	5a ad       	ldd	r21, Y+58	; 0x3a
    30a6:	6b ad       	ldd	r22, Y+59	; 0x3b
    30a8:	7c ad       	ldd	r23, Y+60	; 0x3c
#if defined(ESP8266)
  yield();
#endif
}
    30aa:	df 91       	pop	r29
    30ac:	cf 91       	pop	r28
    30ae:	1f 91       	pop	r17
    30b0:	0f 91       	pop	r16
    30b2:	ff 90       	pop	r15
    30b4:	ef 90       	pop	r14
    30b6:	df 90       	pop	r13
    30b8:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    30ba:	0c 94 16 2b 	jmp	0x562c	; 0x562c <_ZN7TwoWire8setClockEm>
    30be:	ef a5       	ldd	r30, Y+47	; 0x2f
    30c0:	f8 a9       	ldd	r31, Y+48	; 0x30
    30c2:	90 81       	ld	r25, Z
    30c4:	8c a9       	ldd	r24, Y+52	; 0x34
    30c6:	89 2b       	or	r24, r25
    30c8:	80 83       	st	Z, r24
    30ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30ce:	89 2b       	or	r24, r25
    30d0:	51 f0       	breq	.+20     	; 0x30e6 <_ZN16Adafruit_SSD13067displayEv+0x1cc>
#if defined(ESP8266)
  yield();
#endif
}
    30d2:	df 91       	pop	r29
    30d4:	cf 91       	pop	r28
    30d6:	1f 91       	pop	r17
    30d8:	0f 91       	pop	r16
    30da:	ff 90       	pop	r15
    30dc:	ef 90       	pop	r14
    30de:	df 90       	pop	r13
    30e0:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    30e2:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <_ZN8SPIClass14endTransactionEv>
#if defined(ESP8266)
  yield();
#endif
}
    30e6:	df 91       	pop	r29
    30e8:	cf 91       	pop	r28
    30ea:	1f 91       	pop	r17
    30ec:	0f 91       	pop	r16
    30ee:	ff 90       	pop	r15
    30f0:	ef 90       	pop	r14
    30f2:	df 90       	pop	r13
    30f4:	cf 90       	pop	r12
    30f6:	08 95       	ret

000030f8 <_ZN3DHTC1Ehhh>:
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
    30f8:	dc 01       	movw	r26, r24
    30fa:	15 96       	adiw	r26, 0x05	; 5
    30fc:	6c 93       	st	X, r22
    30fe:	15 97       	sbiw	r26, 0x05	; 5
    3100:	16 96       	adiw	r26, 0x06	; 6
    3102:	4c 93       	st	X, r20
    3104:	16 97       	sbiw	r26, 0x06	; 6
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	fb 01       	movw	r30, r22
    310a:	eb 58       	subi	r30, 0x8B	; 139
    310c:	f4 4f       	sbci	r31, 0xF4	; 244
    310e:	e4 91       	lpm	r30, Z
    3110:	17 96       	adiw	r26, 0x07	; 7
    3112:	ec 93       	st	X, r30
    3114:	17 97       	sbiw	r26, 0x07	; 7
    3116:	fb 01       	movw	r30, r22
    3118:	e5 54       	subi	r30, 0x45	; 69
    311a:	f4 4f       	sbci	r31, 0xF4	; 244
    311c:	64 91       	lpm	r22, Z
    311e:	18 96       	adiw	r26, 0x08	; 8
    3120:	6c 93       	st	X, r22
    3122:	18 97       	sbiw	r26, 0x08	; 8
    3124:	40 e8       	ldi	r20, 0x80	; 128
    3126:	5e e3       	ldi	r21, 0x3E	; 62
    3128:	60 e0       	ldi	r22, 0x00	; 0
    312a:	70 e0       	ldi	r23, 0x00	; 0
    312c:	1d 96       	adiw	r26, 0x0d	; 13
    312e:	4d 93       	st	X+, r20
    3130:	5d 93       	st	X+, r21
    3132:	6d 93       	st	X+, r22
    3134:	7c 93       	st	X, r23
    3136:	50 97       	sbiw	r26, 0x10	; 16
    3138:	08 95       	ret

0000313a <_ZN3DHT5beginEh>:
    313a:	1f 93       	push	r17
    313c:	cf 93       	push	r28
    313e:	df 93       	push	r29
    3140:	ec 01       	movw	r28, r24
    3142:	16 2f       	mov	r17, r22
    3144:	62 e0       	ldi	r22, 0x02	; 2
    3146:	8d 81       	ldd	r24, Y+5	; 0x05
    3148:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
    314c:	0e 94 49 35 	call	0x6a92	; 0x6a92 <millis>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	80 5d       	subi	r24, 0xD0	; 208
    3156:	97 40       	sbci	r25, 0x07	; 7
    3158:	a1 09       	sbc	r26, r1
    315a:	b1 09       	sbc	r27, r1
    315c:	89 87       	std	Y+9, r24	; 0x09
    315e:	9a 87       	std	Y+10, r25	; 0x0a
    3160:	ab 87       	std	Y+11, r26	; 0x0b
    3162:	bc 87       	std	Y+12, r27	; 0x0c
    3164:	1a 8b       	std	Y+18, r17	; 0x12
    3166:	df 91       	pop	r29
    3168:	cf 91       	pop	r28
    316a:	1f 91       	pop	r17
    316c:	08 95       	ret

0000316e <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    316e:	cf 92       	push	r12
    3170:	df 92       	push	r13
    3172:	ef 92       	push	r14
    3174:	ff 92       	push	r15
    3176:	1f 93       	push	r17
    3178:	cf 93       	push	r28
    317a:	df 93       	push	r29
    317c:	ec 01       	movw	r28, r24
    317e:	1f 81       	ldd	r17, Y+7	; 0x07
  uint16_t count = 0; // To work fast enough on slower AVR boards
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
    3180:	66 23       	and	r22, r22
    3182:	11 f0       	breq	.+4      	; 0x3188 <_ZN3DHT11expectPulseEb+0x1a>
    3184:	91 2f       	mov	r25, r17
    3186:	01 c0       	rjmp	.+2      	; 0x318a <_ZN3DHT11expectPulseEb+0x1c>
    3188:	90 e0       	ldi	r25, 0x00	; 0
  while ((*portInputRegister(_port) & _bit) == portState) {
    318a:	28 85       	ldd	r18, Y+8	; 0x08
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	22 0f       	add	r18, r18
    3190:	33 1f       	adc	r19, r19
    3192:	2f 5f       	subi	r18, 0xFF	; 255
    3194:	33 4f       	sbci	r19, 0xF3	; 243
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
    3196:	a0 e0       	ldi	r26, 0x00	; 0
    3198:	b0 e0       	ldi	r27, 0x00	; 0
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
  while ((*portInputRegister(_port) & _bit) == portState) {
    319a:	f9 01       	movw	r30, r18
    319c:	45 91       	lpm	r20, Z+
    319e:	54 91       	lpm	r21, Z
    31a0:	fa 01       	movw	r30, r20
    31a2:	80 81       	ld	r24, Z
    31a4:	81 23       	and	r24, r17
    31a6:	ad 01       	movw	r20, r26
    31a8:	60 e0       	ldi	r22, 0x00	; 0
    31aa:	70 e0       	ldi	r23, 0x00	; 0
    31ac:	98 13       	cpse	r25, r24
    31ae:	0f c0       	rjmp	.+30     	; 0x31ce <_ZN3DHT11expectPulseEb+0x60>
    if (count++ >= _maxcycles) {
    31b0:	11 96       	adiw	r26, 0x01	; 1
    31b2:	cd 84       	ldd	r12, Y+13	; 0x0d
    31b4:	de 84       	ldd	r13, Y+14	; 0x0e
    31b6:	ef 84       	ldd	r14, Y+15	; 0x0f
    31b8:	f8 88       	ldd	r15, Y+16	; 0x10
    31ba:	4c 15       	cp	r20, r12
    31bc:	5d 05       	cpc	r21, r13
    31be:	6e 05       	cpc	r22, r14
    31c0:	7f 05       	cpc	r23, r15
    31c2:	58 f3       	brcs	.-42     	; 0x319a <_ZN3DHT11expectPulseEb+0x2c>
      return TIMEOUT; // Exceeded timeout, fail.
    31c4:	3f ef       	ldi	r19, 0xFF	; 255
    31c6:	2f ef       	ldi	r18, 0xFF	; 255
    31c8:	8f ef       	ldi	r24, 0xFF	; 255
    31ca:	9f ef       	ldi	r25, 0xFF	; 255
    31cc:	03 c0       	rjmp	.+6      	; 0x31d4 <_ZN3DHT11expectPulseEb+0x66>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
    31ce:	3a 2f       	mov	r19, r26
    31d0:	25 2f       	mov	r18, r21
    31d2:	cb 01       	movw	r24, r22
}
    31d4:	63 2f       	mov	r22, r19
    31d6:	72 2f       	mov	r23, r18
    31d8:	df 91       	pop	r29
    31da:	cf 91       	pop	r28
    31dc:	1f 91       	pop	r17
    31de:	ff 90       	pop	r15
    31e0:	ef 90       	pop	r14
    31e2:	df 90       	pop	r13
    31e4:	cf 90       	pop	r12
    31e6:	08 95       	ret

000031e8 <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
    31e8:	8f 92       	push	r8
    31ea:	9f 92       	push	r9
    31ec:	af 92       	push	r10
    31ee:	bf 92       	push	r11
    31f0:	cf 92       	push	r12
    31f2:	df 92       	push	r13
    31f4:	ef 92       	push	r14
    31f6:	ff 92       	push	r15
    31f8:	0f 93       	push	r16
    31fa:	1f 93       	push	r17
    31fc:	cf 93       	push	r28
    31fe:	df 93       	push	r29
    3200:	cd b7       	in	r28, 0x3d	; 61
    3202:	de b7       	in	r29, 0x3e	; 62
    3204:	c0 54       	subi	r28, 0x40	; 64
    3206:	d1 40       	sbci	r29, 0x01	; 1
    3208:	0f b6       	in	r0, 0x3f	; 63
    320a:	f8 94       	cli
    320c:	de bf       	out	0x3e, r29	; 62
    320e:	0f be       	out	0x3f, r0	; 63
    3210:	cd bf       	out	0x3d, r28	; 61
    3212:	8c 01       	movw	r16, r24
    3214:	f6 2e       	mov	r15, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
    3216:	0e 94 49 35 	call	0x6a92	; 0x6a92 <millis>
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    321a:	f1 10       	cpse	r15, r1
    321c:	16 c0       	rjmp	.+44     	; 0x324a <_ZN3DHT4readEb+0x62>
    321e:	f8 01       	movw	r30, r16
    3220:	c1 84       	ldd	r12, Z+9	; 0x09
    3222:	d2 84       	ldd	r13, Z+10	; 0x0a
    3224:	e3 84       	ldd	r14, Z+11	; 0x0b
    3226:	f4 84       	ldd	r15, Z+12	; 0x0c
    3228:	9b 01       	movw	r18, r22
    322a:	ac 01       	movw	r20, r24
    322c:	2c 19       	sub	r18, r12
    322e:	3d 09       	sbc	r19, r13
    3230:	4e 09       	sbc	r20, r14
    3232:	5f 09       	sbc	r21, r15
    3234:	69 01       	movw	r12, r18
    3236:	7a 01       	movw	r14, r20
    3238:	30 ed       	ldi	r19, 0xD0	; 208
    323a:	c3 16       	cp	r12, r19
    323c:	37 e0       	ldi	r19, 0x07	; 7
    323e:	d3 06       	cpc	r13, r19
    3240:	e1 04       	cpc	r14, r1
    3242:	f1 04       	cpc	r15, r1
    3244:	10 f4       	brcc	.+4      	; 0x324a <_ZN3DHT4readEb+0x62>
    return _lastresult; // return last correct measurement
    3246:	81 89       	ldd	r24, Z+17	; 0x11
    3248:	b6 c0       	rjmp	.+364    	; 0x33b6 <_ZN3DHT4readEb+0x1ce>
  }
  _lastreadtime = currenttime;
    324a:	f8 01       	movw	r30, r16
    324c:	61 87       	std	Z+9, r22	; 0x09
    324e:	72 87       	std	Z+10, r23	; 0x0a
    3250:	83 87       	std	Z+11, r24	; 0x0b
    3252:	94 87       	std	Z+12, r25	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    3254:	14 82       	std	Z+4, r1	; 0x04
    3256:	13 82       	std	Z+3, r1	; 0x03
    3258:	12 82       	std	Z+2, r1	; 0x02
    325a:	11 82       	std	Z+1, r1	; 0x01
    325c:	10 82       	st	Z, r1
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
    325e:	62 e0       	ldi	r22, 0x02	; 2
    3260:	85 81       	ldd	r24, Z+5	; 0x05
    3262:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
  delay(1);
    3266:	61 e0       	ldi	r22, 0x01	; 1
    3268:	70 e0       	ldi	r23, 0x00	; 0
    326a:	80 e0       	ldi	r24, 0x00	; 0
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	0e 94 7a 35 	call	0x6af4	; 0x6af4 <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
    3272:	61 e0       	ldi	r22, 0x01	; 1
    3274:	f8 01       	movw	r30, r16
    3276:	85 81       	ldd	r24, Z+5	; 0x05
    3278:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
  digitalWrite(_pin, LOW);
    327c:	60 e0       	ldi	r22, 0x00	; 0
    327e:	f8 01       	movw	r30, r16
    3280:	85 81       	ldd	r24, Z+5	; 0x05
    3282:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
  switch (_type) {
    3286:	f8 01       	movw	r30, r16
    3288:	86 81       	ldd	r24, Z+6	; 0x06
    328a:	85 51       	subi	r24, 0x15	; 21
    328c:	82 30       	cpi	r24, 0x02	; 2
    328e:	28 f4       	brcc	.+10     	; 0x329a <_ZN3DHT4readEb+0xb2>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    3290:	8c e4       	ldi	r24, 0x4C	; 76
    3292:	94 e0       	ldi	r25, 0x04	; 4
    3294:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <delayMicroseconds>
    break;
    3298:	06 c0       	rjmp	.+12     	; 0x32a6 <_ZN3DHT4readEb+0xbe>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
    329a:	64 e1       	ldi	r22, 0x14	; 20
    329c:	70 e0       	ldi	r23, 0x00	; 0
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	0e 94 7a 35 	call	0x6af4	; 0x6af4 <delay>
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
    32a6:	62 e0       	ldi	r22, 0x02	; 2
    32a8:	f8 01       	movw	r30, r16
    32aa:	85 81       	ldd	r24, Z+5	; 0x05
    32ac:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
    32b0:	f8 01       	movw	r30, r16
    32b2:	82 89       	ldd	r24, Z+18	; 0x12
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <delayMicroseconds>
 */
class InterruptLock {
public:
  InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    noInterrupts();
    32ba:	f8 94       	cli
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
    32bc:	60 e0       	ldi	r22, 0x00	; 0
    32be:	c8 01       	movw	r24, r16
    32c0:	56 df       	rcall	.-340    	; 0x316e <_ZN3DHT11expectPulseEb>
    32c2:	6f 3f       	cpi	r22, 0xFF	; 255
    32c4:	7f 4f       	sbci	r23, 0xFF	; 255
    32c6:	8f 4f       	sbci	r24, 0xFF	; 255
    32c8:	9f 4f       	sbci	r25, 0xFF	; 255
    32ca:	21 f4       	brne	.+8      	; 0x32d4 <_ZN3DHT4readEb+0xec>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
    32cc:	f8 01       	movw	r30, r16
    32ce:	11 8a       	std	Z+17, r1	; 0x11
#endif
  }
  ~InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    interrupts();
    32d0:	78 94       	sei
    32d2:	42 c0       	rjmp	.+132    	; 0x3358 <_ZN3DHT4readEb+0x170>
      return _lastresult;
    }
    if (expectPulse(HIGH) == TIMEOUT) {
    32d4:	61 e0       	ldi	r22, 0x01	; 1
    32d6:	c8 01       	movw	r24, r16
    32d8:	4a df       	rcall	.-364    	; 0x316e <_ZN3DHT11expectPulseEb>
    32da:	6f 3f       	cpi	r22, 0xFF	; 255
    32dc:	7f 4f       	sbci	r23, 0xFF	; 255
    32de:	8f 4f       	sbci	r24, 0xFF	; 255
    32e0:	9f 4f       	sbci	r25, 0xFF	; 255
    32e2:	a1 f3       	breq	.-24     	; 0x32cc <_ZN3DHT4readEb+0xe4>
    32e4:	9e 01       	movw	r18, r28
    32e6:	2f 5f       	subi	r18, 0xFF	; 255
    32e8:	3f 4f       	sbci	r19, 0xFF	; 255
    32ea:	79 01       	movw	r14, r18
    32ec:	5e 01       	movw	r10, r28
    32ee:	3f eb       	ldi	r19, 0xBF	; 191
    32f0:	a3 1a       	sub	r10, r19
    32f2:	3e ef       	ldi	r19, 0xFE	; 254
    32f4:	b3 0a       	sbc	r11, r19
    32f6:	67 01       	movw	r12, r14
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
      cycles[i] = expectPulse(LOW);
    32f8:	60 e0       	ldi	r22, 0x00	; 0
    32fa:	c8 01       	movw	r24, r16
    32fc:	38 df       	rcall	.-400    	; 0x316e <_ZN3DHT11expectPulseEb>
    32fe:	f6 01       	movw	r30, r12
    3300:	60 83       	st	Z, r22
    3302:	71 83       	std	Z+1, r23	; 0x01
    3304:	82 83       	std	Z+2, r24	; 0x02
    3306:	93 83       	std	Z+3, r25	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
    3308:	61 e0       	ldi	r22, 0x01	; 1
    330a:	c8 01       	movw	r24, r16
    330c:	30 df       	rcall	.-416    	; 0x316e <_ZN3DHT11expectPulseEb>
    330e:	f6 01       	movw	r30, r12
    3310:	64 83       	std	Z+4, r22	; 0x04
    3312:	75 83       	std	Z+5, r23	; 0x05
    3314:	86 83       	std	Z+6, r24	; 0x06
    3316:	97 83       	std	Z+7, r25	; 0x07
    3318:	f8 e0       	ldi	r31, 0x08	; 8
    331a:	cf 0e       	add	r12, r31
    331c:	d1 1c       	adc	r13, r1
    331e:	ca 14       	cp	r12, r10
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    3320:	db 04       	cpc	r13, r11
    3322:	51 f7       	brne	.-44     	; 0x32f8 <_ZN3DHT4readEb+0x110>
    3324:	78 94       	sei
    3326:	20 e0       	ldi	r18, 0x00	; 0
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	f7 01       	movw	r30, r14
    uint32_t lowCycles = cycles[2 * i];
    332c:	80 80       	ld	r8, Z
    332e:	91 80       	ldd	r9, Z+1	; 0x01
    3330:	a2 80       	ldd	r10, Z+2	; 0x02
    3332:	b3 80       	ldd	r11, Z+3	; 0x03
    3334:	44 81       	ldd	r20, Z+4	; 0x04
    uint32_t highCycles = cycles[2 * i + 1];
    3336:	55 81       	ldd	r21, Z+5	; 0x05
    3338:	66 81       	ldd	r22, Z+6	; 0x06
    333a:	77 81       	ldd	r23, Z+7	; 0x07
    333c:	ff ef       	ldi	r31, 0xFF	; 255
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
    333e:	8f 16       	cp	r8, r31
    3340:	9f 06       	cpc	r9, r31
    3342:	af 06       	cpc	r10, r31
    3344:	bf 06       	cpc	r11, r31
    3346:	31 f0       	breq	.+12     	; 0x3354 <_ZN3DHT4readEb+0x16c>
    3348:	4f 3f       	cpi	r20, 0xFF	; 255
    334a:	8f ef       	ldi	r24, 0xFF	; 255
    334c:	58 07       	cpc	r21, r24
    334e:	68 07       	cpc	r22, r24
    3350:	78 07       	cpc	r23, r24
    3352:	21 f4       	brne	.+8      	; 0x335c <_ZN3DHT4readEb+0x174>
    3354:	f8 01       	movw	r30, r16
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
    3356:	11 8a       	std	Z+17, r1	; 0x11
    3358:	80 e0       	ldi	r24, 0x00	; 0
      return _lastresult;
    335a:	2d c0       	rjmp	.+90     	; 0x33b6 <_ZN3DHT4readEb+0x1ce>
    335c:	f9 01       	movw	r30, r18
    }
    data[i / 8] <<= 1;
    335e:	83 e0       	ldi	r24, 0x03	; 3
    3360:	f5 95       	asr	r31
    3362:	e7 95       	ror	r30
    3364:	8a 95       	dec	r24
    3366:	e1 f7       	brne	.-8      	; 0x3360 <_ZN3DHT4readEb+0x178>
    3368:	e0 0f       	add	r30, r16
    336a:	f1 1f       	adc	r31, r17
    336c:	80 81       	ld	r24, Z
    336e:	88 0f       	add	r24, r24
    3370:	84 16       	cp	r8, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
    3372:	95 06       	cpc	r9, r21
    3374:	a6 06       	cpc	r10, r22
    3376:	b7 06       	cpc	r11, r23
    3378:	08 f4       	brcc	.+2      	; 0x337c <_ZN3DHT4readEb+0x194>
    337a:	81 60       	ori	r24, 0x01	; 1
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    337c:	80 83       	st	Z, r24
    337e:	2f 5f       	subi	r18, 0xFF	; 255
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    3380:	3f 4f       	sbci	r19, 0xFF	; 255
    3382:	f8 e0       	ldi	r31, 0x08	; 8
    3384:	ef 0e       	add	r14, r31
    3386:	f1 1c       	adc	r15, r1
    3388:	28 32       	cpi	r18, 0x28	; 40
    338a:	31 05       	cpc	r19, r1
    338c:	71 f6       	brne	.-100    	; 0x332a <_ZN3DHT4readEb+0x142>
    338e:	f8 01       	movw	r30, r16
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    3390:	24 81       	ldd	r18, Z+4	; 0x04
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	40 81       	ld	r20, Z
    3396:	81 81       	ldd	r24, Z+1	; 0x01
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	84 0f       	add	r24, r20
    339c:	91 1d       	adc	r25, r1
    339e:	42 81       	ldd	r20, Z+2	; 0x02
    33a0:	84 0f       	add	r24, r20
    33a2:	91 1d       	adc	r25, r1
    33a4:	43 81       	ldd	r20, Z+3	; 0x03
    33a6:	84 0f       	add	r24, r20
    33a8:	91 1d       	adc	r25, r1
    33aa:	99 27       	eor	r25, r25
    33ac:	28 17       	cp	r18, r24
    33ae:	39 07       	cpc	r19, r25
    33b0:	89 f6       	brne	.-94     	; 0x3354 <_ZN3DHT4readEb+0x16c>
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    _lastresult = true;
    33b4:	81 8b       	std	Z+17, r24	; 0x11
    33b6:	c0 5c       	subi	r28, 0xC0	; 192
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    return _lastresult;
  }
}
    33b8:	de 4f       	sbci	r29, 0xFE	; 254
    33ba:	0f b6       	in	r0, 0x3f	; 63
    33bc:	f8 94       	cli
    33be:	de bf       	out	0x3e, r29	; 62
    33c0:	0f be       	out	0x3f, r0	; 63
    33c2:	cd bf       	out	0x3d, r28	; 61
    33c4:	df 91       	pop	r29
    33c6:	cf 91       	pop	r28
    33c8:	1f 91       	pop	r17
    33ca:	0f 91       	pop	r16
    33cc:	ff 90       	pop	r15
    33ce:	ef 90       	pop	r14
    33d0:	df 90       	pop	r13
    33d2:	cf 90       	pop	r12
    33d4:	bf 90       	pop	r11
    33d6:	af 90       	pop	r10
    33d8:	9f 90       	pop	r9
    33da:	8f 90       	pop	r8
    33dc:	08 95       	ret

000033de <_ZN3DHT15readTemperatureEbb>:
    33de:	cf 92       	push	r12
 *					- false = Celcius
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
    33e0:	df 92       	push	r13
    33e2:	ef 92       	push	r14
    33e4:	ff 92       	push	r15
    33e6:	0f 93       	push	r16
    33e8:	1f 93       	push	r17
    33ea:	cf 93       	push	r28
    33ec:	df 93       	push	r29
    33ee:	8c 01       	movw	r16, r24
    33f0:	c6 2f       	mov	r28, r22
  float f = NAN;

  if (read(force)) {
    33f2:	64 2f       	mov	r22, r20
    33f4:	f9 de       	rcall	.-526    	; 0x31e8 <_ZN3DHT4readEb>
    33f6:	88 23       	and	r24, r24
    33f8:	09 f4       	brne	.+2      	; 0x33fc <_ZN3DHT15readTemperatureEbb+0x1e>
    33fa:	78 c0       	rjmp	.+240    	; 0x34ec <_ZN3DHT15readTemperatureEbb+0x10e>
    switch (_type) {
    33fc:	f8 01       	movw	r30, r16
    33fe:	86 81       	ldd	r24, Z+6	; 0x06
    3400:	8c 30       	cpi	r24, 0x0C	; 12
    3402:	09 f4       	brne	.+2      	; 0x3406 <_ZN3DHT15readTemperatureEbb+0x28>
    3404:	45 c0       	rjmp	.+138    	; 0x3490 <_ZN3DHT15readTemperatureEbb+0xb2>
    3406:	18 f4       	brcc	.+6      	; 0x340e <_ZN3DHT15readTemperatureEbb+0x30>
    3408:	8b 30       	cpi	r24, 0x0B	; 11
    340a:	c9 f0       	breq	.+50     	; 0x343e <_ZN3DHT15readTemperatureEbb+0x60>
    340c:	6f c0       	rjmp	.+222    	; 0x34ec <_ZN3DHT15readTemperatureEbb+0x10e>
    340e:	85 51       	subi	r24, 0x15	; 21
    3410:	82 30       	cpi	r24, 0x02	; 2
    3412:	08 f0       	brcs	.+2      	; 0x3416 <_ZN3DHT15readTemperatureEbb+0x38>
    3414:	6b c0       	rjmp	.+214    	; 0x34ec <_ZN3DHT15readTemperatureEbb+0x10e>
        f = convertCtoF(f);
      }
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
    3416:	f8 01       	movw	r30, r16
    3418:	d2 81       	ldd	r29, Z+2	; 0x02
      f *= 0.1;
    341a:	6d 2f       	mov	r22, r29
    341c:	6f 77       	andi	r22, 0x7F	; 127
    341e:	70 e0       	ldi	r23, 0x00	; 0
    3420:	76 2f       	mov	r23, r22
    3422:	66 27       	eor	r22, r22
    3424:	83 81       	ldd	r24, Z+3	; 0x03
    3426:	68 2b       	or	r22, r24
    3428:	80 e0       	ldi	r24, 0x00	; 0
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <__floatunsisf>
    3430:	2d ec       	ldi	r18, 0xCD	; 205
    3432:	3c ec       	ldi	r19, 0xCC	; 204
    3434:	4c ec       	ldi	r20, 0xCC	; 204
    3436:	5d e3       	ldi	r21, 0x3D	; 61
    3438:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__mulsf3>
    343c:	46 c0       	rjmp	.+140    	; 0x34ca <_ZN3DHT15readTemperatureEbb+0xec>
  float f = NAN;

  if (read(force)) {
    switch (_type) {
    case DHT11:
      f = data[2];
    343e:	f8 01       	movw	r30, r16
    3440:	62 81       	ldd	r22, Z+2	; 0x02
    3442:	70 e0       	ldi	r23, 0x00	; 0
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <__floatunsisf>
    344c:	6b 01       	movw	r12, r22
    344e:	7c 01       	movw	r14, r24
      if (data[3] & 0x80) {
    3450:	f8 01       	movw	r30, r16
    3452:	d3 81       	ldd	r29, Z+3	; 0x03
    3454:	d7 ff       	sbrs	r29, 7
    3456:	0a c0       	rjmp	.+20     	; 0x346c <_ZN3DHT15readTemperatureEbb+0x8e>
        f = -1 - f;
    3458:	9b 01       	movw	r18, r22
    345a:	ac 01       	movw	r20, r24
    345c:	60 e0       	ldi	r22, 0x00	; 0
    345e:	70 e0       	ldi	r23, 0x00	; 0
    3460:	80 e8       	ldi	r24, 0x80	; 128
    3462:	9f eb       	ldi	r25, 0xBF	; 191
    3464:	0e 94 3b 2b 	call	0x5676	; 0x5676 <__subsf3>
    3468:	6b 01       	movw	r12, r22
    346a:	7c 01       	movw	r14, r24
      }
      f += (data[3] & 0x0f) * 0.1;
    346c:	6d 2f       	mov	r22, r29
    346e:	6f 70       	andi	r22, 0x0F	; 15
    3470:	70 e0       	ldi	r23, 0x00	; 0
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <__floatsisf>
    347a:	2d ec       	ldi	r18, 0xCD	; 205
    347c:	3c ec       	ldi	r19, 0xCC	; 204
    347e:	4c ec       	ldi	r20, 0xCC	; 204
    3480:	5d e3       	ldi	r21, 0x3D	; 61
    3482:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__mulsf3>
    3486:	a7 01       	movw	r20, r14
    3488:	96 01       	movw	r18, r12
    348a:	0e 94 3c 2b 	call	0x5678	; 0x5678 <__addsf3>
    348e:	1f c0       	rjmp	.+62     	; 0x34ce <_ZN3DHT15readTemperatureEbb+0xf0>
      if (S) {
        f = convertCtoF(f);
      }
      break;
    case DHT12:
      f = data[2];
    3490:	f8 01       	movw	r30, r16
    3492:	d2 81       	ldd	r29, Z+2	; 0x02
      f += (data[3] & 0x0f) * 0.1;
    3494:	63 81       	ldd	r22, Z+3	; 0x03
    3496:	6f 70       	andi	r22, 0x0F	; 15
    3498:	70 e0       	ldi	r23, 0x00	; 0
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <__floatsisf>
    34a2:	2d ec       	ldi	r18, 0xCD	; 205
    34a4:	3c ec       	ldi	r19, 0xCC	; 204
    34a6:	4c ec       	ldi	r20, 0xCC	; 204
    34a8:	5d e3       	ldi	r21, 0x3D	; 61
    34aa:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__mulsf3>
    34ae:	6b 01       	movw	r12, r22
    34b0:	7c 01       	movw	r14, r24
    34b2:	6d 2f       	mov	r22, r29
    34b4:	70 e0       	ldi	r23, 0x00	; 0
    34b6:	80 e0       	ldi	r24, 0x00	; 0
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <__floatunsisf>
    34be:	9b 01       	movw	r18, r22
    34c0:	ac 01       	movw	r20, r24
    34c2:	c7 01       	movw	r24, r14
    34c4:	b6 01       	movw	r22, r12
    34c6:	0e 94 3c 2b 	call	0x5678	; 0x5678 <__addsf3>
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
      f *= 0.1;
      if (data[2] & 0x80) {
    34ca:	d7 fd       	sbrc	r29, 7
        f *= -1;
    34cc:	90 58       	subi	r25, 0x80	; 128
      }
      if (S) {
    34ce:	cc 23       	and	r28, r28
    34d0:	89 f0       	breq	.+34     	; 0x34f4 <_ZN3DHT15readTemperatureEbb+0x116>
 *  @brief  Converts Celcius to Fahrenheit
 *  @param  c
 *					value in Celcius
 *	@return float value in Fahrenheit
 */
float DHT::convertCtoF(float c) { return c * 1.8 + 32; }
    34d2:	26 e6       	ldi	r18, 0x66	; 102
    34d4:	36 e6       	ldi	r19, 0x66	; 102
    34d6:	46 ee       	ldi	r20, 0xE6	; 230
    34d8:	5f e3       	ldi	r21, 0x3F	; 63
    34da:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__mulsf3>
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	40 e0       	ldi	r20, 0x00	; 0
    34e4:	52 e4       	ldi	r21, 0x42	; 66
    34e6:	0e 94 3c 2b 	call	0x5678	; 0x5678 <__addsf3>
    34ea:	04 c0       	rjmp	.+8      	; 0x34f4 <_ZN3DHT15readTemperatureEbb+0x116>
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
  float f = NAN;
    34ec:	60 e0       	ldi	r22, 0x00	; 0
    34ee:	70 e0       	ldi	r23, 0x00	; 0
    34f0:	80 ec       	ldi	r24, 0xC0	; 192
    34f2:	9f e7       	ldi	r25, 0x7F	; 127
      }
      break;
    }
  }
  return f;
}
    34f4:	df 91       	pop	r29
    34f6:	cf 91       	pop	r28
    34f8:	1f 91       	pop	r17
    34fa:	0f 91       	pop	r16
    34fc:	ff 90       	pop	r15
    34fe:	ef 90       	pop	r14
    3500:	df 90       	pop	r13
    3502:	cf 90       	pop	r12
    3504:	08 95       	ret

00003506 <_ZN3DHT12readHumidityEb>:
 *  @brief  Read Humidity
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
    3506:	cf 92       	push	r12
    3508:	df 92       	push	r13
    350a:	ef 92       	push	r14
    350c:	ff 92       	push	r15
    350e:	cf 93       	push	r28
    3510:	df 93       	push	r29
    3512:	ec 01       	movw	r28, r24
  float f = NAN;
  if (read(force)) {
    3514:	69 de       	rcall	.-814    	; 0x31e8 <_ZN3DHT4readEb>
    3516:	88 23       	and	r24, r24
    3518:	99 f1       	breq	.+102    	; 0x3580 <_ZN3DHT12readHumidityEb+0x7a>
    switch (_type) {
    351a:	8e 81       	ldd	r24, Y+6	; 0x06
    351c:	8b 30       	cpi	r24, 0x0B	; 11
    351e:	80 f1       	brcs	.+96     	; 0x3580 <_ZN3DHT12readHumidityEb+0x7a>
    3520:	8d 30       	cpi	r24, 0x0D	; 13
    3522:	98 f0       	brcs	.+38     	; 0x354a <_ZN3DHT12readHumidityEb+0x44>
    3524:	85 51       	subi	r24, 0x15	; 21
    3526:	82 30       	cpi	r24, 0x02	; 2
    3528:	58 f5       	brcc	.+86     	; 0x3580 <_ZN3DHT12readHumidityEb+0x7a>
    case DHT12:
      f = data[0] + data[1] * 0.1;
      break;
    case DHT22:
    case DHT21:
      f = ((word)data[0]) << 8 | data[1];
    352a:	68 81       	ld	r22, Y
    352c:	79 81       	ldd	r23, Y+1	; 0x01
    352e:	76 27       	eor	r23, r22
    3530:	67 27       	eor	r22, r23
    3532:	76 27       	eor	r23, r22
    3534:	80 e0       	ldi	r24, 0x00	; 0
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <__floatunsisf>
      f *= 0.1;
    353c:	2d ec       	ldi	r18, 0xCD	; 205
    353e:	3c ec       	ldi	r19, 0xCC	; 204
    3540:	4c ec       	ldi	r20, 0xCC	; 204
    3542:	5d e3       	ldi	r21, 0x3D	; 61
    3544:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__mulsf3>
      break;
    3548:	1f c0       	rjmp	.+62     	; 0x3588 <_ZN3DHT12readHumidityEb+0x82>
  float f = NAN;
  if (read(force)) {
    switch (_type) {
    case DHT11:
    case DHT12:
      f = data[0] + data[1] * 0.1;
    354a:	69 81       	ldd	r22, Y+1	; 0x01
    354c:	70 e0       	ldi	r23, 0x00	; 0
    354e:	80 e0       	ldi	r24, 0x00	; 0
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <__floatsisf>
    3556:	2d ec       	ldi	r18, 0xCD	; 205
    3558:	3c ec       	ldi	r19, 0xCC	; 204
    355a:	4c ec       	ldi	r20, 0xCC	; 204
    355c:	5d e3       	ldi	r21, 0x3D	; 61
    355e:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__mulsf3>
    3562:	6b 01       	movw	r12, r22
    3564:	7c 01       	movw	r14, r24
    3566:	68 81       	ld	r22, Y
    3568:	70 e0       	ldi	r23, 0x00	; 0
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <__floatsisf>
    3572:	9b 01       	movw	r18, r22
    3574:	ac 01       	movw	r20, r24
    3576:	c7 01       	movw	r24, r14
    3578:	b6 01       	movw	r22, r12
    357a:	0e 94 3c 2b 	call	0x5678	; 0x5678 <__addsf3>
    357e:	04 c0       	rjmp	.+8      	; 0x3588 <_ZN3DHT12readHumidityEb+0x82>
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
  float f = NAN;
    3580:	60 e0       	ldi	r22, 0x00	; 0
    3582:	70 e0       	ldi	r23, 0x00	; 0
    3584:	80 ec       	ldi	r24, 0xC0	; 192
    3586:	9f e7       	ldi	r25, 0x7F	; 127
      f *= 0.1;
      break;
    }
  }
  return f;
}
    3588:	df 91       	pop	r29
    358a:	cf 91       	pop	r28
    358c:	ff 90       	pop	r15
    358e:	ef 90       	pop	r14
    3590:	df 90       	pop	r13
    3592:	cf 90       	pop	r12
    3594:	08 95       	ret

00003596 <_ZN3KeyC1Ev>:
*/
#include <Key.h>


// default constructor
Key::Key() {
    3596:	fc 01       	movw	r30, r24
	kchar = NO_KEY;
    3598:	10 82       	st	Z, r1
	kstate = IDLE;
    359a:	13 82       	std	Z+3, r1	; 0x03
	stateChanged = false;
    359c:	14 82       	std	Z+4, r1	; 0x04
    359e:	08 95       	ret

000035a0 <_ZN6Keypad8pin_readEh>:
void Keypad::setHoldTime(uint hold) {
    holdTime = hold;
}

void Keypad::addEventListener(void (*listener)(char)){
	keypadEventListener = listener;
    35a0:	86 2f       	mov	r24, r22
    35a2:	0c 94 a5 37 	jmp	0x6f4a	; 0x6f4a <digitalRead>

000035a6 <_ZN6Keypad9pin_writeEhb>:
    35a6:	86 2f       	mov	r24, r22
    35a8:	64 2f       	mov	r22, r20
    35aa:	0c 94 77 37 	jmp	0x6eee	; 0x6eee <digitalWrite>

000035ae <_ZN6Keypad8pin_modeEhh>:
    35ae:	86 2f       	mov	r24, r22
    35b0:	64 2f       	mov	r22, r20
    35b2:	0c 94 3b 37 	jmp	0x6e76	; 0x6e76 <pinMode>

000035b6 <_ZN6KeypadC1EPcPhS1_hh>:
    35b6:	4f 92       	push	r4
    35b8:	5f 92       	push	r5
    35ba:	6f 92       	push	r6
    35bc:	7f 92       	push	r7
    35be:	8f 92       	push	r8
    35c0:	9f 92       	push	r9
    35c2:	af 92       	push	r10
    35c4:	bf 92       	push	r11
    35c6:	cf 92       	push	r12
    35c8:	df 92       	push	r13
    35ca:	ef 92       	push	r14
    35cc:	0f 93       	push	r16
    35ce:	cf 93       	push	r28
    35d0:	df 93       	push	r29
    35d2:	ec 01       	movw	r28, r24
    35d4:	6b 01       	movw	r12, r22
    35d6:	4a 01       	movw	r8, r20
    35d8:	59 01       	movw	r10, r18
    35da:	02 96       	adiw	r24, 0x02	; 2
    35dc:	dc df       	rcall	.-72     	; 0x3596 <_ZN3KeyC1Ev>
    35de:	8c e1       	ldi	r24, 0x1C	; 28
    35e0:	93 e0       	ldi	r25, 0x03	; 3
    35e2:	99 83       	std	Y+1, r25	; 0x01
    35e4:	88 83       	st	Y, r24
    35e6:	2e 01       	movw	r4, r28
    35e8:	8b e1       	ldi	r24, 0x1B	; 27
    35ea:	48 0e       	add	r4, r24
    35ec:	51 1c       	adc	r5, r1
    35ee:	3e 01       	movw	r6, r28
    35f0:	8d e4       	ldi	r24, 0x4D	; 77
    35f2:	68 0e       	add	r6, r24
    35f4:	71 1c       	adc	r7, r1
    35f6:	c2 01       	movw	r24, r4
    35f8:	ce df       	rcall	.-100    	; 0x3596 <_ZN3KeyC1Ev>
    35fa:	85 e0       	ldi	r24, 0x05	; 5
    35fc:	48 0e       	add	r4, r24
    35fe:	51 1c       	adc	r5, r1
    3600:	46 14       	cp	r4, r6
    3602:	57 04       	cpc	r5, r7
    3604:	c1 f7       	brne	.-16     	; 0x35f6 <_ZN6KeypadC1EPcPhS1_hh+0x40>
    3606:	fe 01       	movw	r30, r28
    3608:	e9 5a       	subi	r30, 0xA9	; 169
    360a:	ff 4f       	sbci	r31, 0xFF	; 255
    360c:	91 82       	std	Z+1, r9	; 0x01
    360e:	80 82       	st	Z, r8
    3610:	32 96       	adiw	r30, 0x02	; 2
    3612:	b1 82       	std	Z+1, r11	; 0x01
    3614:	a0 82       	st	Z, r10
    3616:	32 96       	adiw	r30, 0x02	; 2
    3618:	00 83       	st	Z, r16
    361a:	31 96       	adiw	r30, 0x01	; 1
    361c:	e0 82       	st	Z, r14
    361e:	37 97       	sbiw	r30, 0x07	; 7
    3620:	d1 82       	std	Z+1, r13	; 0x01
    3622:	c0 82       	st	Z, r12
    3624:	38 96       	adiw	r30, 0x08	; 8
    3626:	8a e0       	ldi	r24, 0x0A	; 10
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	91 83       	std	Z+1, r25	; 0x01
    362c:	80 83       	st	Z, r24
    362e:	32 96       	adiw	r30, 0x02	; 2
    3630:	84 ef       	ldi	r24, 0xF4	; 244
    3632:	91 e0       	ldi	r25, 0x01	; 1
    3634:	91 83       	std	Z+1, r25	; 0x01
    3636:	80 83       	st	Z, r24
    3638:	33 96       	adiw	r30, 0x03	; 3
    363a:	11 82       	std	Z+1, r1	; 0x01
    363c:	10 82       	st	Z, r1
    363e:	71 97       	sbiw	r30, 0x11	; 17
    3640:	10 82       	st	Z, r1
    3642:	11 82       	std	Z+1, r1	; 0x01
    3644:	12 82       	std	Z+2, r1	; 0x02
    3646:	13 82       	std	Z+3, r1	; 0x03
    3648:	cf 59       	subi	r28, 0x9F	; 159
    364a:	df 4f       	sbci	r29, 0xFF	; 255
    364c:	18 82       	st	Y, r1
    364e:	df 91       	pop	r29
    3650:	cf 91       	pop	r28
    3652:	0f 91       	pop	r16
    3654:	ef 90       	pop	r14
    3656:	df 90       	pop	r13
    3658:	cf 90       	pop	r12
    365a:	bf 90       	pop	r11
    365c:	af 90       	pop	r10
    365e:	9f 90       	pop	r9
    3660:	8f 90       	pop	r8
    3662:	7f 90       	pop	r7
    3664:	6f 90       	pop	r6
    3666:	5f 90       	pop	r5
    3668:	4f 90       	pop	r4
    366a:	08 95       	ret

0000366c <_ZN6Keypad8scanKeysEv>:
    366c:	2f 92       	push	r2
    366e:	3f 92       	push	r3
    3670:	4f 92       	push	r4
    3672:	5f 92       	push	r5
    3674:	6f 92       	push	r6
    3676:	7f 92       	push	r7
    3678:	8f 92       	push	r8
    367a:	9f 92       	push	r9
    367c:	af 92       	push	r10
    367e:	bf 92       	push	r11
    3680:	cf 92       	push	r12
    3682:	df 92       	push	r13
    3684:	ef 92       	push	r14
    3686:	ff 92       	push	r15
    3688:	0f 93       	push	r16
    368a:	1f 93       	push	r17
    368c:	cf 93       	push	r28
    368e:	df 93       	push	r29
    3690:	cd b7       	in	r28, 0x3d	; 61
    3692:	de b7       	in	r29, 0x3e	; 62
    3694:	28 97       	sbiw	r28, 0x08	; 8
    3696:	0f b6       	in	r0, 0x3f	; 63
    3698:	f8 94       	cli
    369a:	de bf       	out	0x3e, r29	; 62
    369c:	0f be       	out	0x3f, r0	; 63
    369e:	cd bf       	out	0x3d, r28	; 61
    36a0:	98 87       	std	Y+8, r25	; 0x08
    36a2:	8f 83       	std	Y+7, r24	; 0x07
    36a4:	10 e0       	ldi	r17, 0x00	; 0
    36a6:	5c 01       	movw	r10, r24
    36a8:	2b e5       	ldi	r18, 0x5B	; 91
    36aa:	a2 0e       	add	r10, r18
    36ac:	b1 1c       	adc	r11, r1
    36ae:	7c 01       	movw	r14, r24
    36b0:	37 e5       	ldi	r19, 0x57	; 87
    36b2:	e3 0e       	add	r14, r19
    36b4:	f1 1c       	adc	r15, r1
    36b6:	d5 01       	movw	r26, r10
    36b8:	8c 91       	ld	r24, X
    36ba:	18 17       	cp	r17, r24
    36bc:	b8 f0       	brcs	.+46     	; 0x36ec <_ZN6Keypad8scanKeysEv+0x80>
    36be:	31 2c       	mov	r3, r1
    36c0:	ef 81       	ldd	r30, Y+7	; 0x07
    36c2:	f8 85       	ldd	r31, Y+8	; 0x08
    36c4:	e4 5a       	subi	r30, 0xA4	; 164
    36c6:	ff 4f       	sbci	r31, 0xFF	; 255
    36c8:	fc 83       	std	Y+4, r31	; 0x04
    36ca:	eb 83       	std	Y+3, r30	; 0x03
    36cc:	cf 80       	ldd	r12, Y+7	; 0x07
    36ce:	d8 84       	ldd	r13, Y+8	; 0x08
    36d0:	f9 e5       	ldi	r31, 0x59	; 89
    36d2:	cf 0e       	add	r12, r31
    36d4:	d1 1c       	adc	r13, r1
    36d6:	41 2c       	mov	r4, r1
    36d8:	51 2c       	mov	r5, r1
    36da:	32 01       	movw	r6, r4
    36dc:	43 94       	inc	r4
    36de:	2f 81       	ldd	r18, Y+7	; 0x07
    36e0:	38 85       	ldd	r19, Y+8	; 0x08
    36e2:	29 5a       	subi	r18, 0xA9	; 169
    36e4:	3f 4f       	sbci	r19, 0xFF	; 255
    36e6:	3e 83       	std	Y+6, r19	; 0x06
    36e8:	2d 83       	std	Y+5, r18	; 0x05
    36ea:	60 c0       	rjmp	.+192    	; 0x37ac <_ZN6Keypad8scanKeysEv+0x140>
    36ec:	f7 01       	movw	r30, r14
    36ee:	a0 81       	ld	r26, Z
    36f0:	b1 81       	ldd	r27, Z+1	; 0x01
    36f2:	a1 0f       	add	r26, r17
    36f4:	b1 1d       	adc	r27, r1
    36f6:	ef 81       	ldd	r30, Y+7	; 0x07
    36f8:	f8 85       	ldd	r31, Y+8	; 0x08
    36fa:	80 81       	ld	r24, Z
    36fc:	91 81       	ldd	r25, Z+1	; 0x01
    36fe:	fc 01       	movw	r30, r24
    3700:	20 81       	ld	r18, Z
    3702:	31 81       	ldd	r19, Z+1	; 0x01
    3704:	42 e0       	ldi	r20, 0x02	; 2
    3706:	6c 91       	ld	r22, X
    3708:	8f 81       	ldd	r24, Y+7	; 0x07
    370a:	98 85       	ldd	r25, Y+8	; 0x08
    370c:	f9 01       	movw	r30, r18
    370e:	19 95       	eicall
    3710:	1f 5f       	subi	r17, 0xFF	; 255
    3712:	d1 cf       	rjmp	.-94     	; 0x36b6 <_ZN6Keypad8scanKeysEv+0x4a>
    3714:	02 2d       	mov	r16, r2
    3716:	10 e0       	ldi	r17, 0x00	; 0
    3718:	ad 81       	ldd	r26, Y+5	; 0x05
    371a:	be 81       	ldd	r27, Y+6	; 0x06
    371c:	8d 91       	ld	r24, X+
    371e:	9c 91       	ld	r25, X
    3720:	dc 01       	movw	r26, r24
    3722:	a0 0f       	add	r26, r16
    3724:	b1 1f       	adc	r27, r17
    3726:	04 80       	ldd	r0, Z+4	; 0x04
    3728:	f5 81       	ldd	r31, Z+5	; 0x05
    372a:	e0 2d       	mov	r30, r0
    372c:	6c 91       	ld	r22, X
    372e:	8f 81       	ldd	r24, Y+7	; 0x07
    3730:	98 85       	ldd	r25, Y+8	; 0x08
    3732:	19 95       	eicall
    3734:	00 0f       	add	r16, r16
    3736:	11 1f       	adc	r17, r17
    3738:	ef 81       	ldd	r30, Y+7	; 0x07
    373a:	f8 85       	ldd	r31, Y+8	; 0x08
    373c:	e0 0f       	add	r30, r16
    373e:	f1 1f       	adc	r31, r17
    3740:	89 2b       	or	r24, r25
    3742:	09 f0       	breq	.+2      	; 0x3746 <_ZN6Keypad8scanKeysEv+0xda>
    3744:	6f c0       	rjmp	.+222    	; 0x3824 <_ZN6Keypad8scanKeysEv+0x1b8>
    3746:	87 81       	ldd	r24, Z+7	; 0x07
    3748:	90 85       	ldd	r25, Z+8	; 0x08
    374a:	29 81       	ldd	r18, Y+1	; 0x01
    374c:	3a 81       	ldd	r19, Y+2	; 0x02
    374e:	82 2b       	or	r24, r18
    3750:	93 2b       	or	r25, r19
    3752:	90 87       	std	Z+8, r25	; 0x08
    3754:	87 83       	std	Z+7, r24	; 0x07
    3756:	23 94       	inc	r2
    3758:	d5 01       	movw	r26, r10
    375a:	8c 91       	ld	r24, X
    375c:	af 81       	ldd	r26, Y+7	; 0x07
    375e:	b8 85       	ldd	r27, Y+8	; 0x08
    3760:	ed 91       	ld	r30, X+
    3762:	fc 91       	ld	r31, X
    3764:	28 16       	cp	r2, r24
    3766:	b0 f2       	brcs	.-84     	; 0x3714 <_ZN6Keypad8scanKeysEv+0xa8>
    3768:	d6 01       	movw	r26, r12
    376a:	8d 91       	ld	r24, X+
    376c:	9c 91       	ld	r25, X
    376e:	dc 01       	movw	r26, r24
    3770:	ae 0d       	add	r26, r14
    3772:	bf 1d       	adc	r27, r15
    3774:	02 80       	ldd	r0, Z+2	; 0x02
    3776:	f3 81       	ldd	r31, Z+3	; 0x03
    3778:	e0 2d       	mov	r30, r0
    377a:	41 e0       	ldi	r20, 0x01	; 1
    377c:	6c 91       	ld	r22, X
    377e:	8f 81       	ldd	r24, Y+7	; 0x07
    3780:	98 85       	ldd	r25, Y+8	; 0x08
    3782:	19 95       	eicall
    3784:	f6 01       	movw	r30, r12
    3786:	80 81       	ld	r24, Z
    3788:	91 81       	ldd	r25, Z+1	; 0x01
    378a:	dc 01       	movw	r26, r24
    378c:	ae 0d       	add	r26, r14
    378e:	bf 1d       	adc	r27, r15
    3790:	ef 81       	ldd	r30, Y+7	; 0x07
    3792:	f8 85       	ldd	r31, Y+8	; 0x08
    3794:	80 81       	ld	r24, Z
    3796:	91 81       	ldd	r25, Z+1	; 0x01
    3798:	fc 01       	movw	r30, r24
    379a:	20 81       	ld	r18, Z
    379c:	31 81       	ldd	r19, Z+1	; 0x01
    379e:	40 e0       	ldi	r20, 0x00	; 0
    37a0:	6c 91       	ld	r22, X
    37a2:	8f 81       	ldd	r24, Y+7	; 0x07
    37a4:	98 85       	ldd	r25, Y+8	; 0x08
    37a6:	f9 01       	movw	r30, r18
    37a8:	19 95       	eicall
    37aa:	33 94       	inc	r3
    37ac:	ab 81       	ldd	r26, Y+3	; 0x03
    37ae:	bc 81       	ldd	r27, Y+4	; 0x04
    37b0:	8c 91       	ld	r24, X
    37b2:	38 16       	cp	r3, r24
    37b4:	e0 f5       	brcc	.+120    	; 0x382e <_ZN6Keypad8scanKeysEv+0x1c2>
    37b6:	e3 2c       	mov	r14, r3
    37b8:	f1 2c       	mov	r15, r1
    37ba:	f6 01       	movw	r30, r12
    37bc:	a0 81       	ld	r26, Z
    37be:	b1 81       	ldd	r27, Z+1	; 0x01
    37c0:	ae 0d       	add	r26, r14
    37c2:	bf 1d       	adc	r27, r15
    37c4:	ef 81       	ldd	r30, Y+7	; 0x07
    37c6:	f8 85       	ldd	r31, Y+8	; 0x08
    37c8:	80 81       	ld	r24, Z
    37ca:	91 81       	ldd	r25, Z+1	; 0x01
    37cc:	fc 01       	movw	r30, r24
    37ce:	20 81       	ld	r18, Z
    37d0:	31 81       	ldd	r19, Z+1	; 0x01
    37d2:	41 e0       	ldi	r20, 0x01	; 1
    37d4:	6c 91       	ld	r22, X
    37d6:	8f 81       	ldd	r24, Y+7	; 0x07
    37d8:	98 85       	ldd	r25, Y+8	; 0x08
    37da:	f9 01       	movw	r30, r18
    37dc:	19 95       	eicall
    37de:	f6 01       	movw	r30, r12
    37e0:	a0 81       	ld	r26, Z
    37e2:	b1 81       	ldd	r27, Z+1	; 0x01
    37e4:	ae 0d       	add	r26, r14
    37e6:	bf 1d       	adc	r27, r15
    37e8:	ef 81       	ldd	r30, Y+7	; 0x07
    37ea:	f8 85       	ldd	r31, Y+8	; 0x08
    37ec:	80 81       	ld	r24, Z
    37ee:	91 81       	ldd	r25, Z+1	; 0x01
    37f0:	fc 01       	movw	r30, r24
    37f2:	22 81       	ldd	r18, Z+2	; 0x02
    37f4:	33 81       	ldd	r19, Z+3	; 0x03
    37f6:	40 e0       	ldi	r20, 0x00	; 0
    37f8:	6c 91       	ld	r22, X
    37fa:	8f 81       	ldd	r24, Y+7	; 0x07
    37fc:	98 85       	ldd	r25, Y+8	; 0x08
    37fe:	f9 01       	movw	r30, r18
    3800:	19 95       	eicall
    3802:	d3 01       	movw	r26, r6
    3804:	c2 01       	movw	r24, r4
    3806:	03 2c       	mov	r0, r3
    3808:	04 c0       	rjmp	.+8      	; 0x3812 <_ZN6Keypad8scanKeysEv+0x1a6>
    380a:	88 0f       	add	r24, r24
    380c:	99 1f       	adc	r25, r25
    380e:	aa 1f       	adc	r26, r26
    3810:	bb 1f       	adc	r27, r27
    3812:	0a 94       	dec	r0
    3814:	d2 f7       	brpl	.-12     	; 0x380a <_ZN6Keypad8scanKeysEv+0x19e>
    3816:	9a 83       	std	Y+2, r25	; 0x02
    3818:	89 83       	std	Y+1, r24	; 0x01
    381a:	4c 01       	movw	r8, r24
    381c:	80 94       	com	r8
    381e:	90 94       	com	r9
    3820:	21 2c       	mov	r2, r1
    3822:	9a cf       	rjmp	.-204    	; 0x3758 <_ZN6Keypad8scanKeysEv+0xec>
    3824:	87 81       	ldd	r24, Z+7	; 0x07
    3826:	90 85       	ldd	r25, Z+8	; 0x08
    3828:	88 21       	and	r24, r8
    382a:	99 21       	and	r25, r9
    382c:	92 cf       	rjmp	.-220    	; 0x3752 <_ZN6Keypad8scanKeysEv+0xe6>
    382e:	28 96       	adiw	r28, 0x08	; 8
    3830:	0f b6       	in	r0, 0x3f	; 63
    3832:	f8 94       	cli
    3834:	de bf       	out	0x3e, r29	; 62
    3836:	0f be       	out	0x3f, r0	; 63
    3838:	cd bf       	out	0x3d, r28	; 61
    383a:	df 91       	pop	r29
    383c:	cf 91       	pop	r28
    383e:	1f 91       	pop	r17
    3840:	0f 91       	pop	r16
    3842:	ff 90       	pop	r15
    3844:	ef 90       	pop	r14
    3846:	df 90       	pop	r13
    3848:	cf 90       	pop	r12
    384a:	bf 90       	pop	r11
    384c:	af 90       	pop	r10
    384e:	9f 90       	pop	r9
    3850:	8f 90       	pop	r8
    3852:	7f 90       	pop	r7
    3854:	6f 90       	pop	r6
    3856:	5f 90       	pop	r5
    3858:	4f 90       	pop	r4
    385a:	3f 90       	pop	r3
    385c:	2f 90       	pop	r2
    385e:	08 95       	ret

00003860 <_ZN6Keypad10findInListEi>:
    3860:	fc 01       	movw	r30, r24
    3862:	80 e0       	ldi	r24, 0x00	; 0
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	24 8d       	ldd	r18, Z+28	; 0x1c
    3868:	35 8d       	ldd	r19, Z+29	; 0x1d
    386a:	26 17       	cp	r18, r22
    386c:	37 07       	cpc	r19, r23
    386e:	39 f0       	breq	.+14     	; 0x387e <_ZN6Keypad10findInListEi+0x1e>
    3870:	01 96       	adiw	r24, 0x01	; 1
    3872:	35 96       	adiw	r30, 0x05	; 5
    3874:	8a 30       	cpi	r24, 0x0A	; 10
    3876:	91 05       	cpc	r25, r1
    3878:	b1 f7       	brne	.-20     	; 0x3866 <_ZN6Keypad10findInListEi+0x6>
    387a:	8f ef       	ldi	r24, 0xFF	; 255
    387c:	9f ef       	ldi	r25, 0xFF	; 255
    387e:	08 95       	ret

00003880 <_ZN6Keypad12transitionToEh8KeyState>:
}

void Keypad::transitionTo(byte idx, KeyState nextState) {
	key[idx].kstate = nextState;
    3880:	dc 01       	movw	r26, r24
    3882:	25 e0       	ldi	r18, 0x05	; 5
    3884:	62 9f       	mul	r22, r18
    3886:	a0 0d       	add	r26, r0
    3888:	b1 1d       	adc	r27, r1
    388a:	11 24       	eor	r1, r1
    388c:	5e 96       	adiw	r26, 0x1e	; 30
    388e:	4c 93       	st	X, r20
    3890:	5e 97       	sbiw	r26, 0x1e	; 30
	key[idx].stateChanged = true;
    3892:	21 e0       	ldi	r18, 0x01	; 1
    3894:	5f 96       	adiw	r26, 0x1f	; 31
    3896:	2c 93       	st	X, r18
    3898:	5f 97       	sbiw	r26, 0x1f	; 31

	// Sketch used the getKey() function.
	// Calls keypadEventListener only when the first key in slot 0 changes state.
	if (single_key)  {
    389a:	fc 01       	movw	r30, r24
    389c:	ef 59       	subi	r30, 0x9F	; 159
    389e:	ff 4f       	sbci	r31, 0xFF	; 255
    38a0:	20 81       	ld	r18, Z
    38a2:	31 96       	adiw	r30, 0x01	; 1
	  	if ( (keypadEventListener!=NULL) && (idx==0) )  {
    38a4:	01 90       	ld	r0, Z+
    38a6:	f0 81       	ld	r31, Z
    38a8:	e0 2d       	mov	r30, r0
	key[idx].kstate = nextState;
	key[idx].stateChanged = true;

	// Sketch used the getKey() function.
	// Calls keypadEventListener only when the first key in slot 0 changes state.
	if (single_key)  {
    38aa:	22 23       	and	r18, r18
    38ac:	31 f0       	breq	.+12     	; 0x38ba <_ZN6Keypad12transitionToEh8KeyState+0x3a>
	  	if ( (keypadEventListener!=NULL) && (idx==0) )  {
    38ae:	30 97       	sbiw	r30, 0x00	; 0
    38b0:	49 f0       	breq	.+18     	; 0x38c4 <_ZN6Keypad12transitionToEh8KeyState+0x44>
    38b2:	61 11       	cpse	r22, r1
    38b4:	07 c0       	rjmp	.+14     	; 0x38c4 <_ZN6Keypad12transitionToEh8KeyState+0x44>
			keypadEventListener(key[0].kchar);
    38b6:	dc 01       	movw	r26, r24
    38b8:	02 c0       	rjmp	.+4      	; 0x38be <_ZN6Keypad12transitionToEh8KeyState+0x3e>
		}
	}
	// Sketch used the getKeys() function.
	// Calls keypadEventListener on any key that changes state.
	else {
	  	if (keypadEventListener!=NULL)  {
    38ba:	30 97       	sbiw	r30, 0x00	; 0
    38bc:	19 f0       	breq	.+6      	; 0x38c4 <_ZN6Keypad12transitionToEh8KeyState+0x44>
			keypadEventListener(key[idx].kchar);
    38be:	5b 96       	adiw	r26, 0x1b	; 27
    38c0:	8c 91       	ld	r24, X
    38c2:	19 94       	eijmp
    38c4:	08 95       	ret

000038c6 <_ZN6Keypad12nextKeyStateEhb>:
	return anyActivity;
}

// Private
// This function is a state machine but is also used for debouncing the keys.
void Keypad::nextKeyState(byte idx, boolean button) {
    38c6:	cf 92       	push	r12
    38c8:	df 92       	push	r13
    38ca:	ef 92       	push	r14
    38cc:	ff 92       	push	r15
    38ce:	0f 93       	push	r16
    38d0:	1f 93       	push	r17
    38d2:	cf 93       	push	r28
    38d4:	df 93       	push	r29
    38d6:	ec 01       	movw	r28, r24
    38d8:	16 2f       	mov	r17, r22
    38da:	04 2f       	mov	r16, r20
	key[idx].stateChanged = false;
    38dc:	fc 01       	movw	r30, r24
    38de:	85 e0       	ldi	r24, 0x05	; 5
    38e0:	68 9f       	mul	r22, r24
    38e2:	e0 0d       	add	r30, r0
    38e4:	f1 1d       	adc	r31, r1
    38e6:	11 24       	eor	r1, r1
    38e8:	17 8e       	std	Z+31, r1	; 0x1f

	switch (key[idx].kstate) {
    38ea:	86 8d       	ldd	r24, Z+30	; 0x1e
    38ec:	81 30       	cpi	r24, 0x01	; 1
    38ee:	a9 f0       	breq	.+42     	; 0x391a <_ZN6Keypad12nextKeyStateEhb+0x54>
    38f0:	30 f0       	brcs	.+12     	; 0x38fe <_ZN6Keypad12nextKeyStateEhb+0x38>
    38f2:	82 30       	cpi	r24, 0x02	; 2
    38f4:	69 f1       	breq	.+90     	; 0x3950 <_ZN6Keypad12nextKeyStateEhb+0x8a>
    38f6:	83 30       	cpi	r24, 0x03	; 3
    38f8:	c9 f5       	brne	.+114    	; 0x396c <_ZN6Keypad12nextKeyStateEhb+0xa6>
		case HOLD:
			if (button==OPEN)
				transitionTo (idx, RELEASED);
			break;
		case RELEASED:
			transitionTo (idx, IDLE);
    38fa:	40 e0       	ldi	r20, 0x00	; 0
    38fc:	2c c0       	rjmp	.+88     	; 0x3956 <_ZN6Keypad12nextKeyStateEhb+0x90>
void Keypad::nextKeyState(byte idx, boolean button) {
	key[idx].stateChanged = false;

	switch (key[idx].kstate) {
		case IDLE:
			if (button==CLOSED) {
    38fe:	44 23       	and	r20, r20
    3900:	a9 f1       	breq	.+106    	; 0x396c <_ZN6Keypad12nextKeyStateEhb+0xa6>
				transitionTo (idx, PRESSED);
    3902:	41 e0       	ldi	r20, 0x01	; 1
    3904:	ce 01       	movw	r24, r28
    3906:	bc df       	rcall	.-136    	; 0x3880 <_ZN6Keypad12transitionToEh8KeyState>
				holdTimer = millis(); }		// Get ready for next HOLD state.
    3908:	0e 94 49 35 	call	0x6a92	; 0x6a92 <millis>
    390c:	c3 5b       	subi	r28, 0xB3	; 179
    390e:	df 4f       	sbci	r29, 0xFF	; 255
    3910:	68 83       	st	Y, r22
    3912:	79 83       	std	Y+1, r23	; 0x01
    3914:	8a 83       	std	Y+2, r24	; 0x02
    3916:	9b 83       	std	Y+3, r25	; 0x03
    3918:	29 c0       	rjmp	.+82     	; 0x396c <_ZN6Keypad12nextKeyStateEhb+0xa6>
			break;
		case PRESSED:
			if ((millis()-holdTimer)>holdTime)	// Waiting for a key HOLD...
    391a:	0e 94 49 35 	call	0x6a92	; 0x6a92 <millis>
    391e:	fe 01       	movw	r30, r28
    3920:	e3 5b       	subi	r30, 0xB3	; 179
    3922:	ff 4f       	sbci	r31, 0xFF	; 255
    3924:	c0 80       	ld	r12, Z
    3926:	d1 80       	ldd	r13, Z+1	; 0x01
    3928:	e2 80       	ldd	r14, Z+2	; 0x02
    392a:	f3 80       	ldd	r15, Z+3	; 0x03
    392c:	ab 01       	movw	r20, r22
    392e:	bc 01       	movw	r22, r24
    3930:	4c 19       	sub	r20, r12
    3932:	5d 09       	sbc	r21, r13
    3934:	6e 09       	sbc	r22, r14
    3936:	7f 09       	sbc	r23, r15
    3938:	72 96       	adiw	r30, 0x12	; 18
    393a:	80 81       	ld	r24, Z
    393c:	91 81       	ldd	r25, Z+1	; 0x01
    393e:	a0 e0       	ldi	r26, 0x00	; 0
    3940:	b0 e0       	ldi	r27, 0x00	; 0
    3942:	84 17       	cp	r24, r20
    3944:	95 07       	cpc	r25, r21
    3946:	a6 07       	cpc	r26, r22
    3948:	b7 07       	cpc	r27, r23
    394a:	10 f4       	brcc	.+4      	; 0x3950 <_ZN6Keypad12nextKeyStateEhb+0x8a>
				transitionTo (idx, HOLD);
    394c:	42 e0       	ldi	r20, 0x02	; 2
    394e:	03 c0       	rjmp	.+6      	; 0x3956 <_ZN6Keypad12nextKeyStateEhb+0x90>
			else if (button==OPEN)				// or for a key to be RELEASED.
    3950:	01 11       	cpse	r16, r1
    3952:	0c c0       	rjmp	.+24     	; 0x396c <_ZN6Keypad12nextKeyStateEhb+0xa6>
				transitionTo (idx, RELEASED);
    3954:	43 e0       	ldi	r20, 0x03	; 3
		case HOLD:
			if (button==OPEN)
				transitionTo (idx, RELEASED);
			break;
		case RELEASED:
			transitionTo (idx, IDLE);
    3956:	61 2f       	mov	r22, r17
    3958:	ce 01       	movw	r24, r28
			break;
	}
}
    395a:	df 91       	pop	r29
    395c:	cf 91       	pop	r28
    395e:	1f 91       	pop	r17
    3960:	0f 91       	pop	r16
    3962:	ff 90       	pop	r15
    3964:	ef 90       	pop	r14
    3966:	df 90       	pop	r13
		case HOLD:
			if (button==OPEN)
				transitionTo (idx, RELEASED);
			break;
		case RELEASED:
			transitionTo (idx, IDLE);
    3968:	cf 90       	pop	r12
    396a:	8a cf       	rjmp	.-236    	; 0x3880 <_ZN6Keypad12transitionToEh8KeyState>
			break;
	}
}
    396c:	df 91       	pop	r29
    396e:	cf 91       	pop	r28
    3970:	1f 91       	pop	r17
    3972:	0f 91       	pop	r16
    3974:	ff 90       	pop	r15
    3976:	ef 90       	pop	r14
    3978:	df 90       	pop	r13
    397a:	cf 90       	pop	r12
    397c:	08 95       	ret

0000397e <_ZN6Keypad10updateListEv>:
		pin_mode(columnPins[c],INPUT);
	}
}

// Manage the list without rearranging the keys. Returns true if any keys on the list changed state.
bool Keypad::updateList() {
    397e:	2f 92       	push	r2
    3980:	3f 92       	push	r3
    3982:	4f 92       	push	r4
    3984:	5f 92       	push	r5
    3986:	6f 92       	push	r6
    3988:	7f 92       	push	r7
    398a:	8f 92       	push	r8
    398c:	9f 92       	push	r9
    398e:	af 92       	push	r10
    3990:	bf 92       	push	r11
    3992:	cf 92       	push	r12
    3994:	df 92       	push	r13
    3996:	ef 92       	push	r14
    3998:	ff 92       	push	r15
    399a:	0f 93       	push	r16
    399c:	1f 93       	push	r17
    399e:	cf 93       	push	r28
    39a0:	df 93       	push	r29
    39a2:	00 d0       	rcall	.+0      	; 0x39a4 <_ZN6Keypad10updateListEv+0x26>
    39a4:	00 d0       	rcall	.+0      	; 0x39a6 <_ZN6Keypad10updateListEv+0x28>
    39a6:	cd b7       	in	r28, 0x3d	; 61
    39a8:	de b7       	in	r29, 0x3e	; 62
    39aa:	9e 83       	std	Y+6, r25	; 0x06
    39ac:	8d 83       	std	Y+5, r24	; 0x05
    39ae:	7c 01       	movw	r14, r24
    39b0:	5c 01       	movw	r10, r24
    39b2:	22 e3       	ldi	r18, 0x32	; 50
    39b4:	a2 0e       	add	r10, r18
    39b6:	b1 1c       	adc	r11, r1
    39b8:	fc 01       	movw	r30, r24

	// Delete any IDLE keys
	for (byte i=0; i<LIST_MAX; i++) {
		if (key[i].kstate==IDLE) {
			key[i].kchar = NO_KEY;
			key[i].kcode = -1;
    39ba:	8f ef       	ldi	r24, 0xFF	; 255
    39bc:	9f ef       	ldi	r25, 0xFF	; 255

	bool anyActivity = false;

	// Delete any IDLE keys
	for (byte i=0; i<LIST_MAX; i++) {
		if (key[i].kstate==IDLE) {
    39be:	26 8d       	ldd	r18, Z+30	; 0x1e
    39c0:	21 11       	cpse	r18, r1
    39c2:	04 c0       	rjmp	.+8      	; 0x39cc <_ZN6Keypad10updateListEv+0x4e>
			key[i].kchar = NO_KEY;
    39c4:	13 8e       	std	Z+27, r1	; 0x1b
			key[i].kcode = -1;
    39c6:	95 8f       	std	Z+29, r25	; 0x1d
    39c8:	84 8f       	std	Z+28, r24	; 0x1c
			key[i].stateChanged = false;
    39ca:	17 8e       	std	Z+31, r1	; 0x1f
    39cc:	35 96       	adiw	r30, 0x05	; 5
bool Keypad::updateList() {

	bool anyActivity = false;

	// Delete any IDLE keys
	for (byte i=0; i<LIST_MAX; i++) {
    39ce:	ae 16       	cp	r10, r30
    39d0:	bf 06       	cpc	r11, r31
    39d2:	a9 f7       	brne	.-22     	; 0x39be <_ZN6Keypad10updateListEv+0x40>
    39d4:	51 2c       	mov	r5, r1
			key[i].stateChanged = false;
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
    39d6:	8d 81       	ldd	r24, Y+5	; 0x05
    39d8:	9e 81       	ldd	r25, Y+6	; 0x06
    39da:	85 5a       	subi	r24, 0xA5	; 165
    39dc:	9f 4f       	sbci	r25, 0xFF	; 255
    39de:	9a 83       	std	Y+2, r25	; 0x02
    39e0:	89 83       	std	Y+1, r24	; 0x01
		for (byte c=0; c<sizeKpd.columns; c++) {
    39e2:	ad 81       	ldd	r26, Y+5	; 0x05
    39e4:	be 81       	ldd	r27, Y+6	; 0x06
    39e6:	a4 5a       	subi	r26, 0xA4	; 164
    39e8:	bf 4f       	sbci	r27, 0xFF	; 255
    39ea:	bc 83       	std	Y+4, r27	; 0x04
    39ec:	ab 83       	std	Y+3, r26	; 0x03
			boolean button = bitRead(bitMap[r],c);
			char keyChar = keymap[r * sizeKpd.columns + c];
    39ee:	6d 80       	ldd	r6, Y+5	; 0x05
    39f0:	7e 80       	ldd	r7, Y+6	; 0x06
    39f2:	b5 e5       	ldi	r27, 0x55	; 85
    39f4:	6b 0e       	add	r6, r27
    39f6:	71 1c       	adc	r7, r1
			}
			// Key is NOT on the list so add it.
			if ((idx == -1) && button) {
				for (byte i=0; i<LIST_MAX; i++) {
					if (key[i].kchar==NO_KEY) {		// Find an empty slot or don't add key to list.
						key[i].kchar = keyChar;
    39f8:	85 e0       	ldi	r24, 0x05	; 5
    39fa:	28 2e       	mov	r2, r24
			key[i].stateChanged = false;
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
    39fc:	e9 81       	ldd	r30, Y+1	; 0x01
    39fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3a00:	80 81       	ld	r24, Z
    3a02:	58 16       	cp	r5, r24
    3a04:	08 f0       	brcs	.+2      	; 0x3a08 <_ZN6Keypad10updateListEv+0x8a>
    3a06:	57 c0       	rjmp	.+174    	; 0x3ab6 <_ZN6Keypad10updateListEv+0x138>
    3a08:	41 2c       	mov	r4, r1
		for (byte c=0; c<sizeKpd.columns; c++) {
			boolean button = bitRead(bitMap[r],c);
    3a0a:	0d 81       	ldd	r16, Y+5	; 0x05
    3a0c:	1e 81       	ldd	r17, Y+6	; 0x06
    3a0e:	05 0d       	add	r16, r5
    3a10:	11 1d       	adc	r17, r1
    3a12:	05 0d       	add	r16, r5
    3a14:	11 1d       	adc	r17, r1
    3a16:	09 5f       	subi	r16, 0xF9	; 249
    3a18:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
		for (byte c=0; c<sizeKpd.columns; c++) {
    3a1a:	ab 81       	ldd	r26, Y+3	; 0x03
    3a1c:	bc 81       	ldd	r27, Y+4	; 0x04
    3a1e:	8c 90       	ld	r8, X
    3a20:	48 14       	cp	r4, r8
    3a22:	08 f0       	brcs	.+2      	; 0x3a26 <_ZN6Keypad10updateListEv+0xa8>
    3a24:	46 c0       	rjmp	.+140    	; 0x3ab2 <_ZN6Keypad10updateListEv+0x134>
			boolean button = bitRead(bitMap[r],c);
    3a26:	f8 01       	movw	r30, r16
    3a28:	c0 80       	ld	r12, Z
    3a2a:	d1 80       	ldd	r13, Z+1	; 0x01
    3a2c:	04 2c       	mov	r0, r4
    3a2e:	02 c0       	rjmp	.+4      	; 0x3a34 <_ZN6Keypad10updateListEv+0xb6>
    3a30:	d6 94       	lsr	r13
    3a32:	c7 94       	ror	r12
    3a34:	0a 94       	dec	r0
    3a36:	e2 f7       	brpl	.-8      	; 0x3a30 <_ZN6Keypad10updateListEv+0xb2>
    3a38:	fc 2d       	mov	r31, r12
    3a3a:	f1 70       	andi	r31, 0x01	; 1
    3a3c:	3f 2e       	mov	r3, r31
			char keyChar = keymap[r * sizeKpd.columns + c];
    3a3e:	58 9c       	mul	r5, r8
    3a40:	40 01       	movw	r8, r0
    3a42:	11 24       	eor	r1, r1
    3a44:	84 0c       	add	r8, r4
    3a46:	91 1c       	adc	r9, r1
			int keyCode = r * sizeKpd.columns + c;
			int idx = findInList (keyCode);
    3a48:	b4 01       	movw	r22, r8
    3a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a4e:	08 df       	rcall	.-496    	; 0x3860 <_ZN6Keypad10findInListEi>
			// Key is already on the list so set its next state.
			if (idx > -1)	{
    3a50:	97 fd       	sbrc	r25, 7
    3a52:	05 c0       	rjmp	.+10     	; 0x3a5e <_ZN6Keypad10updateListEv+0xe0>
				nextKeyState(idx, button);
    3a54:	43 2d       	mov	r20, r3
    3a56:	68 2f       	mov	r22, r24
    3a58:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a5c:	20 c0       	rjmp	.+64     	; 0x3a9e <_ZN6Keypad10updateListEv+0x120>
			}
			// Key is NOT on the list so add it.
			if ((idx == -1) && button) {
    3a5e:	01 96       	adiw	r24, 0x01	; 1
    3a60:	31 f5       	brne	.+76     	; 0x3aae <_ZN6Keypad10updateListEv+0x130>
    3a62:	c0 fe       	sbrs	r12, 0
    3a64:	24 c0       	rjmp	.+72     	; 0x3aae <_ZN6Keypad10updateListEv+0x130>
    3a66:	ed 81       	ldd	r30, Y+5	; 0x05
    3a68:	fe 81       	ldd	r31, Y+6	; 0x06
    3a6a:	60 e0       	ldi	r22, 0x00	; 0
    3a6c:	70 e0       	ldi	r23, 0x00	; 0
				for (byte i=0; i<LIST_MAX; i++) {
					if (key[i].kchar==NO_KEY) {		// Find an empty slot or don't add key to list.
    3a6e:	83 8d       	ldd	r24, Z+27	; 0x1b
    3a70:	81 11       	cpse	r24, r1
    3a72:	17 c0       	rjmp	.+46     	; 0x3aa2 <_ZN6Keypad10updateListEv+0x124>

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
		for (byte c=0; c<sizeKpd.columns; c++) {
			boolean button = bitRead(bitMap[r],c);
			char keyChar = keymap[r * sizeKpd.columns + c];
    3a74:	d3 01       	movw	r26, r6
    3a76:	ed 91       	ld	r30, X+
    3a78:	fc 91       	ld	r31, X
    3a7a:	e8 0d       	add	r30, r8
    3a7c:	f9 1d       	adc	r31, r9
    3a7e:	80 81       	ld	r24, Z
			}
			// Key is NOT on the list so add it.
			if ((idx == -1) && button) {
				for (byte i=0; i<LIST_MAX; i++) {
					if (key[i].kchar==NO_KEY) {		// Find an empty slot or don't add key to list.
						key[i].kchar = keyChar;
    3a80:	26 9e       	mul	r2, r22
    3a82:	f0 01       	movw	r30, r0
    3a84:	27 9e       	mul	r2, r23
    3a86:	f0 0d       	add	r31, r0
    3a88:	11 24       	eor	r1, r1
    3a8a:	2d 81       	ldd	r18, Y+5	; 0x05
    3a8c:	3e 81       	ldd	r19, Y+6	; 0x06
    3a8e:	e2 0f       	add	r30, r18
    3a90:	f3 1f       	adc	r31, r19
    3a92:	83 8f       	std	Z+27, r24	; 0x1b
						key[i].kcode = keyCode;
    3a94:	95 8e       	std	Z+29, r9	; 0x1d
    3a96:	84 8e       	std	Z+28, r8	; 0x1c
						key[i].kstate = IDLE;		// Keys NOT on the list have an initial state of IDLE.
    3a98:	16 8e       	std	Z+30, r1	; 0x1e
						nextKeyState (i, button);
    3a9a:	43 2d       	mov	r20, r3
    3a9c:	c9 01       	movw	r24, r18
    3a9e:	13 df       	rcall	.-474    	; 0x38c6 <_ZN6Keypad12nextKeyStateEhb>
						break;	// Don't fill all the empty slots with the same key.
    3aa0:	06 c0       	rjmp	.+12     	; 0x3aae <_ZN6Keypad10updateListEv+0x130>
    3aa2:	6f 5f       	subi	r22, 0xFF	; 255
    3aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    3aa6:	35 96       	adiw	r30, 0x05	; 5
			if (idx > -1)	{
				nextKeyState(idx, button);
			}
			// Key is NOT on the list so add it.
			if ((idx == -1) && button) {
				for (byte i=0; i<LIST_MAX; i++) {
    3aa8:	6a 30       	cpi	r22, 0x0A	; 10
    3aaa:	71 05       	cpc	r23, r1
    3aac:	01 f7       	brne	.-64     	; 0x3a6e <_ZN6Keypad10updateListEv+0xf0>
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
		for (byte c=0; c<sizeKpd.columns; c++) {
    3aae:	43 94       	inc	r4
    3ab0:	b4 cf       	rjmp	.-152    	; 0x3a1a <_ZN6Keypad10updateListEv+0x9c>
			key[i].stateChanged = false;
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
    3ab2:	53 94       	inc	r5
    3ab4:	a3 cf       	rjmp	.-186    	; 0x39fc <_ZN6Keypad10updateListEv+0x7e>
    3ab6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// Report if the user changed the state of any key.
	for (byte i=0; i<LIST_MAX; i++) {
		if (key[i].stateChanged) anyActivity = true;
    3ab8:	d7 01       	movw	r26, r14
    3aba:	5f 96       	adiw	r26, 0x1f	; 31
    3abc:	9c 91       	ld	r25, X
    3abe:	91 11       	cpse	r25, r1
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	b5 e0       	ldi	r27, 0x05	; 5
    3ac4:	eb 0e       	add	r14, r27
    3ac6:	f1 1c       	adc	r15, r1
			}
		}
	}

	// Report if the user changed the state of any key.
	for (byte i=0; i<LIST_MAX; i++) {
    3ac8:	ae 14       	cp	r10, r14
    3aca:	bf 04       	cpc	r11, r15
    3acc:	a9 f7       	brne	.-22     	; 0x3ab8 <_ZN6Keypad10updateListEv+0x13a>
		if (key[i].stateChanged) anyActivity = true;
	}

	return anyActivity;
}
    3ace:	26 96       	adiw	r28, 0x06	; 6
    3ad0:	0f b6       	in	r0, 0x3f	; 63
    3ad2:	f8 94       	cli
    3ad4:	de bf       	out	0x3e, r29	; 62
    3ad6:	0f be       	out	0x3f, r0	; 63
    3ad8:	cd bf       	out	0x3d, r28	; 61
    3ada:	df 91       	pop	r29
    3adc:	cf 91       	pop	r28
    3ade:	1f 91       	pop	r17
    3ae0:	0f 91       	pop	r16
    3ae2:	ff 90       	pop	r15
    3ae4:	ef 90       	pop	r14
    3ae6:	df 90       	pop	r13
    3ae8:	cf 90       	pop	r12
    3aea:	bf 90       	pop	r11
    3aec:	af 90       	pop	r10
    3aee:	9f 90       	pop	r9
    3af0:	8f 90       	pop	r8
    3af2:	7f 90       	pop	r7
    3af4:	6f 90       	pop	r6
    3af6:	5f 90       	pop	r5
    3af8:	4f 90       	pop	r4
    3afa:	3f 90       	pop	r3
    3afc:	2f 90       	pop	r2
    3afe:	08 95       	ret

00003b00 <_ZN6Keypad7getKeysEv>:

	return NO_KEY;
}

// Populate the key list.
bool Keypad::getKeys() {
    3b00:	cf 92       	push	r12
    3b02:	df 92       	push	r13
    3b04:	ef 92       	push	r14
    3b06:	ff 92       	push	r15
    3b08:	0f 93       	push	r16
    3b0a:	1f 93       	push	r17
    3b0c:	cf 93       	push	r28
    3b0e:	df 93       	push	r29
    3b10:	ec 01       	movw	r28, r24
	bool keyActivity = false;

	// Limit how often the keypad is scanned. This makes the loop() run 10 times as fast.
	if ( (millis()-startTime)>debounceTime ) {
    3b12:	0e 94 49 35 	call	0x6a92	; 0x6a92 <millis>
    3b16:	8e 01       	movw	r16, r28
    3b18:	0f 5a       	subi	r16, 0xAF	; 175
    3b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1c:	f8 01       	movw	r30, r16
    3b1e:	c0 80       	ld	r12, Z
    3b20:	d1 80       	ldd	r13, Z+1	; 0x01
    3b22:	e2 80       	ldd	r14, Z+2	; 0x02
    3b24:	f3 80       	ldd	r15, Z+3	; 0x03
    3b26:	ab 01       	movw	r20, r22
    3b28:	bc 01       	movw	r22, r24
    3b2a:	4c 19       	sub	r20, r12
    3b2c:	5d 09       	sbc	r21, r13
    3b2e:	6e 09       	sbc	r22, r14
    3b30:	7f 09       	sbc	r23, r15
    3b32:	3c 96       	adiw	r30, 0x0c	; 12
    3b34:	80 81       	ld	r24, Z
    3b36:	91 81       	ldd	r25, Z+1	; 0x01
    3b38:	a0 e0       	ldi	r26, 0x00	; 0
    3b3a:	b0 e0       	ldi	r27, 0x00	; 0
    3b3c:	84 17       	cp	r24, r20
    3b3e:	95 07       	cpc	r25, r21
    3b40:	a6 07       	cpc	r26, r22
    3b42:	b7 07       	cpc	r27, r23
    3b44:	68 f4       	brcc	.+26     	; 0x3b60 <_ZN6Keypad7getKeysEv+0x60>
		scanKeys();
    3b46:	ce 01       	movw	r24, r28
    3b48:	91 dd       	rcall	.-1246   	; 0x366c <_ZN6Keypad8scanKeysEv>
		keyActivity = updateList();
    3b4a:	ce 01       	movw	r24, r28
    3b4c:	18 df       	rcall	.-464    	; 0x397e <_ZN6Keypad10updateListEv>
    3b4e:	c8 2f       	mov	r28, r24
		startTime = millis();
    3b50:	0e 94 49 35 	call	0x6a92	; 0x6a92 <millis>
    3b54:	f8 01       	movw	r30, r16
    3b56:	60 83       	st	Z, r22
    3b58:	71 83       	std	Z+1, r23	; 0x01
    3b5a:	82 83       	std	Z+2, r24	; 0x02
    3b5c:	93 83       	std	Z+3, r25	; 0x03
    3b5e:	01 c0       	rjmp	.+2      	; 0x3b62 <_ZN6Keypad7getKeysEv+0x62>
	return NO_KEY;
}

// Populate the key list.
bool Keypad::getKeys() {
	bool keyActivity = false;
    3b60:	c0 e0       	ldi	r28, 0x00	; 0
		keyActivity = updateList();
		startTime = millis();
	}

	return keyActivity;
}
    3b62:	8c 2f       	mov	r24, r28
    3b64:	df 91       	pop	r29
    3b66:	cf 91       	pop	r28
    3b68:	1f 91       	pop	r17
    3b6a:	0f 91       	pop	r16
    3b6c:	ff 90       	pop	r15
    3b6e:	ef 90       	pop	r14
    3b70:	df 90       	pop	r13
    3b72:	cf 90       	pop	r12
    3b74:	08 95       	ret

00003b76 <_ZN6Keypad6getKeyEv>:
void Keypad::begin(char *userKeymap) {
    keymap = userKeymap;
}

// Returns a single key only. Retained for backwards compatibility.
char Keypad::getKey() {
    3b76:	0f 93       	push	r16
    3b78:	1f 93       	push	r17
    3b7a:	cf 93       	push	r28
    3b7c:	df 93       	push	r29
    3b7e:	ec 01       	movw	r28, r24
	single_key = true;
    3b80:	8c 01       	movw	r16, r24
    3b82:	0f 59       	subi	r16, 0x9F	; 159
    3b84:	1f 4f       	sbci	r17, 0xFF	; 255
    3b86:	81 e0       	ldi	r24, 0x01	; 1
    3b88:	f8 01       	movw	r30, r16
    3b8a:	80 83       	st	Z, r24

	if (getKeys() && key[0].stateChanged && (key[0].kstate==PRESSED))
    3b8c:	ce 01       	movw	r24, r28
    3b8e:	b8 df       	rcall	.-144    	; 0x3b00 <_ZN6Keypad7getKeysEv>
    3b90:	88 23       	and	r24, r24
    3b92:	41 f0       	breq	.+16     	; 0x3ba4 <_ZN6Keypad6getKeyEv+0x2e>
    3b94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b96:	88 23       	and	r24, r24
    3b98:	29 f0       	breq	.+10     	; 0x3ba4 <_ZN6Keypad6getKeyEv+0x2e>
    3b9a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3b9c:	81 30       	cpi	r24, 0x01	; 1
    3b9e:	11 f4       	brne	.+4      	; 0x3ba4 <_ZN6Keypad6getKeyEv+0x2e>
		return key[0].kchar;
    3ba0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ba2:	03 c0       	rjmp	.+6      	; 0x3baa <_ZN6Keypad6getKeyEv+0x34>
	
	single_key = false;
    3ba4:	f8 01       	movw	r30, r16
    3ba6:	10 82       	st	Z, r1

	return NO_KEY;
    3ba8:	80 e0       	ldi	r24, 0x00	; 0
}
    3baa:	df 91       	pop	r29
    3bac:	cf 91       	pop	r28
    3bae:	1f 91       	pop	r17
    3bb0:	0f 91       	pop	r16
    3bb2:	08 95       	ret

00003bb4 <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    3bb4:	cf 93       	push	r28
    3bb6:	df 93       	push	r29
    3bb8:	ec 01       	movw	r28, r24
    3bba:	60 e0       	ldi	r22, 0x00	; 0
    3bbc:	8e 81       	ldd	r24, Y+6	; 0x06
    3bbe:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    3bc2:	81 e0       	ldi	r24, 0x01	; 1
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <delayMicroseconds>
    3bca:	61 e0       	ldi	r22, 0x01	; 1
    3bcc:	8e 81       	ldd	r24, Y+6	; 0x06
    3bce:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    3bd2:	81 e0       	ldi	r24, 0x01	; 1
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <delayMicroseconds>
    3bda:	60 e0       	ldi	r22, 0x00	; 0
    3bdc:	8e 81       	ldd	r24, Y+6	; 0x06
    3bde:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    3be2:	84 e6       	ldi	r24, 0x64	; 100
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	df 91       	pop	r29
    3be8:	cf 91       	pop	r28
    3bea:	0c 94 b3 35 	jmp	0x6b66	; 0x6b66 <delayMicroseconds>

00003bee <_ZN13LiquidCrystal10write4bitsEh>:
    3bee:	cf 92       	push	r12
    3bf0:	df 92       	push	r13
    3bf2:	ef 92       	push	r14
    3bf4:	ff 92       	push	r15
    3bf6:	0f 93       	push	r16
    3bf8:	1f 93       	push	r17
    3bfa:	cf 93       	push	r28
    3bfc:	df 93       	push	r29
    3bfe:	6c 01       	movw	r12, r24
    3c00:	7c 01       	movw	r14, r24
    3c02:	87 e0       	ldi	r24, 0x07	; 7
    3c04:	e8 0e       	add	r14, r24
    3c06:	f1 1c       	adc	r15, r1
    3c08:	c0 e0       	ldi	r28, 0x00	; 0
    3c0a:	d0 e0       	ldi	r29, 0x00	; 0
    3c0c:	06 2f       	mov	r16, r22
    3c0e:	10 e0       	ldi	r17, 0x00	; 0
    3c10:	b8 01       	movw	r22, r16
    3c12:	0c 2e       	mov	r0, r28
    3c14:	02 c0       	rjmp	.+4      	; 0x3c1a <_ZN13LiquidCrystal10write4bitsEh+0x2c>
    3c16:	75 95       	asr	r23
    3c18:	67 95       	ror	r22
    3c1a:	0a 94       	dec	r0
    3c1c:	e2 f7       	brpl	.-8      	; 0x3c16 <_ZN13LiquidCrystal10write4bitsEh+0x28>
    3c1e:	61 70       	andi	r22, 0x01	; 1
    3c20:	f7 01       	movw	r30, r14
    3c22:	81 91       	ld	r24, Z+
    3c24:	7f 01       	movw	r14, r30
    3c26:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    3c2a:	21 96       	adiw	r28, 0x01	; 1
    3c2c:	c4 30       	cpi	r28, 0x04	; 4
    3c2e:	d1 05       	cpc	r29, r1
    3c30:	79 f7       	brne	.-34     	; 0x3c10 <_ZN13LiquidCrystal10write4bitsEh+0x22>
    3c32:	c6 01       	movw	r24, r12
    3c34:	df 91       	pop	r29
    3c36:	cf 91       	pop	r28
    3c38:	1f 91       	pop	r17
    3c3a:	0f 91       	pop	r16
    3c3c:	ff 90       	pop	r15
    3c3e:	ef 90       	pop	r14
    3c40:	df 90       	pop	r13
    3c42:	cf 90       	pop	r12
    3c44:	b7 cf       	rjmp	.-146    	; 0x3bb4 <_ZN13LiquidCrystal11pulseEnableEv>

00003c46 <_ZN13LiquidCrystal10write8bitsEh>:
    3c46:	cf 92       	push	r12
    3c48:	df 92       	push	r13
    3c4a:	ef 92       	push	r14
    3c4c:	ff 92       	push	r15
    3c4e:	0f 93       	push	r16
    3c50:	1f 93       	push	r17
    3c52:	cf 93       	push	r28
    3c54:	df 93       	push	r29
    3c56:	6c 01       	movw	r12, r24
    3c58:	7c 01       	movw	r14, r24
    3c5a:	87 e0       	ldi	r24, 0x07	; 7
    3c5c:	e8 0e       	add	r14, r24
    3c5e:	f1 1c       	adc	r15, r1
    3c60:	c0 e0       	ldi	r28, 0x00	; 0
    3c62:	d0 e0       	ldi	r29, 0x00	; 0
    3c64:	06 2f       	mov	r16, r22
    3c66:	10 e0       	ldi	r17, 0x00	; 0
    3c68:	b8 01       	movw	r22, r16
    3c6a:	0c 2e       	mov	r0, r28
    3c6c:	02 c0       	rjmp	.+4      	; 0x3c72 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
    3c6e:	75 95       	asr	r23
    3c70:	67 95       	ror	r22
    3c72:	0a 94       	dec	r0
    3c74:	e2 f7       	brpl	.-8      	; 0x3c6e <_ZN13LiquidCrystal10write8bitsEh+0x28>
    3c76:	61 70       	andi	r22, 0x01	; 1
    3c78:	f7 01       	movw	r30, r14
    3c7a:	81 91       	ld	r24, Z+
    3c7c:	7f 01       	movw	r14, r30
    3c7e:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    3c82:	21 96       	adiw	r28, 0x01	; 1
    3c84:	c8 30       	cpi	r28, 0x08	; 8
    3c86:	d1 05       	cpc	r29, r1
    3c88:	79 f7       	brne	.-34     	; 0x3c68 <_ZN13LiquidCrystal10write8bitsEh+0x22>
    3c8a:	c6 01       	movw	r24, r12
    3c8c:	df 91       	pop	r29
    3c8e:	cf 91       	pop	r28
    3c90:	1f 91       	pop	r17
    3c92:	0f 91       	pop	r16
    3c94:	ff 90       	pop	r15
    3c96:	ef 90       	pop	r14
    3c98:	df 90       	pop	r13
    3c9a:	cf 90       	pop	r12
    3c9c:	8b cf       	rjmp	.-234    	; 0x3bb4 <_ZN13LiquidCrystal11pulseEnableEv>

00003c9e <_ZN13LiquidCrystal4sendEhh>:
    3c9e:	1f 93       	push	r17
    3ca0:	cf 93       	push	r28
    3ca2:	df 93       	push	r29
    3ca4:	ec 01       	movw	r28, r24
    3ca6:	16 2f       	mov	r17, r22
    3ca8:	64 2f       	mov	r22, r20
    3caa:	8c 81       	ldd	r24, Y+4	; 0x04
    3cac:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    3cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb2:	8f 3f       	cpi	r24, 0xFF	; 255
    3cb4:	19 f0       	breq	.+6      	; 0x3cbc <_ZN13LiquidCrystal4sendEhh+0x1e>
    3cb6:	60 e0       	ldi	r22, 0x00	; 0
    3cb8:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    3cbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cbe:	61 2f       	mov	r22, r17
    3cc0:	84 ff       	sbrs	r24, 4
    3cc2:	05 c0       	rjmp	.+10     	; 0x3cce <_ZN13LiquidCrystal4sendEhh+0x30>
    3cc4:	ce 01       	movw	r24, r28
    3cc6:	df 91       	pop	r29
    3cc8:	cf 91       	pop	r28
    3cca:	1f 91       	pop	r17
    3ccc:	bc cf       	rjmp	.-136    	; 0x3c46 <_ZN13LiquidCrystal10write8bitsEh>
    3cce:	70 e0       	ldi	r23, 0x00	; 0
    3cd0:	84 e0       	ldi	r24, 0x04	; 4
    3cd2:	75 95       	asr	r23
    3cd4:	67 95       	ror	r22
    3cd6:	8a 95       	dec	r24
    3cd8:	e1 f7       	brne	.-8      	; 0x3cd2 <_ZN13LiquidCrystal4sendEhh+0x34>
    3cda:	ce 01       	movw	r24, r28
    3cdc:	88 df       	rcall	.-240    	; 0x3bee <_ZN13LiquidCrystal10write4bitsEh>
    3cde:	61 2f       	mov	r22, r17
    3ce0:	ce 01       	movw	r24, r28
    3ce2:	df 91       	pop	r29
    3ce4:	cf 91       	pop	r28
    3ce6:	1f 91       	pop	r17
    3ce8:	82 cf       	rjmp	.-252    	; 0x3bee <_ZN13LiquidCrystal10write4bitsEh>

00003cea <_ZN13LiquidCrystal7commandEh>:
    3cea:	40 e0       	ldi	r20, 0x00	; 0
    3cec:	d8 cf       	rjmp	.-80     	; 0x3c9e <_ZN13LiquidCrystal4sendEhh>

00003cee <_ZN13LiquidCrystal5clearEv>:
    3cee:	61 e0       	ldi	r22, 0x01	; 1
    3cf0:	fc df       	rcall	.-8      	; 0x3cea <_ZN13LiquidCrystal7commandEh>
    3cf2:	80 ed       	ldi	r24, 0xD0	; 208
    3cf4:	97 e0       	ldi	r25, 0x07	; 7
    3cf6:	0c 94 b3 35 	jmp	0x6b66	; 0x6b66 <delayMicroseconds>

00003cfa <_ZN13LiquidCrystal9setCursorEhh>:
    3cfa:	fc 01       	movw	r30, r24
    3cfc:	44 30       	cpi	r20, 0x04	; 4
    3cfe:	08 f0       	brcs	.+2      	; 0x3d02 <_ZN13LiquidCrystal9setCursorEhh+0x8>
    3d00:	43 e0       	ldi	r20, 0x03	; 3
    3d02:	83 89       	ldd	r24, Z+19	; 0x13
    3d04:	48 17       	cp	r20, r24
    3d06:	10 f0       	brcs	.+4      	; 0x3d0c <_ZN13LiquidCrystal9setCursorEhh+0x12>
    3d08:	4f ef       	ldi	r20, 0xFF	; 255
    3d0a:	48 0f       	add	r20, r24
    3d0c:	df 01       	movw	r26, r30
    3d0e:	a4 0f       	add	r26, r20
    3d10:	b1 1d       	adc	r27, r1
    3d12:	54 96       	adiw	r26, 0x14	; 20
    3d14:	9c 91       	ld	r25, X
    3d16:	69 0f       	add	r22, r25
    3d18:	60 68       	ori	r22, 0x80	; 128
    3d1a:	cf 01       	movw	r24, r30
    3d1c:	e6 cf       	rjmp	.-52     	; 0x3cea <_ZN13LiquidCrystal7commandEh>

00003d1e <_ZN13LiquidCrystal7displayEv>:
    3d1e:	fc 01       	movw	r30, r24
    3d20:	60 89       	ldd	r22, Z+16	; 0x10
    3d22:	26 2f       	mov	r18, r22
    3d24:	24 60       	ori	r18, 0x04	; 4
    3d26:	20 8b       	std	Z+16, r18	; 0x10
    3d28:	6c 60       	ori	r22, 0x0C	; 12
    3d2a:	df cf       	rjmp	.-66     	; 0x3cea <_ZN13LiquidCrystal7commandEh>

00003d2c <_ZN13LiquidCrystal5beginEhhh>:
    3d2c:	ef 92       	push	r14
    3d2e:	ff 92       	push	r15
    3d30:	0f 93       	push	r16
    3d32:	1f 93       	push	r17
    3d34:	cf 93       	push	r28
    3d36:	df 93       	push	r29
    3d38:	ec 01       	movw	r28, r24
    3d3a:	42 30       	cpi	r20, 0x02	; 2
    3d3c:	18 f0       	brcs	.+6      	; 0x3d44 <_ZN13LiquidCrystal5beginEhhh+0x18>
    3d3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d40:	88 60       	ori	r24, 0x08	; 8
    3d42:	8f 87       	std	Y+15, r24	; 0x0f
    3d44:	4b 8b       	std	Y+19, r20	; 0x13
    3d46:	1c 8a       	std	Y+20, r1	; 0x14
    3d48:	80 e4       	ldi	r24, 0x40	; 64
    3d4a:	8d 8b       	std	Y+21, r24	; 0x15
    3d4c:	6e 8b       	std	Y+22, r22	; 0x16
    3d4e:	70 e0       	ldi	r23, 0x00	; 0
    3d50:	60 5c       	subi	r22, 0xC0	; 192
    3d52:	7f 4f       	sbci	r23, 0xFF	; 255
    3d54:	6f 8b       	std	Y+23, r22	; 0x17
    3d56:	22 23       	and	r18, r18
    3d58:	29 f0       	breq	.+10     	; 0x3d64 <_ZN13LiquidCrystal5beginEhhh+0x38>
    3d5a:	41 30       	cpi	r20, 0x01	; 1
    3d5c:	19 f4       	brne	.+6      	; 0x3d64 <_ZN13LiquidCrystal5beginEhhh+0x38>
    3d5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d60:	84 60       	ori	r24, 0x04	; 4
    3d62:	8f 87       	std	Y+15, r24	; 0x0f
    3d64:	61 e0       	ldi	r22, 0x01	; 1
    3d66:	8c 81       	ldd	r24, Y+4	; 0x04
    3d68:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
    3d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d6e:	8f 3f       	cpi	r24, 0xFF	; 255
    3d70:	19 f0       	breq	.+6      	; 0x3d78 <_ZN13LiquidCrystal5beginEhhh+0x4c>
    3d72:	61 e0       	ldi	r22, 0x01	; 1
    3d74:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
    3d78:	61 e0       	ldi	r22, 0x01	; 1
    3d7a:	8e 81       	ldd	r24, Y+6	; 0x06
    3d7c:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
    3d80:	7e 01       	movw	r14, r28
    3d82:	87 e0       	ldi	r24, 0x07	; 7
    3d84:	e8 0e       	add	r14, r24
    3d86:	f1 1c       	adc	r15, r1
    3d88:	00 e0       	ldi	r16, 0x00	; 0
    3d8a:	10 e0       	ldi	r17, 0x00	; 0
    3d8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d8e:	84 fd       	sbrc	r24, 4
    3d90:	03 c0       	rjmp	.+6      	; 0x3d98 <_ZN13LiquidCrystal5beginEhhh+0x6c>
    3d92:	84 e0       	ldi	r24, 0x04	; 4
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	02 c0       	rjmp	.+4      	; 0x3d9c <_ZN13LiquidCrystal5beginEhhh+0x70>
    3d98:	88 e0       	ldi	r24, 0x08	; 8
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	08 17       	cp	r16, r24
    3d9e:	19 07       	cpc	r17, r25
    3da0:	4c f4       	brge	.+18     	; 0x3db4 <_ZN13LiquidCrystal5beginEhhh+0x88>
    3da2:	61 e0       	ldi	r22, 0x01	; 1
    3da4:	f7 01       	movw	r30, r14
    3da6:	81 91       	ld	r24, Z+
    3da8:	7f 01       	movw	r14, r30
    3daa:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
    3dae:	0f 5f       	subi	r16, 0xFF	; 255
    3db0:	1f 4f       	sbci	r17, 0xFF	; 255
    3db2:	ec cf       	rjmp	.-40     	; 0x3d8c <_ZN13LiquidCrystal5beginEhhh+0x60>
    3db4:	80 e5       	ldi	r24, 0x50	; 80
    3db6:	93 ec       	ldi	r25, 0xC3	; 195
    3db8:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <delayMicroseconds>
    3dbc:	60 e0       	ldi	r22, 0x00	; 0
    3dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc0:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    3dc4:	60 e0       	ldi	r22, 0x00	; 0
    3dc6:	8e 81       	ldd	r24, Y+6	; 0x06
    3dc8:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    3dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    3dce:	8f 3f       	cpi	r24, 0xFF	; 255
    3dd0:	19 f0       	breq	.+6      	; 0x3dd8 <_ZN13LiquidCrystal5beginEhhh+0xac>
    3dd2:	60 e0       	ldi	r22, 0x00	; 0
    3dd4:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    3dd8:	6f 85       	ldd	r22, Y+15	; 0x0f
    3dda:	64 fd       	sbrc	r22, 4
    3ddc:	19 c0       	rjmp	.+50     	; 0x3e10 <_ZN13LiquidCrystal5beginEhhh+0xe4>
    3dde:	63 e0       	ldi	r22, 0x03	; 3
    3de0:	ce 01       	movw	r24, r28
    3de2:	05 df       	rcall	.-502    	; 0x3bee <_ZN13LiquidCrystal10write4bitsEh>
    3de4:	84 e9       	ldi	r24, 0x94	; 148
    3de6:	91 e1       	ldi	r25, 0x11	; 17
    3de8:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <delayMicroseconds>
    3dec:	63 e0       	ldi	r22, 0x03	; 3
    3dee:	ce 01       	movw	r24, r28
    3df0:	fe de       	rcall	.-516    	; 0x3bee <_ZN13LiquidCrystal10write4bitsEh>
    3df2:	84 e9       	ldi	r24, 0x94	; 148
    3df4:	91 e1       	ldi	r25, 0x11	; 17
    3df6:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <delayMicroseconds>
    3dfa:	63 e0       	ldi	r22, 0x03	; 3
    3dfc:	ce 01       	movw	r24, r28
    3dfe:	f7 de       	rcall	.-530    	; 0x3bee <_ZN13LiquidCrystal10write4bitsEh>
    3e00:	86 e9       	ldi	r24, 0x96	; 150
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <delayMicroseconds>
    3e08:	62 e0       	ldi	r22, 0x02	; 2
    3e0a:	ce 01       	movw	r24, r28
    3e0c:	f0 de       	rcall	.-544    	; 0x3bee <_ZN13LiquidCrystal10write4bitsEh>
    3e0e:	13 c0       	rjmp	.+38     	; 0x3e36 <_ZN13LiquidCrystal5beginEhhh+0x10a>
    3e10:	60 62       	ori	r22, 0x20	; 32
    3e12:	ce 01       	movw	r24, r28
    3e14:	6a df       	rcall	.-300    	; 0x3cea <_ZN13LiquidCrystal7commandEh>
    3e16:	84 e9       	ldi	r24, 0x94	; 148
    3e18:	91 e1       	ldi	r25, 0x11	; 17
    3e1a:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <delayMicroseconds>
    3e1e:	6f 85       	ldd	r22, Y+15	; 0x0f
    3e20:	60 62       	ori	r22, 0x20	; 32
    3e22:	ce 01       	movw	r24, r28
    3e24:	62 df       	rcall	.-316    	; 0x3cea <_ZN13LiquidCrystal7commandEh>
    3e26:	86 e9       	ldi	r24, 0x96	; 150
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <delayMicroseconds>
    3e2e:	6f 85       	ldd	r22, Y+15	; 0x0f
    3e30:	60 62       	ori	r22, 0x20	; 32
    3e32:	ce 01       	movw	r24, r28
    3e34:	5a df       	rcall	.-332    	; 0x3cea <_ZN13LiquidCrystal7commandEh>
    3e36:	6f 85       	ldd	r22, Y+15	; 0x0f
    3e38:	60 62       	ori	r22, 0x20	; 32
    3e3a:	ce 01       	movw	r24, r28
    3e3c:	56 df       	rcall	.-340    	; 0x3cea <_ZN13LiquidCrystal7commandEh>
    3e3e:	84 e0       	ldi	r24, 0x04	; 4
    3e40:	88 8b       	std	Y+16, r24	; 0x10
    3e42:	ce 01       	movw	r24, r28
    3e44:	6c df       	rcall	.-296    	; 0x3d1e <_ZN13LiquidCrystal7displayEv>
    3e46:	ce 01       	movw	r24, r28
    3e48:	52 df       	rcall	.-348    	; 0x3cee <_ZN13LiquidCrystal5clearEv>
    3e4a:	82 e0       	ldi	r24, 0x02	; 2
    3e4c:	89 8b       	std	Y+17, r24	; 0x11
    3e4e:	66 e0       	ldi	r22, 0x06	; 6
    3e50:	ce 01       	movw	r24, r28
    3e52:	df 91       	pop	r29
    3e54:	cf 91       	pop	r28
    3e56:	1f 91       	pop	r17
    3e58:	0f 91       	pop	r16
    3e5a:	ff 90       	pop	r15
    3e5c:	ef 90       	pop	r14
    3e5e:	45 cf       	rjmp	.-374    	; 0x3cea <_ZN13LiquidCrystal7commandEh>

00003e60 <_ZN13LiquidCrystalC1Ehhhhhh>:
    3e60:	cf 92       	push	r12
    3e62:	ef 92       	push	r14
    3e64:	0f 93       	push	r16
    3e66:	fc 01       	movw	r30, r24
    3e68:	13 82       	std	Z+3, r1	; 0x03
    3e6a:	12 82       	std	Z+2, r1	; 0x02
    3e6c:	86 e2       	ldi	r24, 0x26	; 38
    3e6e:	93 e0       	ldi	r25, 0x03	; 3
    3e70:	91 83       	std	Z+1, r25	; 0x01
    3e72:	80 83       	st	Z, r24
    3e74:	64 83       	std	Z+4, r22	; 0x04
    3e76:	8f ef       	ldi	r24, 0xFF	; 255
    3e78:	85 83       	std	Z+5, r24	; 0x05
    3e7a:	46 83       	std	Z+6, r20	; 0x06
    3e7c:	27 83       	std	Z+7, r18	; 0x07
    3e7e:	00 87       	std	Z+8, r16	; 0x08
    3e80:	e1 86       	std	Z+9, r14	; 0x09
    3e82:	c2 86       	std	Z+10, r12	; 0x0a
    3e84:	13 86       	std	Z+11, r1	; 0x0b
    3e86:	14 86       	std	Z+12, r1	; 0x0c
    3e88:	15 86       	std	Z+13, r1	; 0x0d
    3e8a:	16 86       	std	Z+14, r1	; 0x0e
    3e8c:	17 86       	std	Z+15, r1	; 0x0f
    3e8e:	20 e0       	ldi	r18, 0x00	; 0
    3e90:	41 e0       	ldi	r20, 0x01	; 1
    3e92:	60 e1       	ldi	r22, 0x10	; 16
    3e94:	cf 01       	movw	r24, r30
    3e96:	0f 91       	pop	r16
    3e98:	ef 90       	pop	r14
    3e9a:	cf 90       	pop	r12
    3e9c:	47 cf       	rjmp	.-370    	; 0x3d2c <_ZN13LiquidCrystal5beginEhhh>

00003e9e <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    3e9e:	41 e0       	ldi	r20, 0x01	; 1
    3ea0:	fe de       	rcall	.-516    	; 0x3c9e <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
    3ea2:	81 e0       	ldi	r24, 0x01	; 1
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	08 95       	ret

00003ea8 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
	}
	if (cmdBuffer[0] != MF_ACK) {
		return STATUS_MIFARE_NACK;
	}
	return STATUS_OK;
} // End PCD_MIFARE_Transceive()
    3ea8:	bc 01       	movw	r22, r24
    3eaa:	6e 5f       	subi	r22, 0xFE	; 254
    3eac:	7f 4f       	sbci	r23, 0xFF	; 255
    3eae:	dc 01       	movw	r26, r24
    3eb0:	ed 91       	ld	r30, X+
    3eb2:	fc 91       	ld	r31, X
    3eb4:	01 90       	ld	r0, Z+
    3eb6:	f0 81       	ld	r31, Z
    3eb8:	e0 2d       	mov	r30, r0
    3eba:	40 e0       	ldi	r20, 0x00	; 0
    3ebc:	19 95       	eicall
    3ebe:	91 e0       	ldi	r25, 0x01	; 1
    3ec0:	81 11       	cpse	r24, r1
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	89 2f       	mov	r24, r25
    3ec6:	08 95       	ret

00003ec8 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8>:
    3ec8:	af 92       	push	r10
    3eca:	bf 92       	push	r11
    3ecc:	cf 92       	push	r12
    3ece:	df 92       	push	r13
    3ed0:	ef 92       	push	r14
    3ed2:	ff 92       	push	r15
    3ed4:	0f 93       	push	r16
    3ed6:	1f 93       	push	r17
    3ed8:	cf 93       	push	r28
    3eda:	df 93       	push	r29
    3edc:	6c 01       	movw	r12, r24
    3ede:	a4 2e       	mov	r10, r20
    3ee0:	79 01       	movw	r14, r18
    3ee2:	60 68       	ori	r22, 0x80	; 128
    3ee4:	b6 2e       	mov	r11, r22
    3ee6:	80 e5       	ldi	r24, 0x50	; 80
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN8SPIClass16beginTransactionE11SPISettings>
    3eee:	60 e0       	ldi	r22, 0x00	; 0
    3ef0:	f6 01       	movw	r30, r12
    3ef2:	86 85       	ldd	r24, Z+14	; 0x0e
    3ef4:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    3ef8:	aa 94       	dec	r10
    3efa:	8b 2d       	mov	r24, r11
    3efc:	0e 94 5e 12 	call	0x24bc	; 0x24bc <_ZN8SPIClass8transferEh>
    3f00:	00 23       	and	r16, r16
    3f02:	a1 f0       	breq	.+40     	; 0x3f2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x64>
    3f04:	cf ef       	ldi	r28, 0xFF	; 255
    3f06:	d0 e0       	ldi	r29, 0x00	; 0
    3f08:	01 c0       	rjmp	.+2      	; 0x3f0c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x44>
    3f0a:	cc 0f       	add	r28, r28
    3f0c:	0a 95       	dec	r16
    3f0e:	ea f7       	brpl	.-6      	; 0x3f0a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x42>
    3f10:	8b 2d       	mov	r24, r11
    3f12:	0e 94 5e 12 	call	0x24bc	; 0x24bc <_ZN8SPIClass8transferEh>
    3f16:	2c 2f       	mov	r18, r28
    3f18:	20 95       	com	r18
    3f1a:	f7 01       	movw	r30, r14
    3f1c:	90 81       	ld	r25, Z
    3f1e:	92 23       	and	r25, r18
    3f20:	8c 23       	and	r24, r28
    3f22:	89 2b       	or	r24, r25
    3f24:	f7 01       	movw	r30, r14
    3f26:	80 83       	st	Z, r24
    3f28:	11 e0       	ldi	r17, 0x01	; 1
    3f2a:	01 c0       	rjmp	.+2      	; 0x3f2e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x66>
    3f2c:	10 e0       	ldi	r17, 0x00	; 0
    3f2e:	81 2f       	mov	r24, r17
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	e7 01       	movw	r28, r14
    3f34:	c8 0f       	add	r28, r24
    3f36:	d9 1f       	adc	r29, r25
    3f38:	1a 15       	cp	r17, r10
    3f3a:	30 f4       	brcc	.+12     	; 0x3f48 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x80>
    3f3c:	8b 2d       	mov	r24, r11
    3f3e:	0e 94 5e 12 	call	0x24bc	; 0x24bc <_ZN8SPIClass8transferEh>
    3f42:	88 83       	st	Y, r24
    3f44:	1f 5f       	subi	r17, 0xFF	; 255
    3f46:	f3 cf       	rjmp	.-26     	; 0x3f2e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x66>
    3f48:	80 e0       	ldi	r24, 0x00	; 0
    3f4a:	0e 94 5e 12 	call	0x24bc	; 0x24bc <_ZN8SPIClass8transferEh>
    3f4e:	88 83       	st	Y, r24
    3f50:	61 e0       	ldi	r22, 0x01	; 1
    3f52:	f6 01       	movw	r30, r12
    3f54:	86 85       	ldd	r24, Z+14	; 0x0e
    3f56:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    3f5a:	df 91       	pop	r29
    3f5c:	cf 91       	pop	r28
    3f5e:	1f 91       	pop	r17
    3f60:	0f 91       	pop	r16
    3f62:	ff 90       	pop	r15
    3f64:	ef 90       	pop	r14
    3f66:	df 90       	pop	r13
    3f68:	cf 90       	pop	r12
    3f6a:	bf 90       	pop	r11
    3f6c:	af 90       	pop	r10
    3f6e:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <_ZN8SPIClass14endTransactionEv>

00003f72 <_ZN7MFRC522C1Ehh>:
    3f72:	fc 01       	movw	r30, r24
    3f74:	82 e3       	ldi	r24, 0x32	; 50
    3f76:	93 e0       	ldi	r25, 0x03	; 3
    3f78:	91 83       	std	Z+1, r25	; 0x01
    3f7a:	80 83       	st	Z, r24
    3f7c:	66 87       	std	Z+14, r22	; 0x0e
    3f7e:	47 87       	std	Z+15, r20	; 0x0f
    3f80:	08 95       	ret

00003f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>:
    3f82:	0f 93       	push	r16
    3f84:	1f 93       	push	r17
    3f86:	cf 93       	push	r28
    3f88:	df 93       	push	r29
    3f8a:	ec 01       	movw	r28, r24
    3f8c:	06 2f       	mov	r16, r22
    3f8e:	14 2f       	mov	r17, r20
    3f90:	80 e5       	ldi	r24, 0x50	; 80
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN8SPIClass16beginTransactionE11SPISettings>
    3f98:	60 e0       	ldi	r22, 0x00	; 0
    3f9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f9c:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    3fa0:	80 2f       	mov	r24, r16
    3fa2:	0e 94 5e 12 	call	0x24bc	; 0x24bc <_ZN8SPIClass8transferEh>
    3fa6:	81 2f       	mov	r24, r17
    3fa8:	0e 94 5e 12 	call	0x24bc	; 0x24bc <_ZN8SPIClass8transferEh>
    3fac:	61 e0       	ldi	r22, 0x01	; 1
    3fae:	8e 85       	ldd	r24, Y+14	; 0x0e
    3fb0:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    3fb4:	df 91       	pop	r29
    3fb6:	cf 91       	pop	r28
    3fb8:	1f 91       	pop	r17
    3fba:	0f 91       	pop	r16
    3fbc:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <_ZN8SPIClass14endTransactionEv>

00003fc0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>:
    3fc0:	df 92       	push	r13
    3fc2:	ef 92       	push	r14
    3fc4:	ff 92       	push	r15
    3fc6:	0f 93       	push	r16
    3fc8:	1f 93       	push	r17
    3fca:	cf 93       	push	r28
    3fcc:	df 93       	push	r29
    3fce:	8c 01       	movw	r16, r24
    3fd0:	c6 2f       	mov	r28, r22
    3fd2:	f4 2e       	mov	r15, r20
    3fd4:	d2 2e       	mov	r13, r18
    3fd6:	e3 2e       	mov	r14, r19
    3fd8:	80 e5       	ldi	r24, 0x50	; 80
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN8SPIClass16beginTransactionE11SPISettings>
    3fe0:	60 e0       	ldi	r22, 0x00	; 0
    3fe2:	f8 01       	movw	r30, r16
    3fe4:	86 85       	ldd	r24, Z+14	; 0x0e
    3fe6:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    3fea:	8c 2f       	mov	r24, r28
    3fec:	0e 94 5e 12 	call	0x24bc	; 0x24bc <_ZN8SPIClass8transferEh>
    3ff0:	cd 2d       	mov	r28, r13
    3ff2:	de 2d       	mov	r29, r14
    3ff4:	ce 01       	movw	r24, r28
    3ff6:	8f 0d       	add	r24, r15
    3ff8:	91 1d       	adc	r25, r1
    3ffa:	7c 01       	movw	r14, r24
    3ffc:	ec 16       	cp	r14, r28
    3ffe:	fd 06       	cpc	r15, r29
    4000:	21 f0       	breq	.+8      	; 0x400a <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x4a>
    4002:	89 91       	ld	r24, Y+
    4004:	0e 94 5e 12 	call	0x24bc	; 0x24bc <_ZN8SPIClass8transferEh>
    4008:	f9 cf       	rjmp	.-14     	; 0x3ffc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x3c>
    400a:	61 e0       	ldi	r22, 0x01	; 1
    400c:	f8 01       	movw	r30, r16
    400e:	86 85       	ldd	r24, Z+14	; 0x0e
    4010:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    4014:	df 91       	pop	r29
    4016:	cf 91       	pop	r28
    4018:	1f 91       	pop	r17
    401a:	0f 91       	pop	r16
    401c:	ff 90       	pop	r15
    401e:	ef 90       	pop	r14
    4020:	df 90       	pop	r13
    4022:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <_ZN8SPIClass14endTransactionEv>

00004026 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>:
    4026:	1f 93       	push	r17
    4028:	cf 93       	push	r28
    402a:	df 93       	push	r29
    402c:	ec 01       	movw	r28, r24
    402e:	16 2f       	mov	r17, r22
    4030:	80 e5       	ldi	r24, 0x50	; 80
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4038:	60 e0       	ldi	r22, 0x00	; 0
    403a:	8e 85       	ldd	r24, Y+14	; 0x0e
    403c:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    4040:	81 2f       	mov	r24, r17
    4042:	80 68       	ori	r24, 0x80	; 128
    4044:	0e 94 5e 12 	call	0x24bc	; 0x24bc <_ZN8SPIClass8transferEh>
    4048:	80 e0       	ldi	r24, 0x00	; 0
    404a:	0e 94 5e 12 	call	0x24bc	; 0x24bc <_ZN8SPIClass8transferEh>
    404e:	18 2f       	mov	r17, r24
    4050:	61 e0       	ldi	r22, 0x01	; 1
    4052:	8e 85       	ldd	r24, Y+14	; 0x0e
    4054:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    4058:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN8SPIClass14endTransactionEv>
    405c:	81 2f       	mov	r24, r17
    405e:	df 91       	pop	r29
    4060:	cf 91       	pop	r28
    4062:	1f 91       	pop	r17
    4064:	08 95       	ret

00004066 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>:
    4066:	0f 93       	push	r16
    4068:	41 11       	cpse	r20, r1
    406a:	2e df       	rcall	.-420    	; 0x3ec8 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8>
    406c:	0f 91       	pop	r16
    406e:	08 95       	ret

00004070 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>:
    4070:	0f 93       	push	r16
    4072:	1f 93       	push	r17
    4074:	cf 93       	push	r28
    4076:	df 93       	push	r29
    4078:	8c 01       	movw	r16, r24
    407a:	d6 2f       	mov	r29, r22
    407c:	c4 2f       	mov	r28, r20
    407e:	d3 df       	rcall	.-90     	; 0x4026 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    4080:	48 2f       	mov	r20, r24
    4082:	4c 2b       	or	r20, r28
    4084:	6d 2f       	mov	r22, r29
    4086:	c8 01       	movw	r24, r16
    4088:	df 91       	pop	r29
    408a:	cf 91       	pop	r28
    408c:	1f 91       	pop	r17
    408e:	0f 91       	pop	r16
    4090:	78 cf       	rjmp	.-272    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

00004092 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>:
    4092:	0f 93       	push	r16
    4094:	1f 93       	push	r17
    4096:	cf 93       	push	r28
    4098:	df 93       	push	r29
    409a:	8c 01       	movw	r16, r24
    409c:	d6 2f       	mov	r29, r22
    409e:	c4 2f       	mov	r28, r20
    40a0:	c2 df       	rcall	.-124    	; 0x4026 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    40a2:	c0 95       	com	r28
    40a4:	4c 2f       	mov	r20, r28
    40a6:	48 23       	and	r20, r24
    40a8:	6d 2f       	mov	r22, r29
    40aa:	c8 01       	movw	r24, r16
    40ac:	df 91       	pop	r29
    40ae:	cf 91       	pop	r28
    40b0:	1f 91       	pop	r17
    40b2:	0f 91       	pop	r16
    40b4:	66 cf       	rjmp	.-308    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

000040b6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    40b6:	cf 92       	push	r12
    40b8:	df 92       	push	r13
    40ba:	ef 92       	push	r14
    40bc:	ff 92       	push	r15
    40be:	0f 93       	push	r16
    40c0:	1f 93       	push	r17
    40c2:	cf 93       	push	r28
    40c4:	df 93       	push	r29
    40c6:	ec 01       	movw	r28, r24
    40c8:	6b 01       	movw	r12, r22
    40ca:	f4 2e       	mov	r15, r20
    40cc:	89 01       	movw	r16, r18
    40ce:	40 e0       	ldi	r20, 0x00	; 0
    40d0:	62 e0       	ldi	r22, 0x02	; 2
    40d2:	57 df       	rcall	.-338    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    40d4:	44 e0       	ldi	r20, 0x04	; 4
    40d6:	6a e0       	ldi	r22, 0x0A	; 10
    40d8:	ce 01       	movw	r24, r28
    40da:	53 df       	rcall	.-346    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    40dc:	40 e8       	ldi	r20, 0x80	; 128
    40de:	64 e1       	ldi	r22, 0x14	; 20
    40e0:	ce 01       	movw	r24, r28
    40e2:	4f df       	rcall	.-354    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    40e4:	96 01       	movw	r18, r12
    40e6:	4f 2d       	mov	r20, r15
    40e8:	62 e1       	ldi	r22, 0x12	; 18
    40ea:	ce 01       	movw	r24, r28
    40ec:	69 df       	rcall	.-302    	; 0x3fc0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    40ee:	43 e0       	ldi	r20, 0x03	; 3
    40f0:	62 e0       	ldi	r22, 0x02	; 2
    40f2:	ce 01       	movw	r24, r28
    40f4:	46 df       	rcall	.-372    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    40f6:	0e 94 49 35 	call	0x6a92	; 0x6a92 <millis>
    40fa:	6b 01       	movw	r12, r22
    40fc:	7c 01       	movw	r14, r24
    40fe:	29 e5       	ldi	r18, 0x59	; 89
    4100:	c2 0e       	add	r12, r18
    4102:	d1 1c       	adc	r13, r1
    4104:	e1 1c       	adc	r14, r1
    4106:	f1 1c       	adc	r15, r1
    4108:	6a e0       	ldi	r22, 0x0A	; 10
    410a:	ce 01       	movw	r24, r28
    410c:	8c df       	rcall	.-232    	; 0x4026 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    410e:	82 ff       	sbrs	r24, 2
    4110:	10 c0       	rjmp	.+32     	; 0x4132 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x7c>
    4112:	40 e0       	ldi	r20, 0x00	; 0
    4114:	62 e0       	ldi	r22, 0x02	; 2
    4116:	ce 01       	movw	r24, r28
    4118:	34 df       	rcall	.-408    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    411a:	64 e4       	ldi	r22, 0x44	; 68
    411c:	ce 01       	movw	r24, r28
    411e:	83 df       	rcall	.-250    	; 0x4026 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    4120:	f8 01       	movw	r30, r16
    4122:	80 83       	st	Z, r24
    4124:	62 e4       	ldi	r22, 0x42	; 66
    4126:	ce 01       	movw	r24, r28
    4128:	7e df       	rcall	.-260    	; 0x4026 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    412a:	f8 01       	movw	r30, r16
    412c:	81 83       	std	Z+1, r24	; 0x01
    412e:	80 e0       	ldi	r24, 0x00	; 0
    4130:	0a c0       	rjmp	.+20     	; 0x4146 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x90>
    4132:	0e 94 f2 2e 	call	0x5de4	; 0x5de4 <yield>
    4136:	0e 94 49 35 	call	0x6a92	; 0x6a92 <millis>
    413a:	6c 15       	cp	r22, r12
    413c:	7d 05       	cpc	r23, r13
    413e:	8e 05       	cpc	r24, r14
    4140:	9f 05       	cpc	r25, r15
    4142:	10 f3       	brcs	.-60     	; 0x4108 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x52>
    4144:	83 e0       	ldi	r24, 0x03	; 3
    4146:	df 91       	pop	r29
    4148:	cf 91       	pop	r28
    414a:	1f 91       	pop	r17
    414c:	0f 91       	pop	r16
    414e:	ff 90       	pop	r15
    4150:	ef 90       	pop	r14
    4152:	df 90       	pop	r13
    4154:	cf 90       	pop	r12
    4156:	08 95       	ret

00004158 <_ZN7MFRC5229PCD_ResetEv>:
    4158:	0f 93       	push	r16
    415a:	1f 93       	push	r17
    415c:	cf 93       	push	r28
    415e:	8c 01       	movw	r16, r24
    4160:	4f e0       	ldi	r20, 0x0F	; 15
    4162:	62 e0       	ldi	r22, 0x02	; 2
    4164:	0e df       	rcall	.-484    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4166:	c3 e0       	ldi	r28, 0x03	; 3
    4168:	62 e3       	ldi	r22, 0x32	; 50
    416a:	70 e0       	ldi	r23, 0x00	; 0
    416c:	80 e0       	ldi	r24, 0x00	; 0
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	0e 94 7a 35 	call	0x6af4	; 0x6af4 <delay>
    4174:	62 e0       	ldi	r22, 0x02	; 2
    4176:	c8 01       	movw	r24, r16
    4178:	56 df       	rcall	.-340    	; 0x4026 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    417a:	84 ff       	sbrs	r24, 4
    417c:	02 c0       	rjmp	.+4      	; 0x4182 <_ZN7MFRC5229PCD_ResetEv+0x2a>
    417e:	c1 50       	subi	r28, 0x01	; 1
    4180:	99 f7       	brne	.-26     	; 0x4168 <_ZN7MFRC5229PCD_ResetEv+0x10>
    4182:	cf 91       	pop	r28
    4184:	1f 91       	pop	r17
    4186:	0f 91       	pop	r16
    4188:	08 95       	ret

0000418a <_ZN7MFRC52213PCD_AntennaOnEv>:
    418a:	cf 93       	push	r28
    418c:	df 93       	push	r29
    418e:	ec 01       	movw	r28, r24
    4190:	68 e2       	ldi	r22, 0x28	; 40
    4192:	49 df       	rcall	.-366    	; 0x4026 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    4194:	98 2f       	mov	r25, r24
    4196:	93 70       	andi	r25, 0x03	; 3
    4198:	93 30       	cpi	r25, 0x03	; 3
    419a:	39 f0       	breq	.+14     	; 0x41aa <_ZN7MFRC52213PCD_AntennaOnEv+0x20>
    419c:	48 2f       	mov	r20, r24
    419e:	43 60       	ori	r20, 0x03	; 3
    41a0:	68 e2       	ldi	r22, 0x28	; 40
    41a2:	ce 01       	movw	r24, r28
    41a4:	df 91       	pop	r29
    41a6:	cf 91       	pop	r28
    41a8:	ec ce       	rjmp	.-552    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    41aa:	df 91       	pop	r29
    41ac:	cf 91       	pop	r28
    41ae:	08 95       	ret

000041b0 <_ZN7MFRC5228PCD_InitEv>:
    41b0:	cf 93       	push	r28
    41b2:	df 93       	push	r29
    41b4:	ec 01       	movw	r28, r24
    41b6:	61 e0       	ldi	r22, 0x01	; 1
    41b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    41ba:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
    41be:	61 e0       	ldi	r22, 0x01	; 1
    41c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    41c2:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    41c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    41c8:	8f 3f       	cpi	r24, 0xFF	; 255
    41ca:	09 f4       	brne	.+2      	; 0x41ce <_ZN7MFRC5228PCD_InitEv+0x1e>
    41cc:	47 c0       	rjmp	.+142    	; 0x425c <_ZN7MFRC5228PCD_InitEv+0xac>
    41ce:	60 e0       	ldi	r22, 0x00	; 0
    41d0:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
    41d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    41d6:	0e 94 a5 37 	call	0x6f4a	; 0x6f4a <digitalRead>
    41da:	89 2b       	or	r24, r25
    41dc:	09 f0       	breq	.+2      	; 0x41e0 <_ZN7MFRC5228PCD_InitEv+0x30>
    41de:	3e c0       	rjmp	.+124    	; 0x425c <_ZN7MFRC5228PCD_InitEv+0xac>
    41e0:	61 e0       	ldi	r22, 0x01	; 1
    41e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    41e4:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
    41e8:	60 e0       	ldi	r22, 0x00	; 0
    41ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    41ec:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    41f0:	82 e0       	ldi	r24, 0x02	; 2
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <delayMicroseconds>
    41f8:	61 e0       	ldi	r22, 0x01	; 1
    41fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    41fc:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    4200:	62 e3       	ldi	r22, 0x32	; 50
    4202:	70 e0       	ldi	r23, 0x00	; 0
    4204:	80 e0       	ldi	r24, 0x00	; 0
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	0e 94 7a 35 	call	0x6af4	; 0x6af4 <delay>
    420c:	40 e0       	ldi	r20, 0x00	; 0
    420e:	64 e2       	ldi	r22, 0x24	; 36
    4210:	ce 01       	movw	r24, r28
    4212:	b7 de       	rcall	.-658    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4214:	40 e0       	ldi	r20, 0x00	; 0
    4216:	66 e2       	ldi	r22, 0x26	; 38
    4218:	ce 01       	movw	r24, r28
    421a:	b3 de       	rcall	.-666    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    421c:	46 e2       	ldi	r20, 0x26	; 38
    421e:	68 e4       	ldi	r22, 0x48	; 72
    4220:	ce 01       	movw	r24, r28
    4222:	af de       	rcall	.-674    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4224:	40 e8       	ldi	r20, 0x80	; 128
    4226:	64 e5       	ldi	r22, 0x54	; 84
    4228:	ce 01       	movw	r24, r28
    422a:	ab de       	rcall	.-682    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    422c:	49 ea       	ldi	r20, 0xA9	; 169
    422e:	66 e5       	ldi	r22, 0x56	; 86
    4230:	ce 01       	movw	r24, r28
    4232:	a7 de       	rcall	.-690    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4234:	43 e0       	ldi	r20, 0x03	; 3
    4236:	68 e5       	ldi	r22, 0x58	; 88
    4238:	ce 01       	movw	r24, r28
    423a:	a3 de       	rcall	.-698    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    423c:	48 ee       	ldi	r20, 0xE8	; 232
    423e:	6a e5       	ldi	r22, 0x5A	; 90
    4240:	ce 01       	movw	r24, r28
    4242:	9f de       	rcall	.-706    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4244:	40 e4       	ldi	r20, 0x40	; 64
    4246:	6a e2       	ldi	r22, 0x2A	; 42
    4248:	ce 01       	movw	r24, r28
    424a:	9b de       	rcall	.-714    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    424c:	4d e3       	ldi	r20, 0x3D	; 61
    424e:	62 e2       	ldi	r22, 0x22	; 34
    4250:	ce 01       	movw	r24, r28
    4252:	97 de       	rcall	.-722    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4254:	ce 01       	movw	r24, r28
    4256:	df 91       	pop	r29
    4258:	cf 91       	pop	r28
    425a:	97 cf       	rjmp	.-210    	; 0x418a <_ZN7MFRC52213PCD_AntennaOnEv>
    425c:	ce 01       	movw	r24, r28
    425e:	7c df       	rcall	.-264    	; 0x4158 <_ZN7MFRC5229PCD_ResetEv>
    4260:	d5 cf       	rjmp	.-86     	; 0x420c <_ZN7MFRC5228PCD_InitEv+0x5c>

00004262 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    4262:	2f 92       	push	r2
    4264:	3f 92       	push	r3
    4266:	4f 92       	push	r4
    4268:	5f 92       	push	r5
    426a:	6f 92       	push	r6
    426c:	7f 92       	push	r7
    426e:	8f 92       	push	r8
    4270:	9f 92       	push	r9
    4272:	af 92       	push	r10
    4274:	bf 92       	push	r11
    4276:	cf 92       	push	r12
    4278:	df 92       	push	r13
    427a:	ef 92       	push	r14
    427c:	ff 92       	push	r15
    427e:	0f 93       	push	r16
    4280:	1f 93       	push	r17
    4282:	cf 93       	push	r28
    4284:	df 93       	push	r29
    4286:	1f 92       	push	r1
    4288:	1f 92       	push	r1
    428a:	cd b7       	in	r28, 0x3d	; 61
    428c:	de b7       	in	r29, 0x3e	; 62
    428e:	3c 01       	movw	r6, r24
    4290:	16 2f       	mov	r17, r22
    4292:	94 2e       	mov	r9, r20
    4294:	29 01       	movw	r4, r18
    4296:	a1 14       	cp	r10, r1
    4298:	b1 04       	cpc	r11, r1
    429a:	19 f0       	breq	.+6      	; 0x42a2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x40>
    429c:	f5 01       	movw	r30, r10
    429e:	40 81       	ld	r20, Z
    42a0:	01 c0       	rjmp	.+2      	; 0x42a4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x42>
    42a2:	40 e0       	ldi	r20, 0x00	; 0
    42a4:	34 2e       	mov	r3, r20
    42a6:	f0 e1       	ldi	r31, 0x10	; 16
    42a8:	8f 9e       	mul	r8, r31
    42aa:	30 0c       	add	r3, r0
    42ac:	11 24       	eor	r1, r1
    42ae:	40 e0       	ldi	r20, 0x00	; 0
    42b0:	62 e0       	ldi	r22, 0x02	; 2
    42b2:	c3 01       	movw	r24, r6
    42b4:	66 de       	rcall	.-820    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    42b6:	4f e7       	ldi	r20, 0x7F	; 127
    42b8:	68 e0       	ldi	r22, 0x08	; 8
    42ba:	c3 01       	movw	r24, r6
    42bc:	62 de       	rcall	.-828    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    42be:	40 e8       	ldi	r20, 0x80	; 128
    42c0:	64 e1       	ldi	r22, 0x14	; 20
    42c2:	c3 01       	movw	r24, r6
    42c4:	5e de       	rcall	.-836    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    42c6:	92 01       	movw	r18, r4
    42c8:	40 2f       	mov	r20, r16
    42ca:	62 e1       	ldi	r22, 0x12	; 18
    42cc:	c3 01       	movw	r24, r6
    42ce:	78 de       	rcall	.-784    	; 0x3fc0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    42d0:	43 2d       	mov	r20, r3
    42d2:	6a e1       	ldi	r22, 0x1A	; 26
    42d4:	c3 01       	movw	r24, r6
    42d6:	55 de       	rcall	.-854    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    42d8:	41 2f       	mov	r20, r17
    42da:	62 e0       	ldi	r22, 0x02	; 2
    42dc:	c3 01       	movw	r24, r6
    42de:	51 de       	rcall	.-862    	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    42e0:	1c 30       	cpi	r17, 0x0C	; 12
    42e2:	21 f4       	brne	.+8      	; 0x42ec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x8a>
    42e4:	40 e8       	ldi	r20, 0x80	; 128
    42e6:	6a e1       	ldi	r22, 0x1A	; 26
    42e8:	c3 01       	movw	r24, r6
    42ea:	c2 de       	rcall	.-636    	; 0x4070 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>
    42ec:	0e 94 49 35 	call	0x6a92	; 0x6a92 <millis>
    42f0:	1b 01       	movw	r2, r22
    42f2:	2c 01       	movw	r4, r24
    42f4:	24 e2       	ldi	r18, 0x24	; 36
    42f6:	22 0e       	add	r2, r18
    42f8:	31 1c       	adc	r3, r1
    42fa:	41 1c       	adc	r4, r1
    42fc:	51 1c       	adc	r5, r1
    42fe:	68 e0       	ldi	r22, 0x08	; 8
    4300:	c3 01       	movw	r24, r6
    4302:	91 de       	rcall	.-734    	; 0x4026 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    4304:	98 2f       	mov	r25, r24
    4306:	99 21       	and	r25, r9
    4308:	71 f4       	brne	.+28     	; 0x4326 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xc4>
    430a:	80 ff       	sbrs	r24, 0
    430c:	02 c0       	rjmp	.+4      	; 0x4312 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb0>
    430e:	83 e0       	ldi	r24, 0x03	; 3
    4310:	6a c0       	rjmp	.+212    	; 0x43e6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x184>
    4312:	0e 94 f2 2e 	call	0x5de4	; 0x5de4 <yield>
    4316:	0e 94 49 35 	call	0x6a92	; 0x6a92 <millis>
    431a:	62 15       	cp	r22, r2
    431c:	73 05       	cpc	r23, r3
    431e:	84 05       	cpc	r24, r4
    4320:	95 05       	cpc	r25, r5
    4322:	68 f3       	brcs	.-38     	; 0x42fe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x9c>
    4324:	f4 cf       	rjmp	.-24     	; 0x430e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xac>
    4326:	6c e0       	ldi	r22, 0x0C	; 12
    4328:	c3 01       	movw	r24, r6
    432a:	7d de       	rcall	.-774    	; 0x4026 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    432c:	18 2f       	mov	r17, r24
    432e:	83 71       	andi	r24, 0x13	; 19
    4330:	09 f0       	breq	.+2      	; 0x4334 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xd2>
    4332:	56 c0       	rjmp	.+172    	; 0x43e0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    4334:	e1 14       	cp	r14, r1
    4336:	f1 04       	cpc	r15, r1
    4338:	e1 f0       	breq	.+56     	; 0x4372 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x110>
    433a:	c1 14       	cp	r12, r1
    433c:	d1 04       	cpc	r13, r1
    433e:	c9 f0       	breq	.+50     	; 0x4372 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x110>
    4340:	64 e1       	ldi	r22, 0x14	; 20
    4342:	c3 01       	movw	r24, r6
    4344:	70 de       	rcall	.-800    	; 0x4026 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    4346:	f6 01       	movw	r30, r12
    4348:	90 81       	ld	r25, Z
    434a:	98 17       	cp	r25, r24
    434c:	08 f4       	brcc	.+2      	; 0x4350 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xee>
    434e:	42 c0       	rjmp	.+132    	; 0x43d4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x172>
    4350:	80 83       	st	Z, r24
    4352:	08 2d       	mov	r16, r8
    4354:	97 01       	movw	r18, r14
    4356:	48 2f       	mov	r20, r24
    4358:	62 e1       	ldi	r22, 0x12	; 18
    435a:	c3 01       	movw	r24, r6
    435c:	84 de       	rcall	.-760    	; 0x4066 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>
    435e:	68 e1       	ldi	r22, 0x18	; 24
    4360:	c3 01       	movw	r24, r6
    4362:	61 de       	rcall	.-830    	; 0x4026 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    4364:	87 70       	andi	r24, 0x07	; 7
    4366:	a1 14       	cp	r10, r1
    4368:	b1 04       	cpc	r11, r1
    436a:	21 f0       	breq	.+8      	; 0x4374 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x112>
    436c:	f5 01       	movw	r30, r10
    436e:	80 83       	st	Z, r24
    4370:	01 c0       	rjmp	.+2      	; 0x4374 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x112>
    4372:	80 e0       	ldi	r24, 0x00	; 0
    4374:	13 fd       	sbrc	r17, 3
    4376:	30 c0       	rjmp	.+96     	; 0x43d8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x176>
    4378:	e1 14       	cp	r14, r1
    437a:	f1 04       	cpc	r15, r1
    437c:	79 f1       	breq	.+94     	; 0x43dc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17a>
    437e:	c1 14       	cp	r12, r1
    4380:	d1 04       	cpc	r13, r1
    4382:	61 f1       	breq	.+88     	; 0x43dc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17a>
    4384:	98 8d       	ldd	r25, Y+24	; 0x18
    4386:	99 23       	and	r25, r25
    4388:	49 f1       	breq	.+82     	; 0x43dc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17a>
    438a:	f6 01       	movw	r30, r12
    438c:	40 81       	ld	r20, Z
    438e:	41 30       	cpi	r20, 0x01	; 1
    4390:	21 f4       	brne	.+8      	; 0x439a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x138>
    4392:	84 30       	cpi	r24, 0x04	; 4
    4394:	39 f5       	brne	.+78     	; 0x43e4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    4396:	8f ef       	ldi	r24, 0xFF	; 255
    4398:	26 c0       	rjmp	.+76     	; 0x43e6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x184>
    439a:	42 30       	cpi	r20, 0x02	; 2
    439c:	18 f1       	brcs	.+70     	; 0x43e4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    439e:	81 11       	cpse	r24, r1
    43a0:	21 c0       	rjmp	.+66     	; 0x43e4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    43a2:	42 50       	subi	r20, 0x02	; 2
    43a4:	9e 01       	movw	r18, r28
    43a6:	2f 5f       	subi	r18, 0xFF	; 255
    43a8:	3f 4f       	sbci	r19, 0xFF	; 255
    43aa:	b7 01       	movw	r22, r14
    43ac:	c3 01       	movw	r24, r6
    43ae:	83 de       	rcall	.-762    	; 0x40b6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    43b0:	81 11       	cpse	r24, r1
    43b2:	19 c0       	rjmp	.+50     	; 0x43e6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x184>
    43b4:	f6 01       	movw	r30, r12
    43b6:	80 81       	ld	r24, Z
    43b8:	e8 0e       	add	r14, r24
    43ba:	f1 1c       	adc	r15, r1
    43bc:	f7 01       	movw	r30, r14
    43be:	32 97       	sbiw	r30, 0x02	; 2
    43c0:	90 81       	ld	r25, Z
    43c2:	89 81       	ldd	r24, Y+1	; 0x01
    43c4:	98 13       	cpse	r25, r24
    43c6:	0e c0       	rjmp	.+28     	; 0x43e4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    43c8:	31 96       	adiw	r30, 0x01	; 1
    43ca:	90 81       	ld	r25, Z
    43cc:	8a 81       	ldd	r24, Y+2	; 0x02
    43ce:	98 13       	cpse	r25, r24
    43d0:	09 c0       	rjmp	.+18     	; 0x43e4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    43d2:	04 c0       	rjmp	.+8      	; 0x43dc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17a>
    43d4:	84 e0       	ldi	r24, 0x04	; 4
    43d6:	07 c0       	rjmp	.+14     	; 0x43e6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x184>
    43d8:	82 e0       	ldi	r24, 0x02	; 2
    43da:	05 c0       	rjmp	.+10     	; 0x43e6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x184>
    43dc:	80 e0       	ldi	r24, 0x00	; 0
    43de:	03 c0       	rjmp	.+6      	; 0x43e6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x184>
    43e0:	81 e0       	ldi	r24, 0x01	; 1
    43e2:	01 c0       	rjmp	.+2      	; 0x43e6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x184>
    43e4:	87 e0       	ldi	r24, 0x07	; 7
    43e6:	0f 90       	pop	r0
    43e8:	0f 90       	pop	r0
    43ea:	df 91       	pop	r29
    43ec:	cf 91       	pop	r28
    43ee:	1f 91       	pop	r17
    43f0:	0f 91       	pop	r16
    43f2:	ff 90       	pop	r15
    43f4:	ef 90       	pop	r14
    43f6:	df 90       	pop	r13
    43f8:	cf 90       	pop	r12
    43fa:	bf 90       	pop	r11
    43fc:	af 90       	pop	r10
    43fe:	9f 90       	pop	r9
    4400:	8f 90       	pop	r8
    4402:	7f 90       	pop	r7
    4404:	6f 90       	pop	r6
    4406:	5f 90       	pop	r5
    4408:	4f 90       	pop	r4
    440a:	3f 90       	pop	r3
    440c:	2f 90       	pop	r2
    440e:	08 95       	ret

00004410 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    4410:	8f 92       	push	r8
    4412:	af 92       	push	r10
    4414:	bf 92       	push	r11
    4416:	cf 92       	push	r12
    4418:	df 92       	push	r13
    441a:	ef 92       	push	r14
    441c:	ff 92       	push	r15
    441e:	0f 93       	push	r16
    4420:	1f 93       	push	r17
    4422:	af 92       	push	r10
    4424:	8c 2c       	mov	r8, r12
    4426:	57 01       	movw	r10, r14
    4428:	68 01       	movw	r12, r16
    442a:	79 01       	movw	r14, r18
    442c:	04 2f       	mov	r16, r20
    442e:	9b 01       	movw	r18, r22
    4430:	40 e3       	ldi	r20, 0x30	; 48
    4432:	6c e0       	ldi	r22, 0x0C	; 12
    4434:	16 df       	rcall	.-468    	; 0x4262 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    4436:	0f 90       	pop	r0
    4438:	1f 91       	pop	r17
    443a:	0f 91       	pop	r16
    443c:	ff 90       	pop	r15
    443e:	ef 90       	pop	r14
    4440:	df 90       	pop	r13
    4442:	cf 90       	pop	r12
    4444:	bf 90       	pop	r11
    4446:	af 90       	pop	r10
    4448:	8f 90       	pop	r8
    444a:	08 95       	ret

0000444c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    444c:	2f 92       	push	r2
    444e:	3f 92       	push	r3
    4450:	4f 92       	push	r4
    4452:	5f 92       	push	r5
    4454:	6f 92       	push	r6
    4456:	7f 92       	push	r7
    4458:	8f 92       	push	r8
    445a:	9f 92       	push	r9
    445c:	af 92       	push	r10
    445e:	bf 92       	push	r11
    4460:	cf 92       	push	r12
    4462:	df 92       	push	r13
    4464:	ef 92       	push	r14
    4466:	ff 92       	push	r15
    4468:	0f 93       	push	r16
    446a:	1f 93       	push	r17
    446c:	cf 93       	push	r28
    446e:	df 93       	push	r29
    4470:	cd b7       	in	r28, 0x3d	; 61
    4472:	de b7       	in	r29, 0x3e	; 62
    4474:	2c 97       	sbiw	r28, 0x0c	; 12
    4476:	0f b6       	in	r0, 0x3f	; 63
    4478:	f8 94       	cli
    447a:	de bf       	out	0x3e, r29	; 62
    447c:	0f be       	out	0x3f, r0	; 63
    447e:	cd bf       	out	0x3d, r28	; 61
    4480:	41 35       	cpi	r20, 0x51	; 81
    4482:	08 f0       	brcs	.+2      	; 0x4486 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a>
    4484:	00 c1       	rjmp	.+512    	; 0x4686 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x23a>
    4486:	34 2e       	mov	r3, r20
    4488:	3b 01       	movw	r6, r22
    448a:	4c 01       	movw	r8, r24
    448c:	40 e8       	ldi	r20, 0x80	; 128
    448e:	6c e1       	ldi	r22, 0x1C	; 28
    4490:	00 de       	rcall	.-1024   	; 0x4092 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    4492:	22 24       	eor	r2, r2
    4494:	23 94       	inc	r2
    4496:	32 e0       	ldi	r19, 0x02	; 2
    4498:	23 16       	cp	r2, r19
    449a:	91 f0       	breq	.+36     	; 0x44c0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x74>
    449c:	83 e0       	ldi	r24, 0x03	; 3
    449e:	28 16       	cp	r2, r24
    44a0:	e1 f0       	breq	.+56     	; 0x44da <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x8e>
    44a2:	91 e0       	ldi	r25, 0x01	; 1
    44a4:	29 12       	cpse	r2, r25
    44a6:	f3 c0       	rjmp	.+486    	; 0x468e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x242>
    44a8:	83 e9       	ldi	r24, 0x93	; 147
    44aa:	89 83       	std	Y+1, r24	; 0x01
    44ac:	33 20       	and	r3, r3
    44ae:	d1 f0       	breq	.+52     	; 0x44e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x98>
    44b0:	81 e0       	ldi	r24, 0x01	; 1
    44b2:	f3 01       	movw	r30, r6
    44b4:	90 81       	ld	r25, Z
    44b6:	95 30       	cpi	r25, 0x05	; 5
    44b8:	08 f4       	brcc	.+2      	; 0x44bc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
    44ba:	80 e0       	ldi	r24, 0x00	; 0
    44bc:	b1 2c       	mov	r11, r1
    44be:	17 c0       	rjmp	.+46     	; 0x44ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    44c0:	f5 e9       	ldi	r31, 0x95	; 149
    44c2:	f9 83       	std	Y+1, r31	; 0x01
    44c4:	33 20       	and	r3, r3
    44c6:	81 f0       	breq	.+32     	; 0x44e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9c>
    44c8:	81 e0       	ldi	r24, 0x01	; 1
    44ca:	f3 01       	movw	r30, r6
    44cc:	90 81       	ld	r25, Z
    44ce:	98 30       	cpi	r25, 0x08	; 8
    44d0:	08 f4       	brcc	.+2      	; 0x44d4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x88>
    44d2:	80 e0       	ldi	r24, 0x00	; 0
    44d4:	43 e0       	ldi	r20, 0x03	; 3
    44d6:	b4 2e       	mov	r11, r20
    44d8:	0a c0       	rjmp	.+20     	; 0x44ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    44da:	87 e9       	ldi	r24, 0x97	; 151
    44dc:	89 83       	std	Y+1, r24	; 0x01
    44de:	36 e0       	ldi	r19, 0x06	; 6
    44e0:	b3 2e       	mov	r11, r19
    44e2:	04 c0       	rjmp	.+8      	; 0x44ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
    44e4:	b1 2c       	mov	r11, r1
    44e6:	02 c0       	rjmp	.+4      	; 0x44ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
    44e8:	23 e0       	ldi	r18, 0x03	; 3
    44ea:	b2 2e       	mov	r11, r18
    44ec:	80 e0       	ldi	r24, 0x00	; 0
    44ee:	d3 2c       	mov	r13, r3
    44f0:	f8 e0       	ldi	r31, 0x08	; 8
    44f2:	bf 9e       	mul	r11, r31
    44f4:	d0 18       	sub	r13, r0
    44f6:	11 24       	eor	r1, r1
    44f8:	d7 fc       	sbrc	r13, 7
    44fa:	d1 2c       	mov	r13, r1
    44fc:	88 23       	and	r24, r24
    44fe:	21 f0       	breq	.+8      	; 0x4508 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbc>
    4500:	98 e8       	ldi	r25, 0x88	; 136
    4502:	9b 83       	std	Y+3, r25	; 0x03
    4504:	33 e0       	ldi	r19, 0x03	; 3
    4506:	01 c0       	rjmp	.+2      	; 0x450a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
    4508:	32 e0       	ldi	r19, 0x02	; 2
    450a:	21 e0       	ldi	r18, 0x01	; 1
    450c:	9d 2d       	mov	r25, r13
    450e:	97 70       	andi	r25, 0x07	; 7
    4510:	09 f4       	brne	.+2      	; 0x4514 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc8>
    4512:	20 e0       	ldi	r18, 0x00	; 0
    4514:	9d 2d       	mov	r25, r13
    4516:	95 95       	asr	r25
    4518:	95 95       	asr	r25
    451a:	95 95       	asr	r25
    451c:	29 0f       	add	r18, r25
    451e:	31 f4       	brne	.+12     	; 0x452c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe0>
    4520:	88 23       	and	r24, r24
    4522:	09 f4       	brne	.+2      	; 0x4526 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xda>
    4524:	8d c0       	rjmp	.+282    	; 0x4640 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f4>
    4526:	38 e0       	ldi	r19, 0x08	; 8
    4528:	d3 0e       	add	r13, r19
    452a:	8a c0       	rjmp	.+276    	; 0x4640 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f4>
    452c:	81 11       	cpse	r24, r1
    452e:	02 c0       	rjmp	.+4      	; 0x4534 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe8>
    4530:	94 e0       	ldi	r25, 0x04	; 4
    4532:	01 c0       	rjmp	.+2      	; 0x4536 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xea>
    4534:	93 e0       	ldi	r25, 0x03	; 3
    4536:	29 17       	cp	r18, r25
    4538:	08 f4       	brcc	.+2      	; 0x453c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf0>
    453a:	92 2f       	mov	r25, r18
    453c:	eb 2d       	mov	r30, r11
    453e:	f0 e0       	ldi	r31, 0x00	; 0
    4540:	31 96       	adiw	r30, 0x01	; 1
    4542:	e6 0d       	add	r30, r6
    4544:	f7 1d       	adc	r31, r7
    4546:	23 2f       	mov	r18, r19
    4548:	41 91       	ld	r20, Z+
    454a:	a1 e0       	ldi	r26, 0x01	; 1
    454c:	b0 e0       	ldi	r27, 0x00	; 0
    454e:	ac 0f       	add	r26, r28
    4550:	bd 1f       	adc	r27, r29
    4552:	a2 0f       	add	r26, r18
    4554:	b1 1d       	adc	r27, r1
    4556:	4c 93       	st	X, r20
    4558:	2f 5f       	subi	r18, 0xFF	; 255
    455a:	42 2f       	mov	r20, r18
    455c:	43 1b       	sub	r20, r19
    455e:	49 17       	cp	r20, r25
    4560:	98 f3       	brcs	.-26     	; 0x4548 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xfc>
    4562:	de cf       	rjmp	.-68     	; 0x4520 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd4>
    4564:	81 11       	cpse	r24, r1
    4566:	d8 c0       	rjmp	.+432    	; 0x4718 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    4568:	9f e1       	ldi	r25, 0x1F	; 31
    456a:	9d 15       	cp	r25, r13
    456c:	0c f4       	brge	.+2      	; 0x4570 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x124>
    456e:	91 c0       	rjmp	.+290    	; 0x4692 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x246>
    4570:	80 e2       	ldi	r24, 0x20	; 32
    4572:	d8 2e       	mov	r13, r24
    4574:	90 e7       	ldi	r25, 0x70	; 112
    4576:	9a 83       	std	Y+2, r25	; 0x02
    4578:	9b 81       	ldd	r25, Y+3	; 0x03
    457a:	8c 81       	ldd	r24, Y+4	; 0x04
    457c:	89 27       	eor	r24, r25
    457e:	9d 81       	ldd	r25, Y+5	; 0x05
    4580:	89 27       	eor	r24, r25
    4582:	9e 81       	ldd	r25, Y+6	; 0x06
    4584:	89 27       	eor	r24, r25
    4586:	8f 83       	std	Y+7, r24	; 0x07
    4588:	9e 01       	movw	r18, r28
    458a:	28 5f       	subi	r18, 0xF8	; 248
    458c:	3f 4f       	sbci	r19, 0xFF	; 255
    458e:	47 e0       	ldi	r20, 0x07	; 7
    4590:	be 01       	movw	r22, r28
    4592:	6f 5f       	subi	r22, 0xFF	; 255
    4594:	7f 4f       	sbci	r23, 0xFF	; 255
    4596:	c4 01       	movw	r24, r8
    4598:	8e dd       	rcall	.-1252   	; 0x40b6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    459a:	81 11       	cpse	r24, r1
    459c:	bd c0       	rjmp	.+378    	; 0x4718 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    459e:	1b 86       	std	Y+11, r1	; 0x0b
    45a0:	e3 e0       	ldi	r30, 0x03	; 3
    45a2:	ea 87       	std	Y+10, r30	; 0x0a
    45a4:	ce 01       	movw	r24, r28
    45a6:	07 96       	adiw	r24, 0x07	; 7
    45a8:	2c 01       	movw	r4, r24
    45aa:	99 e0       	ldi	r25, 0x09	; 9
    45ac:	9c 87       	std	Y+12, r25	; 0x0c
    45ae:	cb 84       	ldd	r12, Y+11	; 0x0b
    45b0:	4c 2d       	mov	r20, r12
    45b2:	42 95       	swap	r20
    45b4:	40 7f       	andi	r20, 0xF0	; 240
    45b6:	4c 0d       	add	r20, r12
    45b8:	6a e1       	ldi	r22, 0x1A	; 26
    45ba:	c4 01       	movw	r24, r8
    45bc:	e2 dc       	rcall	.-1596   	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    45be:	a1 2c       	mov	r10, r1
    45c0:	ce 01       	movw	r24, r28
    45c2:	0b 96       	adiw	r24, 0x0b	; 11
    45c4:	7c 01       	movw	r14, r24
    45c6:	8e 01       	movw	r16, r28
    45c8:	06 5f       	subi	r16, 0xF6	; 246
    45ca:	1f 4f       	sbci	r17, 0xFF	; 255
    45cc:	92 01       	movw	r18, r4
    45ce:	4c 85       	ldd	r20, Y+12	; 0x0c
    45d0:	be 01       	movw	r22, r28
    45d2:	6f 5f       	subi	r22, 0xFF	; 255
    45d4:	7f 4f       	sbci	r23, 0xFF	; 255
    45d6:	c4 01       	movw	r24, r8
    45d8:	1b df       	rcall	.-458    	; 0x4410 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    45da:	82 30       	cpi	r24, 0x02	; 2
    45dc:	09 f0       	breq	.+2      	; 0x45e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    45de:	c2 cf       	rjmp	.-124    	; 0x4564 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x118>
    45e0:	6c e1       	ldi	r22, 0x1C	; 28
    45e2:	c4 01       	movw	r24, r8
    45e4:	20 dd       	rcall	.-1472   	; 0x4026 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    45e6:	85 fd       	sbrc	r24, 5
    45e8:	50 c0       	rjmp	.+160    	; 0x468a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x23e>
    45ea:	8f 71       	andi	r24, 0x1F	; 31
    45ec:	09 f4       	brne	.+2      	; 0x45f0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
    45ee:	80 e2       	ldi	r24, 0x20	; 32
    45f0:	28 2f       	mov	r18, r24
    45f2:	30 e0       	ldi	r19, 0x00	; 0
    45f4:	4d 2d       	mov	r20, r13
    45f6:	dd 0c       	add	r13, r13
    45f8:	55 0b       	sbc	r21, r21
    45fa:	42 17       	cp	r20, r18
    45fc:	53 07       	cpc	r21, r19
    45fe:	0c f0       	brlt	.+2      	; 0x4602 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1b6>
    4600:	46 c0       	rjmp	.+140    	; 0x468e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x242>
    4602:	d8 2e       	mov	r13, r24
    4604:	85 95       	asr	r24
    4606:	85 95       	asr	r24
    4608:	85 95       	asr	r24
    460a:	91 e0       	ldi	r25, 0x01	; 1
    460c:	98 0f       	add	r25, r24
    460e:	42 2f       	mov	r20, r18
    4610:	47 70       	andi	r20, 0x07	; 7
    4612:	81 e0       	ldi	r24, 0x01	; 1
    4614:	09 f4       	brne	.+2      	; 0x4618 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1cc>
    4616:	80 e0       	ldi	r24, 0x00	; 0
    4618:	89 0f       	add	r24, r25
    461a:	e1 e0       	ldi	r30, 0x01	; 1
    461c:	f0 e0       	ldi	r31, 0x00	; 0
    461e:	ec 0f       	add	r30, r28
    4620:	fd 1f       	adc	r31, r29
    4622:	e8 0f       	add	r30, r24
    4624:	f1 1d       	adc	r31, r1
    4626:	21 50       	subi	r18, 0x01	; 1
    4628:	31 09       	sbc	r19, r1
    462a:	27 70       	andi	r18, 0x07	; 7
    462c:	33 27       	eor	r19, r19
    462e:	81 e0       	ldi	r24, 0x01	; 1
    4630:	90 e0       	ldi	r25, 0x00	; 0
    4632:	01 c0       	rjmp	.+2      	; 0x4636 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ea>
    4634:	88 0f       	add	r24, r24
    4636:	2a 95       	dec	r18
    4638:	ea f7       	brpl	.-6      	; 0x4634 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e8>
    463a:	90 81       	ld	r25, Z
    463c:	89 2b       	or	r24, r25
    463e:	80 83       	st	Z, r24
    4640:	8f e1       	ldi	r24, 0x1F	; 31
    4642:	8d 15       	cp	r24, r13
    4644:	0c f4       	brge	.+2      	; 0x4648 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fc>
    4646:	96 cf       	rjmp	.-212    	; 0x4574 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x128>
    4648:	9d 2d       	mov	r25, r13
    464a:	97 70       	andi	r25, 0x07	; 7
    464c:	9b 87       	std	Y+11, r25	; 0x0b
    464e:	8d 2d       	mov	r24, r13
    4650:	85 95       	asr	r24
    4652:	85 95       	asr	r24
    4654:	85 95       	asr	r24
    4656:	8e 5f       	subi	r24, 0xFE	; 254
    4658:	29 2f       	mov	r18, r25
    465a:	e0 e1       	ldi	r30, 0x10	; 16
    465c:	8e 9f       	mul	r24, r30
    465e:	20 0d       	add	r18, r0
    4660:	11 24       	eor	r1, r1
    4662:	2a 83       	std	Y+2, r18	; 0x02
    4664:	21 e0       	ldi	r18, 0x01	; 1
    4666:	91 11       	cpse	r25, r1
    4668:	01 c0       	rjmp	.+2      	; 0x466c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x220>
    466a:	20 e0       	ldi	r18, 0x00	; 0
    466c:	28 0f       	add	r18, r24
    466e:	2c 87       	std	Y+12, r18	; 0x0c
    4670:	44 24       	eor	r4, r4
    4672:	43 94       	inc	r4
    4674:	51 2c       	mov	r5, r1
    4676:	4c 0e       	add	r4, r28
    4678:	5d 1e       	adc	r5, r29
    467a:	48 0e       	add	r4, r24
    467c:	51 1c       	adc	r5, r1
    467e:	f9 e0       	ldi	r31, 0x09	; 9
    4680:	f8 1b       	sub	r31, r24
    4682:	fa 87       	std	Y+10, r31	; 0x0a
    4684:	94 cf       	rjmp	.-216    	; 0x45ae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x162>
    4686:	86 e0       	ldi	r24, 0x06	; 6
    4688:	47 c0       	rjmp	.+142    	; 0x4718 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    468a:	82 e0       	ldi	r24, 0x02	; 2
    468c:	45 c0       	rjmp	.+138    	; 0x4718 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    468e:	85 e0       	ldi	r24, 0x05	; 5
    4690:	43 c0       	rjmp	.+134    	; 0x4718 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    4692:	8b 81       	ldd	r24, Y+3	; 0x03
    4694:	88 38       	cpi	r24, 0x88	; 136
    4696:	e9 f1       	breq	.+122    	; 0x4712 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2c6>
    4698:	82 e0       	ldi	r24, 0x02	; 2
    469a:	94 e0       	ldi	r25, 0x04	; 4
    469c:	eb 2d       	mov	r30, r11
    469e:	f0 e0       	ldi	r31, 0x00	; 0
    46a0:	31 96       	adiw	r30, 0x01	; 1
    46a2:	e6 0d       	add	r30, r6
    46a4:	f7 1d       	adc	r31, r7
    46a6:	98 0f       	add	r25, r24
    46a8:	a1 e0       	ldi	r26, 0x01	; 1
    46aa:	b0 e0       	ldi	r27, 0x00	; 0
    46ac:	ac 0f       	add	r26, r28
    46ae:	bd 1f       	adc	r27, r29
    46b0:	a8 0f       	add	r26, r24
    46b2:	b1 1d       	adc	r27, r1
    46b4:	2c 91       	ld	r18, X
    46b6:	21 93       	st	Z+, r18
    46b8:	8f 5f       	subi	r24, 0xFF	; 255
    46ba:	98 13       	cpse	r25, r24
    46bc:	f5 cf       	rjmp	.-22     	; 0x46a8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x25c>
    46be:	8a 85       	ldd	r24, Y+10	; 0x0a
    46c0:	83 30       	cpi	r24, 0x03	; 3
    46c2:	19 f5       	brne	.+70     	; 0x470a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2be>
    46c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    46c6:	81 11       	cpse	r24, r1
    46c8:	20 c0       	rjmp	.+64     	; 0x470a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2be>
    46ca:	9e 01       	movw	r18, r28
    46cc:	2d 5f       	subi	r18, 0xFD	; 253
    46ce:	3f 4f       	sbci	r19, 0xFF	; 255
    46d0:	41 e0       	ldi	r20, 0x01	; 1
    46d2:	b2 01       	movw	r22, r4
    46d4:	c4 01       	movw	r24, r8
    46d6:	ef dc       	rcall	.-1570   	; 0x40b6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    46d8:	81 11       	cpse	r24, r1
    46da:	1e c0       	rjmp	.+60     	; 0x4718 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    46dc:	9b 81       	ldd	r25, Y+3	; 0x03
    46de:	f2 01       	movw	r30, r4
    46e0:	81 81       	ldd	r24, Z+1	; 0x01
    46e2:	98 13       	cpse	r25, r24
    46e4:	14 c0       	rjmp	.+40     	; 0x470e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2c2>
    46e6:	9c 81       	ldd	r25, Y+4	; 0x04
    46e8:	82 81       	ldd	r24, Z+2	; 0x02
    46ea:	98 13       	cpse	r25, r24
    46ec:	10 c0       	rjmp	.+32     	; 0x470e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2c2>
    46ee:	80 81       	ld	r24, Z
    46f0:	82 ff       	sbrs	r24, 2
    46f2:	02 c0       	rjmp	.+4      	; 0x46f8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ac>
    46f4:	23 94       	inc	r2
    46f6:	cf ce       	rjmp	.-610    	; 0x4496 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4a>
    46f8:	f3 01       	movw	r30, r6
    46fa:	83 87       	std	Z+11, r24	; 0x0b
    46fc:	82 2d       	mov	r24, r2
    46fe:	88 0f       	add	r24, r24
    4700:	82 0d       	add	r24, r2
    4702:	8f 5f       	subi	r24, 0xFF	; 255
    4704:	80 83       	st	Z, r24
    4706:	80 e0       	ldi	r24, 0x00	; 0
    4708:	07 c0       	rjmp	.+14     	; 0x4718 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    470a:	81 e0       	ldi	r24, 0x01	; 1
    470c:	05 c0       	rjmp	.+10     	; 0x4718 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    470e:	87 e0       	ldi	r24, 0x07	; 7
    4710:	03 c0       	rjmp	.+6      	; 0x4718 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    4712:	83 e0       	ldi	r24, 0x03	; 3
    4714:	93 e0       	ldi	r25, 0x03	; 3
    4716:	c2 cf       	rjmp	.-124    	; 0x469c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x250>
    4718:	2c 96       	adiw	r28, 0x0c	; 12
    471a:	0f b6       	in	r0, 0x3f	; 63
    471c:	f8 94       	cli
    471e:	de bf       	out	0x3e, r29	; 62
    4720:	0f be       	out	0x3f, r0	; 63
    4722:	cd bf       	out	0x3d, r28	; 61
    4724:	df 91       	pop	r29
    4726:	cf 91       	pop	r28
    4728:	1f 91       	pop	r17
    472a:	0f 91       	pop	r16
    472c:	ff 90       	pop	r15
    472e:	ef 90       	pop	r14
    4730:	df 90       	pop	r13
    4732:	cf 90       	pop	r12
    4734:	bf 90       	pop	r11
    4736:	af 90       	pop	r10
    4738:	9f 90       	pop	r9
    473a:	8f 90       	pop	r8
    473c:	7f 90       	pop	r7
    473e:	6f 90       	pop	r6
    4740:	5f 90       	pop	r5
    4742:	4f 90       	pop	r4
    4744:	3f 90       	pop	r3
    4746:	2f 90       	pop	r2
    4748:	08 95       	ret

0000474a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
MFRC522::StatusCode MFRC522::PICC_REQA_or_WUPA(	byte command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
												byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
												byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
											) {
    474a:	4f 92       	push	r4
    474c:	5f 92       	push	r5
    474e:	6f 92       	push	r6
    4750:	7f 92       	push	r7
    4752:	8f 92       	push	r8
    4754:	9f 92       	push	r9
    4756:	af 92       	push	r10
    4758:	cf 92       	push	r12
    475a:	ef 92       	push	r14
    475c:	ff 92       	push	r15
    475e:	0f 93       	push	r16
    4760:	1f 93       	push	r17
    4762:	cf 93       	push	r28
    4764:	df 93       	push	r29
    4766:	1f 92       	push	r1
    4768:	1f 92       	push	r1
    476a:	cd b7       	in	r28, 0x3d	; 61
    476c:	de b7       	in	r29, 0x3e	; 62
    476e:	6a 83       	std	Y+2, r22	; 0x02
	byte validBits;
	MFRC522::StatusCode status;
	
	if (bufferATQA == nullptr || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
    4770:	41 15       	cp	r20, r1
    4772:	51 05       	cpc	r21, r1
    4774:	29 f1       	breq	.+74     	; 0x47c0 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x76>
    4776:	f9 01       	movw	r30, r18
    4778:	60 81       	ld	r22, Z
    477a:	62 30       	cpi	r22, 0x02	; 2
    477c:	08 f1       	brcs	.+66     	; 0x47c0 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x76>
    477e:	49 01       	movw	r8, r18
    4780:	2a 01       	movw	r4, r20
    4782:	3c 01       	movw	r6, r24
		return STATUS_NO_ROOM;
	}
	PCD_ClearRegisterBitMask(CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
    4784:	40 e8       	ldi	r20, 0x80	; 128
    4786:	6c e1       	ldi	r22, 0x1C	; 28
    4788:	84 dc       	rcall	.-1784   	; 0x4092 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
	validBits = 7;									// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
    478a:	87 e0       	ldi	r24, 0x07	; 7
    478c:	89 83       	std	Y+1, r24	; 0x01
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
    478e:	a1 2c       	mov	r10, r1
    4790:	c1 2c       	mov	r12, r1
    4792:	ce 01       	movw	r24, r28
    4794:	01 96       	adiw	r24, 0x01	; 1
    4796:	7c 01       	movw	r14, r24
    4798:	84 01       	movw	r16, r8
    479a:	92 01       	movw	r18, r4
    479c:	41 e0       	ldi	r20, 0x01	; 1
    479e:	be 01       	movw	r22, r28
    47a0:	6e 5f       	subi	r22, 0xFE	; 254
    47a2:	7f 4f       	sbci	r23, 0xFF	; 255
    47a4:	c3 01       	movw	r24, r6
    47a6:	34 de       	rcall	.-920    	; 0x4410 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
    47a8:	81 11       	cpse	r24, r1
    47aa:	0d c0       	rjmp	.+26     	; 0x47c6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
    47ac:	f4 01       	movw	r30, r8
    47ae:	80 81       	ld	r24, Z
    47b0:	82 30       	cpi	r24, 0x02	; 2
    47b2:	41 f4       	brne	.+16     	; 0x47c4 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7a>
											) {
	byte validBits;
	MFRC522::StatusCode status;
	
	if (bufferATQA == nullptr || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
		return STATUS_NO_ROOM;
    47b4:	81 e0       	ldi	r24, 0x01	; 1
    47b6:	99 81       	ldd	r25, Y+1	; 0x01
    47b8:	91 11       	cpse	r25, r1
    47ba:	05 c0       	rjmp	.+10     	; 0x47c6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
    47bc:	80 e0       	ldi	r24, 0x00	; 0
    47be:	03 c0       	rjmp	.+6      	; 0x47c6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
    47c0:	84 e0       	ldi	r24, 0x04	; 4
    47c2:	01 c0       	rjmp	.+2      	; 0x47c6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
	if (status != STATUS_OK) {
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
		return STATUS_ERROR;
    47c4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return STATUS_OK;
} // End PICC_REQA_or_WUPA()
    47c6:	0f 90       	pop	r0
    47c8:	0f 90       	pop	r0
    47ca:	df 91       	pop	r29
    47cc:	cf 91       	pop	r28
    47ce:	1f 91       	pop	r17
    47d0:	0f 91       	pop	r16
    47d2:	ff 90       	pop	r15
    47d4:	ef 90       	pop	r14
    47d6:	cf 90       	pop	r12
    47d8:	af 90       	pop	r10
    47da:	9f 90       	pop	r9
    47dc:	8f 90       	pop	r8
    47de:	7f 90       	pop	r7
    47e0:	6f 90       	pop	r6
    47e2:	5f 90       	pop	r5
    47e4:	4f 90       	pop	r4
    47e6:	08 95       	ret

000047e8 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
MFRC522::StatusCode MFRC522::PICC_RequestA(	byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
											byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
										) {
    47e8:	9a 01       	movw	r18, r20
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
    47ea:	ab 01       	movw	r20, r22
    47ec:	66 e2       	ldi	r22, 0x26	; 38
    47ee:	ad cf       	rjmp	.-166    	; 0x474a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000047f0 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
    47f0:	0f 93       	push	r16
    47f2:	1f 93       	push	r17
    47f4:	cf 93       	push	r28
    47f6:	df 93       	push	r29
    47f8:	00 d0       	rcall	.+0      	; 0x47fa <_ZN7MFRC52221PICC_IsNewCardPresentEv+0xa>
    47fa:	cd b7       	in	r28, 0x3d	; 61
    47fc:	de b7       	in	r29, 0x3e	; 62
    47fe:	8c 01       	movw	r16, r24
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
    4800:	82 e0       	ldi	r24, 0x02	; 2
    4802:	8b 83       	std	Y+3, r24	; 0x03

	// Reset baud rates
	PCD_WriteRegister(TxModeReg, 0x00);
    4804:	40 e0       	ldi	r20, 0x00	; 0
    4806:	64 e2       	ldi	r22, 0x24	; 36
    4808:	c8 01       	movw	r24, r16
    480a:	bb db       	rcall	.-2186   	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(RxModeReg, 0x00);
    480c:	40 e0       	ldi	r20, 0x00	; 0
    480e:	66 e2       	ldi	r22, 0x26	; 38
    4810:	c8 01       	movw	r24, r16
    4812:	b7 db       	rcall	.-2194   	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	// Reset ModWidthReg
	PCD_WriteRegister(ModWidthReg, 0x26);
    4814:	46 e2       	ldi	r20, 0x26	; 38
    4816:	68 e4       	ldi	r22, 0x48	; 72
    4818:	c8 01       	movw	r24, r16
    481a:	b3 db       	rcall	.-2202   	; 0x3f82 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
    481c:	ae 01       	movw	r20, r28
    481e:	4d 5f       	subi	r20, 0xFD	; 253
    4820:	5f 4f       	sbci	r21, 0xFF	; 255
    4822:	be 01       	movw	r22, r28
    4824:	6f 5f       	subi	r22, 0xFF	; 255
    4826:	7f 4f       	sbci	r23, 0xFF	; 255
    4828:	c8 01       	movw	r24, r16
    482a:	de df       	rcall	.-68     	; 0x47e8 <_ZN7MFRC52213PICC_RequestAEPhS0_>
    482c:	98 2f       	mov	r25, r24
	return (result == STATUS_OK || result == STATUS_COLLISION);
    482e:	81 e0       	ldi	r24, 0x01	; 1
    4830:	99 23       	and	r25, r25
    4832:	19 f0       	breq	.+6      	; 0x483a <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x4a>
    4834:	92 30       	cpi	r25, 0x02	; 2
    4836:	09 f0       	breq	.+2      	; 0x483a <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x4a>
    4838:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_IsNewCardPresent()
    483a:	0f 90       	pop	r0
    483c:	0f 90       	pop	r0
    483e:	0f 90       	pop	r0
    4840:	df 91       	pop	r29
    4842:	cf 91       	pop	r28
    4844:	1f 91       	pop	r17
    4846:	0f 91       	pop	r16
    4848:	08 95       	ret

0000484a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
  return this->servoIndex ;
}

void Servo::detach()
{
  servos[this->servoIndex].Pin.isActive = false;
    484a:	cf 92       	push	r12
    484c:	df 92       	push	r13
    484e:	ef 92       	push	r14
    4850:	ff 92       	push	r15
    4852:	0f 93       	push	r16
    4854:	1f 93       	push	r17
    4856:	cf 93       	push	r28
    4858:	df 93       	push	r29
    485a:	7b 01       	movw	r14, r22
    485c:	6a 01       	movw	r12, r20
    485e:	08 2f       	mov	r16, r24
    4860:	10 e0       	ldi	r17, 0x00	; 0
    4862:	e8 01       	movw	r28, r16
    4864:	c5 59       	subi	r28, 0x95	; 149
    4866:	db 4f       	sbci	r29, 0xFB	; 251
    4868:	88 81       	ld	r24, Y
    486a:	87 ff       	sbrs	r24, 7
    486c:	04 c0       	rjmp	.+8      	; 0x4876 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c>
    486e:	fb 01       	movw	r30, r22
    4870:	11 82       	std	Z+1, r1	; 0x01
    4872:	10 82       	st	Z, r1
    4874:	24 c0       	rjmp	.+72     	; 0x48be <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
    4876:	8c e0       	ldi	r24, 0x0C	; 12
    4878:	80 9f       	mul	r24, r16
    487a:	90 01       	movw	r18, r0
    487c:	81 9f       	mul	r24, r17
    487e:	30 0d       	add	r19, r0
    4880:	11 24       	eor	r1, r1
    4882:	88 81       	ld	r24, Y
    4884:	a9 01       	movw	r20, r18
    4886:	48 0f       	add	r20, r24
    4888:	51 1d       	adc	r21, r1
    488a:	87 fd       	sbrc	r24, 7
    488c:	5a 95       	dec	r21
    488e:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <ServoCount>
    4892:	90 e0       	ldi	r25, 0x00	; 0
    4894:	48 17       	cp	r20, r24
    4896:	59 07       	cpc	r21, r25
    4898:	94 f4       	brge	.+36     	; 0x48be <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
    489a:	88 81       	ld	r24, Y
    489c:	a9 01       	movw	r20, r18
    489e:	48 0f       	add	r20, r24
    48a0:	51 1d       	adc	r21, r1
    48a2:	87 fd       	sbrc	r24, 7
    48a4:	5a 95       	dec	r21
    48a6:	ca 01       	movw	r24, r20
    48a8:	fa 01       	movw	r30, r20
    48aa:	ee 0f       	add	r30, r30
    48ac:	ff 1f       	adc	r31, r31
    48ae:	8e 0f       	add	r24, r30
    48b0:	9f 1f       	adc	r25, r31
    48b2:	fc 01       	movw	r30, r24
    48b4:	e1 59       	subi	r30, 0x91	; 145
    48b6:	fb 4f       	sbci	r31, 0xFB	; 251
    48b8:	80 81       	ld	r24, Z
    48ba:	86 fd       	sbrc	r24, 6
    48bc:	19 c0       	rjmp	.+50     	; 0x48f0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xa6>
    48be:	88 81       	ld	r24, Y
    48c0:	8f 5f       	subi	r24, 0xFF	; 255
    48c2:	88 83       	st	Y, r24
    48c4:	8c e0       	ldi	r24, 0x0C	; 12
    48c6:	80 9f       	mul	r24, r16
    48c8:	90 01       	movw	r18, r0
    48ca:	81 9f       	mul	r24, r17
    48cc:	30 0d       	add	r19, r0
    48ce:	11 24       	eor	r1, r1
    48d0:	88 81       	ld	r24, Y
    48d2:	a9 01       	movw	r20, r18
    48d4:	48 0f       	add	r20, r24
    48d6:	51 1d       	adc	r21, r1
    48d8:	87 fd       	sbrc	r24, 7
    48da:	5a 95       	dec	r21
    48dc:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <ServoCount>
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	48 17       	cp	r20, r24
    48e4:	59 07       	cpc	r21, r25
    48e6:	bc f4       	brge	.+46     	; 0x4916 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xcc>
    48e8:	88 81       	ld	r24, Y
    48ea:	8c 30       	cpi	r24, 0x0C	; 12
    48ec:	44 f1       	brlt	.+80     	; 0x493e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xf4>
    48ee:	13 c0       	rjmp	.+38     	; 0x4916 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xcc>
    48f0:	88 81       	ld	r24, Y
    48f2:	28 0f       	add	r18, r24
    48f4:	31 1d       	adc	r19, r1
    48f6:	87 fd       	sbrc	r24, 7
    48f8:	3a 95       	dec	r19
    48fa:	f9 01       	movw	r30, r18
    48fc:	ee 0f       	add	r30, r30
    48fe:	ff 1f       	adc	r31, r31
    4900:	2e 0f       	add	r18, r30
    4902:	3f 1f       	adc	r19, r31
    4904:	f9 01       	movw	r30, r18
    4906:	e1 59       	subi	r30, 0x91	; 145
    4908:	fb 4f       	sbci	r31, 0xFB	; 251
    490a:	80 81       	ld	r24, Z
    490c:	60 e0       	ldi	r22, 0x00	; 0
    490e:	8f 73       	andi	r24, 0x3F	; 63
    4910:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    4914:	d4 cf       	rjmp	.-88     	; 0x48be <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
    4916:	f7 01       	movw	r30, r14
    4918:	80 81       	ld	r24, Z
    491a:	91 81       	ldd	r25, Z+1	; 0x01
    491c:	04 96       	adiw	r24, 0x04	; 4
    491e:	80 34       	cpi	r24, 0x40	; 64
    4920:	9c 49       	sbci	r25, 0x9C	; 156
    4922:	18 f4       	brcc	.+6      	; 0x492a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xe0>
    4924:	80 e4       	ldi	r24, 0x40	; 64
    4926:	9c e9       	ldi	r25, 0x9C	; 156
    4928:	04 c0       	rjmp	.+8      	; 0x4932 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xe8>
    492a:	f7 01       	movw	r30, r14
    492c:	80 81       	ld	r24, Z
    492e:	91 81       	ldd	r25, Z+1	; 0x01
    4930:	04 96       	adiw	r24, 0x04	; 4
    4932:	f6 01       	movw	r30, r12
    4934:	91 83       	std	Z+1, r25	; 0x01
    4936:	80 83       	st	Z, r24
    4938:	8f ef       	ldi	r24, 0xFF	; 255
    493a:	88 83       	st	Y, r24
    493c:	45 c0       	rjmp	.+138    	; 0x49c8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17e>
    493e:	f7 01       	movw	r30, r14
    4940:	40 81       	ld	r20, Z
    4942:	51 81       	ldd	r21, Z+1	; 0x01
    4944:	88 81       	ld	r24, Y
    4946:	b9 01       	movw	r22, r18
    4948:	68 0f       	add	r22, r24
    494a:	71 1d       	adc	r23, r1
    494c:	87 fd       	sbrc	r24, 7
    494e:	7a 95       	dec	r23
    4950:	cb 01       	movw	r24, r22
    4952:	fb 01       	movw	r30, r22
    4954:	ee 0f       	add	r30, r30
    4956:	ff 1f       	adc	r31, r31
    4958:	8e 0f       	add	r24, r30
    495a:	9f 1f       	adc	r25, r31
    495c:	fc 01       	movw	r30, r24
    495e:	e1 59       	subi	r30, 0x91	; 145
    4960:	fb 4f       	sbci	r31, 0xFB	; 251
    4962:	81 81       	ldd	r24, Z+1	; 0x01
    4964:	92 81       	ldd	r25, Z+2	; 0x02
    4966:	84 0f       	add	r24, r20
    4968:	95 1f       	adc	r25, r21
    496a:	f6 01       	movw	r30, r12
    496c:	91 83       	std	Z+1, r25	; 0x01
    496e:	80 83       	st	Z, r24
    4970:	88 81       	ld	r24, Y
    4972:	a9 01       	movw	r20, r18
    4974:	48 0f       	add	r20, r24
    4976:	51 1d       	adc	r21, r1
    4978:	87 fd       	sbrc	r24, 7
    497a:	5a 95       	dec	r21
    497c:	ca 01       	movw	r24, r20
    497e:	fa 01       	movw	r30, r20
    4980:	ee 0f       	add	r30, r30
    4982:	ff 1f       	adc	r31, r31
    4984:	8e 0f       	add	r24, r30
    4986:	9f 1f       	adc	r25, r31
    4988:	fc 01       	movw	r30, r24
    498a:	e1 59       	subi	r30, 0x91	; 145
    498c:	fb 4f       	sbci	r31, 0xFB	; 251
    498e:	80 81       	ld	r24, Z
    4990:	86 ff       	sbrs	r24, 6
    4992:	1a c0       	rjmp	.+52     	; 0x49c8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17e>
    4994:	88 81       	ld	r24, Y
    4996:	28 0f       	add	r18, r24
    4998:	31 1d       	adc	r19, r1
    499a:	87 fd       	sbrc	r24, 7
    499c:	3a 95       	dec	r19
    499e:	f9 01       	movw	r30, r18
    49a0:	ee 0f       	add	r30, r30
    49a2:	ff 1f       	adc	r31, r31
    49a4:	2e 0f       	add	r18, r30
    49a6:	3f 1f       	adc	r19, r31
    49a8:	f9 01       	movw	r30, r18
    49aa:	e1 59       	subi	r30, 0x91	; 145
    49ac:	fb 4f       	sbci	r31, 0xFB	; 251
    49ae:	80 81       	ld	r24, Z
    49b0:	61 e0       	ldi	r22, 0x01	; 1
    49b2:	8f 73       	andi	r24, 0x3F	; 63
    49b4:	df 91       	pop	r29
    49b6:	cf 91       	pop	r28
    49b8:	1f 91       	pop	r17
    49ba:	0f 91       	pop	r16
    49bc:	ff 90       	pop	r15
    49be:	ef 90       	pop	r14
    49c0:	df 90       	pop	r13
    49c2:	cf 90       	pop	r12
    49c4:	0c 94 77 37 	jmp	0x6eee	; 0x6eee <digitalWrite>
    49c8:	df 91       	pop	r29
    49ca:	cf 91       	pop	r28
    49cc:	1f 91       	pop	r17
    49ce:	0f 91       	pop	r16
    49d0:	ff 90       	pop	r15
    49d2:	ef 90       	pop	r14
    49d4:	df 90       	pop	r13
    49d6:	cf 90       	pop	r12
    49d8:	08 95       	ret

000049da <__vector_17>:
    49da:	1f 92       	push	r1
    49dc:	0f 92       	push	r0
    49de:	0f b6       	in	r0, 0x3f	; 63
    49e0:	0f 92       	push	r0
    49e2:	11 24       	eor	r1, r1
    49e4:	0b b6       	in	r0, 0x3b	; 59
    49e6:	0f 92       	push	r0
    49e8:	2f 93       	push	r18
    49ea:	3f 93       	push	r19
    49ec:	4f 93       	push	r20
    49ee:	5f 93       	push	r21
    49f0:	6f 93       	push	r22
    49f2:	7f 93       	push	r23
    49f4:	8f 93       	push	r24
    49f6:	9f 93       	push	r25
    49f8:	af 93       	push	r26
    49fa:	bf 93       	push	r27
    49fc:	ef 93       	push	r30
    49fe:	ff 93       	push	r31
    4a00:	48 e8       	ldi	r20, 0x88	; 136
    4a02:	50 e0       	ldi	r21, 0x00	; 0
    4a04:	64 e8       	ldi	r22, 0x84	; 132
    4a06:	70 e0       	ldi	r23, 0x00	; 0
    4a08:	81 e0       	ldi	r24, 0x01	; 1
    4a0a:	1f df       	rcall	.-450    	; 0x484a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    4a0c:	ff 91       	pop	r31
    4a0e:	ef 91       	pop	r30
    4a10:	bf 91       	pop	r27
    4a12:	af 91       	pop	r26
    4a14:	9f 91       	pop	r25
    4a16:	8f 91       	pop	r24
    4a18:	7f 91       	pop	r23
    4a1a:	6f 91       	pop	r22
    4a1c:	5f 91       	pop	r21
    4a1e:	4f 91       	pop	r20
    4a20:	3f 91       	pop	r19
    4a22:	2f 91       	pop	r18
    4a24:	0f 90       	pop	r0
    4a26:	0b be       	out	0x3b, r0	; 59
    4a28:	0f 90       	pop	r0
    4a2a:	0f be       	out	0x3f, r0	; 63
    4a2c:	0f 90       	pop	r0
    4a2e:	1f 90       	pop	r1
    4a30:	18 95       	reti

00004a32 <__vector_32>:
    4a32:	1f 92       	push	r1
    4a34:	0f 92       	push	r0
    4a36:	0f b6       	in	r0, 0x3f	; 63
    4a38:	0f 92       	push	r0
    4a3a:	11 24       	eor	r1, r1
    4a3c:	0b b6       	in	r0, 0x3b	; 59
    4a3e:	0f 92       	push	r0
    4a40:	2f 93       	push	r18
    4a42:	3f 93       	push	r19
    4a44:	4f 93       	push	r20
    4a46:	5f 93       	push	r21
    4a48:	6f 93       	push	r22
    4a4a:	7f 93       	push	r23
    4a4c:	8f 93       	push	r24
    4a4e:	9f 93       	push	r25
    4a50:	af 93       	push	r26
    4a52:	bf 93       	push	r27
    4a54:	ef 93       	push	r30
    4a56:	ff 93       	push	r31
    4a58:	48 e9       	ldi	r20, 0x98	; 152
    4a5a:	50 e0       	ldi	r21, 0x00	; 0
    4a5c:	64 e9       	ldi	r22, 0x94	; 148
    4a5e:	70 e0       	ldi	r23, 0x00	; 0
    4a60:	82 e0       	ldi	r24, 0x02	; 2
    4a62:	f3 de       	rcall	.-538    	; 0x484a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    4a64:	ff 91       	pop	r31
    4a66:	ef 91       	pop	r30
    4a68:	bf 91       	pop	r27
    4a6a:	af 91       	pop	r26
    4a6c:	9f 91       	pop	r25
    4a6e:	8f 91       	pop	r24
    4a70:	7f 91       	pop	r23
    4a72:	6f 91       	pop	r22
    4a74:	5f 91       	pop	r21
    4a76:	4f 91       	pop	r20
    4a78:	3f 91       	pop	r19
    4a7a:	2f 91       	pop	r18
    4a7c:	0f 90       	pop	r0
    4a7e:	0b be       	out	0x3b, r0	; 59
    4a80:	0f 90       	pop	r0
    4a82:	0f be       	out	0x3f, r0	; 63
    4a84:	0f 90       	pop	r0
    4a86:	1f 90       	pop	r1
    4a88:	18 95       	reti

00004a8a <__vector_42>:
    4a8a:	1f 92       	push	r1
    4a8c:	0f 92       	push	r0
    4a8e:	0f b6       	in	r0, 0x3f	; 63
    4a90:	0f 92       	push	r0
    4a92:	11 24       	eor	r1, r1
    4a94:	0b b6       	in	r0, 0x3b	; 59
    4a96:	0f 92       	push	r0
    4a98:	2f 93       	push	r18
    4a9a:	3f 93       	push	r19
    4a9c:	4f 93       	push	r20
    4a9e:	5f 93       	push	r21
    4aa0:	6f 93       	push	r22
    4aa2:	7f 93       	push	r23
    4aa4:	8f 93       	push	r24
    4aa6:	9f 93       	push	r25
    4aa8:	af 93       	push	r26
    4aaa:	bf 93       	push	r27
    4aac:	ef 93       	push	r30
    4aae:	ff 93       	push	r31
    4ab0:	48 ea       	ldi	r20, 0xA8	; 168
    4ab2:	50 e0       	ldi	r21, 0x00	; 0
    4ab4:	64 ea       	ldi	r22, 0xA4	; 164
    4ab6:	70 e0       	ldi	r23, 0x00	; 0
    4ab8:	83 e0       	ldi	r24, 0x03	; 3
    4aba:	c7 de       	rcall	.-626    	; 0x484a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    4abc:	ff 91       	pop	r31
    4abe:	ef 91       	pop	r30
    4ac0:	bf 91       	pop	r27
    4ac2:	af 91       	pop	r26
    4ac4:	9f 91       	pop	r25
    4ac6:	8f 91       	pop	r24
    4ac8:	7f 91       	pop	r23
    4aca:	6f 91       	pop	r22
    4acc:	5f 91       	pop	r21
    4ace:	4f 91       	pop	r20
    4ad0:	3f 91       	pop	r19
    4ad2:	2f 91       	pop	r18
    4ad4:	0f 90       	pop	r0
    4ad6:	0b be       	out	0x3b, r0	; 59
    4ad8:	0f 90       	pop	r0
    4ada:	0f be       	out	0x3f, r0	; 63
    4adc:	0f 90       	pop	r0
    4ade:	1f 90       	pop	r1
    4ae0:	18 95       	reti

00004ae2 <__vector_47>:
    4ae2:	1f 92       	push	r1
    4ae4:	0f 92       	push	r0
    4ae6:	0f b6       	in	r0, 0x3f	; 63
    4ae8:	0f 92       	push	r0
    4aea:	11 24       	eor	r1, r1
    4aec:	0b b6       	in	r0, 0x3b	; 59
    4aee:	0f 92       	push	r0
    4af0:	2f 93       	push	r18
    4af2:	3f 93       	push	r19
    4af4:	4f 93       	push	r20
    4af6:	5f 93       	push	r21
    4af8:	6f 93       	push	r22
    4afa:	7f 93       	push	r23
    4afc:	8f 93       	push	r24
    4afe:	9f 93       	push	r25
    4b00:	af 93       	push	r26
    4b02:	bf 93       	push	r27
    4b04:	ef 93       	push	r30
    4b06:	ff 93       	push	r31
    4b08:	48 e2       	ldi	r20, 0x28	; 40
    4b0a:	51 e0       	ldi	r21, 0x01	; 1
    4b0c:	64 e2       	ldi	r22, 0x24	; 36
    4b0e:	71 e0       	ldi	r23, 0x01	; 1
    4b10:	80 e0       	ldi	r24, 0x00	; 0
    4b12:	9b de       	rcall	.-714    	; 0x484a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    4b14:	ff 91       	pop	r31
    4b16:	ef 91       	pop	r30
    4b18:	bf 91       	pop	r27
    4b1a:	af 91       	pop	r26
    4b1c:	9f 91       	pop	r25
    4b1e:	8f 91       	pop	r24
    4b20:	7f 91       	pop	r23
    4b22:	6f 91       	pop	r22
    4b24:	5f 91       	pop	r21
    4b26:	4f 91       	pop	r20
    4b28:	3f 91       	pop	r19
    4b2a:	2f 91       	pop	r18
    4b2c:	0f 90       	pop	r0
    4b2e:	0b be       	out	0x3b, r0	; 59
    4b30:	0f 90       	pop	r0
    4b32:	0f be       	out	0x3f, r0	; 63
    4b34:	0f 90       	pop	r0
    4b36:	1f 90       	pop	r1
    4b38:	18 95       	reti

00004b3a <_ZN5ServoC1Ev>:
    4b3a:	fc 01       	movw	r30, r24
    4b3c:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <ServoCount>
    4b40:	90 33       	cpi	r25, 0x30	; 48
    4b42:	a0 f4       	brcc	.+40     	; 0x4b6c <_ZN5ServoC1Ev+0x32>
    4b44:	81 e0       	ldi	r24, 0x01	; 1
    4b46:	89 0f       	add	r24, r25
    4b48:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <ServoCount>
    4b4c:	90 83       	st	Z, r25
    4b4e:	89 2f       	mov	r24, r25
    4b50:	90 e0       	ldi	r25, 0x00	; 0
    4b52:	fc 01       	movw	r30, r24
    4b54:	ee 0f       	add	r30, r30
    4b56:	ff 1f       	adc	r31, r31
    4b58:	8e 0f       	add	r24, r30
    4b5a:	9f 1f       	adc	r25, r31
    4b5c:	fc 01       	movw	r30, r24
    4b5e:	e1 59       	subi	r30, 0x91	; 145
    4b60:	fb 4f       	sbci	r31, 0xFB	; 251
    4b62:	88 eb       	ldi	r24, 0xB8	; 184
    4b64:	9b e0       	ldi	r25, 0x0B	; 11
    4b66:	92 83       	std	Z+2, r25	; 0x02
    4b68:	81 83       	std	Z+1, r24	; 0x01
    4b6a:	08 95       	ret
    4b6c:	8f ef       	ldi	r24, 0xFF	; 255
    4b6e:	80 83       	st	Z, r24
    4b70:	08 95       	ret

00004b72 <_ZN5Servo6attachEiii>:
    4b72:	df 92       	push	r13
    4b74:	ef 92       	push	r14
    4b76:	ff 92       	push	r15
    4b78:	0f 93       	push	r16
    4b7a:	1f 93       	push	r17
    4b7c:	cf 93       	push	r28
    4b7e:	df 93       	push	r29
    4b80:	ec 01       	movw	r28, r24
    4b82:	d6 2e       	mov	r13, r22
    4b84:	7a 01       	movw	r14, r20
    4b86:	89 01       	movw	r16, r18
    4b88:	88 81       	ld	r24, Y
    4b8a:	80 33       	cpi	r24, 0x30	; 48
    4b8c:	08 f0       	brcs	.+2      	; 0x4b90 <_ZN5Servo6attachEiii+0x1e>
    4b8e:	68 c0       	rjmp	.+208    	; 0x4c60 <_ZN5Servo6attachEiii+0xee>
    4b90:	61 e0       	ldi	r22, 0x01	; 1
    4b92:	8d 2d       	mov	r24, r13
    4b94:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
    4b98:	88 81       	ld	r24, Y
    4b9a:	e8 2f       	mov	r30, r24
    4b9c:	f0 e0       	ldi	r31, 0x00	; 0
    4b9e:	9f 01       	movw	r18, r30
    4ba0:	22 0f       	add	r18, r18
    4ba2:	33 1f       	adc	r19, r19
    4ba4:	e2 0f       	add	r30, r18
    4ba6:	f3 1f       	adc	r31, r19
    4ba8:	e1 59       	subi	r30, 0x91	; 145
    4baa:	fb 4f       	sbci	r31, 0xFB	; 251
    4bac:	9d 2d       	mov	r25, r13
    4bae:	9f 73       	andi	r25, 0x3F	; 63
    4bb0:	20 81       	ld	r18, Z
    4bb2:	20 7c       	andi	r18, 0xC0	; 192
    4bb4:	d2 2e       	mov	r13, r18
    4bb6:	d9 2a       	or	r13, r25
    4bb8:	d0 82       	st	Z, r13
    4bba:	20 e2       	ldi	r18, 0x20	; 32
    4bbc:	32 e0       	ldi	r19, 0x02	; 2
    4bbe:	2e 19       	sub	r18, r14
    4bc0:	3f 09       	sbc	r19, r15
    4bc2:	37 ff       	sbrs	r19, 7
    4bc4:	02 c0       	rjmp	.+4      	; 0x4bca <_ZN5Servo6attachEiii+0x58>
    4bc6:	2d 5f       	subi	r18, 0xFD	; 253
    4bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    4bca:	35 95       	asr	r19
    4bcc:	27 95       	ror	r18
    4bce:	35 95       	asr	r19
    4bd0:	27 95       	ror	r18
    4bd2:	29 83       	std	Y+1, r18	; 0x01
    4bd4:	20 e6       	ldi	r18, 0x60	; 96
    4bd6:	39 e0       	ldi	r19, 0x09	; 9
    4bd8:	20 1b       	sub	r18, r16
    4bda:	31 0b       	sbc	r19, r17
    4bdc:	37 ff       	sbrs	r19, 7
    4bde:	02 c0       	rjmp	.+4      	; 0x4be4 <_ZN5Servo6attachEiii+0x72>
    4be0:	2d 5f       	subi	r18, 0xFD	; 253
    4be2:	3f 4f       	sbci	r19, 0xFF	; 255
    4be4:	35 95       	asr	r19
    4be6:	27 95       	ror	r18
    4be8:	35 95       	asr	r19
    4bea:	27 95       	ror	r18
    4bec:	2a 83       	std	Y+2, r18	; 0x02
    4bee:	2c e0       	ldi	r18, 0x0C	; 12
    4bf0:	62 2f       	mov	r22, r18
    4bf2:	0e 94 cc 3a 	call	0x7598	; 0x7598 <__udivmodqi4>
    4bf6:	28 9f       	mul	r18, r24
    4bf8:	b0 01       	movw	r22, r0
    4bfa:	11 24       	eor	r1, r1
    4bfc:	40 e0       	ldi	r20, 0x00	; 0
    4bfe:	50 e0       	ldi	r21, 0x00	; 0
    4c00:	9b 01       	movw	r18, r22
    4c02:	24 0f       	add	r18, r20
    4c04:	35 1f       	adc	r19, r21
    4c06:	f9 01       	movw	r30, r18
    4c08:	ee 0f       	add	r30, r30
    4c0a:	ff 1f       	adc	r31, r31
    4c0c:	2e 0f       	add	r18, r30
    4c0e:	3f 1f       	adc	r19, r31
    4c10:	f9 01       	movw	r30, r18
    4c12:	e1 59       	subi	r30, 0x91	; 145
    4c14:	fb 4f       	sbci	r31, 0xFB	; 251
    4c16:	90 81       	ld	r25, Z
    4c18:	96 fd       	sbrc	r25, 6
    4c1a:	16 c0       	rjmp	.+44     	; 0x4c48 <_ZN5Servo6attachEiii+0xd6>
    4c1c:	4f 5f       	subi	r20, 0xFF	; 255
    4c1e:	5f 4f       	sbci	r21, 0xFF	; 255
    4c20:	4c 30       	cpi	r20, 0x0C	; 12
    4c22:	51 05       	cpc	r21, r1
    4c24:	69 f7       	brne	.-38     	; 0x4c00 <_ZN5Servo6attachEiii+0x8e>
    4c26:	81 30       	cpi	r24, 0x01	; 1
    4c28:	21 f5       	brne	.+72     	; 0x4c72 <_ZN5Servo6attachEiii+0x100>
    4c2a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    4c2e:	82 e0       	ldi	r24, 0x02	; 2
    4c30:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
    4c34:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
    4c38:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
    4c3c:	b1 9a       	sbi	0x16, 1	; 22
    4c3e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
    4c42:	82 60       	ori	r24, 0x02	; 2
    4c44:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
    4c48:	e8 81       	ld	r30, Y
    4c4a:	f0 e0       	ldi	r31, 0x00	; 0
    4c4c:	cf 01       	movw	r24, r30
    4c4e:	88 0f       	add	r24, r24
    4c50:	99 1f       	adc	r25, r25
    4c52:	e8 0f       	add	r30, r24
    4c54:	f9 1f       	adc	r31, r25
    4c56:	e1 59       	subi	r30, 0x91	; 145
    4c58:	fb 4f       	sbci	r31, 0xFB	; 251
    4c5a:	80 81       	ld	r24, Z
    4c5c:	80 64       	ori	r24, 0x40	; 64
    4c5e:	80 83       	st	Z, r24
    4c60:	88 81       	ld	r24, Y
    4c62:	df 91       	pop	r29
    4c64:	cf 91       	pop	r28
    4c66:	1f 91       	pop	r17
    4c68:	0f 91       	pop	r16
    4c6a:	ff 90       	pop	r15
    4c6c:	ef 90       	pop	r14
    4c6e:	df 90       	pop	r13
    4c70:	08 95       	ret
    4c72:	82 30       	cpi	r24, 0x02	; 2
    4c74:	61 f4       	brne	.+24     	; 0x4c8e <_ZN5Servo6attachEiii+0x11c>
    4c76:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    4c7a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
    4c7e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
    4c82:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
    4c86:	88 bb       	out	0x18, r24	; 24
    4c88:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
    4c8c:	dd cf       	rjmp	.-70     	; 0x4c48 <_ZN5Servo6attachEiii+0xd6>
    4c8e:	83 30       	cpi	r24, 0x03	; 3
    4c90:	69 f4       	brne	.+26     	; 0x4cac <_ZN5Servo6attachEiii+0x13a>
    4c92:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    4c96:	82 e0       	ldi	r24, 0x02	; 2
    4c98:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
    4c9c:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
    4ca0:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
    4ca4:	89 bb       	out	0x19, r24	; 25
    4ca6:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
    4caa:	ce cf       	rjmp	.-100    	; 0x4c48 <_ZN5Servo6attachEiii+0xd6>
    4cac:	81 11       	cpse	r24, r1
    4cae:	cc cf       	rjmp	.-104    	; 0x4c48 <_ZN5Servo6attachEiii+0xd6>
    4cb0:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    4cb4:	82 e0       	ldi	r24, 0x02	; 2
    4cb6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x7c0121>
    4cba:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
    4cbe:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
    4cc2:	8a bb       	out	0x1a, r24	; 26
    4cc4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7c0073>
    4cc8:	bf cf       	rjmp	.-130    	; 0x4c48 <_ZN5Servo6attachEiii+0xd6>

00004cca <_ZN5Servo6attachEi>:
    4cca:	20 e6       	ldi	r18, 0x60	; 96
    4ccc:	39 e0       	ldi	r19, 0x09	; 9
    4cce:	40 e2       	ldi	r20, 0x20	; 32
    4cd0:	52 e0       	ldi	r21, 0x02	; 2
    4cd2:	4f cf       	rjmp	.-354    	; 0x4b72 <_ZN5Servo6attachEiii>

00004cd4 <_ZN5Servo17writeMicrosecondsEi>:
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
{
    4cd4:	fc 01       	movw	r30, r24
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    4cd6:	90 81       	ld	r25, Z
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
    4cd8:	90 33       	cpi	r25, 0x30	; 48
    4cda:	88 f5       	brcc	.+98     	; 0x4d3e <_ZN5Servo17writeMicrosecondsEi+0x6a>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    4cdc:	81 81       	ldd	r24, Z+1	; 0x01
    4cde:	28 e8       	ldi	r18, 0x88	; 136
    4ce0:	30 e0       	ldi	r19, 0x00	; 0
    4ce2:	28 1b       	sub	r18, r24
    4ce4:	31 09       	sbc	r19, r1
    4ce6:	87 fd       	sbrc	r24, 7
    4ce8:	33 95       	inc	r19
    4cea:	22 0f       	add	r18, r18
    4cec:	33 1f       	adc	r19, r19
    4cee:	22 0f       	add	r18, r18
    4cf0:	33 1f       	adc	r19, r19
    4cf2:	62 17       	cp	r22, r18
    4cf4:	73 07       	cpc	r23, r19
    4cf6:	84 f0       	brlt	.+32     	; 0x4d18 <_ZN5Servo17writeMicrosecondsEi+0x44>
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
    4cf8:	82 81       	ldd	r24, Z+2	; 0x02
    4cfa:	48 e5       	ldi	r20, 0x58	; 88
    4cfc:	52 e0       	ldi	r21, 0x02	; 2
    4cfe:	48 1b       	sub	r20, r24
    4d00:	51 09       	sbc	r21, r1
    4d02:	87 fd       	sbrc	r24, 7
    4d04:	53 95       	inc	r21
    4d06:	44 0f       	add	r20, r20
    4d08:	55 1f       	adc	r21, r21
    4d0a:	44 0f       	add	r20, r20
    4d0c:	55 1f       	adc	r21, r21
    4d0e:	9b 01       	movw	r18, r22
    4d10:	46 17       	cp	r20, r22
    4d12:	57 07       	cpc	r21, r23
    4d14:	0c f4       	brge	.+2      	; 0x4d18 <_ZN5Servo17writeMicrosecondsEi+0x44>
    4d16:	9a 01       	movw	r18, r20
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    4d18:	22 50       	subi	r18, 0x02	; 2
    4d1a:	31 09       	sbc	r19, r1
    4d1c:	22 0f       	add	r18, r18
    4d1e:	33 1f       	adc	r19, r19

    uint8_t oldSREG = SREG;
    4d20:	4f b7       	in	r20, 0x3f	; 63
    cli();
    4d22:	f8 94       	cli
    servos[channel].ticks = value;
    4d24:	89 2f       	mov	r24, r25
    4d26:	90 e0       	ldi	r25, 0x00	; 0
    4d28:	fc 01       	movw	r30, r24
    4d2a:	ee 0f       	add	r30, r30
    4d2c:	ff 1f       	adc	r31, r31
    4d2e:	8e 0f       	add	r24, r30
    4d30:	9f 1f       	adc	r25, r31
    4d32:	fc 01       	movw	r30, r24
    4d34:	e1 59       	subi	r30, 0x91	; 145
    4d36:	fb 4f       	sbci	r31, 0xFB	; 251
    4d38:	32 83       	std	Z+2, r19	; 0x02
    4d3a:	21 83       	std	Z+1, r18	; 0x01
    SREG = oldSREG;
    4d3c:	4f bf       	out	0x3f, r20	; 63
    4d3e:	08 95       	ret

00004d40 <_ZN5Servo5writeEi>:
    finISR(timer);
  }
}

void Servo::write(int value)
{
    4d40:	af 92       	push	r10
    4d42:	bf 92       	push	r11
    4d44:	cf 92       	push	r12
    4d46:	df 92       	push	r13
    4d48:	ef 92       	push	r14
    4d4a:	ff 92       	push	r15
    4d4c:	0f 93       	push	r16
    4d4e:	1f 93       	push	r17
    4d50:	cf 93       	push	r28
    4d52:	df 93       	push	r29
    4d54:	ec 01       	movw	r28, r24
  if(value < MIN_PULSE_WIDTH)
    4d56:	60 32       	cpi	r22, 0x20	; 32
    4d58:	82 e0       	ldi	r24, 0x02	; 2
    4d5a:	78 07       	cpc	r23, r24
    4d5c:	0c f0       	brlt	.+2      	; 0x4d60 <_ZN5Servo5writeEi+0x20>
    4d5e:	3f c0       	rjmp	.+126    	; 0x4dde <_ZN5Servo5writeEi+0x9e>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    4d60:	77 fd       	sbrc	r23, 7
    4d62:	06 c0       	rjmp	.+12     	; 0x4d70 <_ZN5Servo5writeEi+0x30>
    if(value > 180) value = 180;
    4d64:	65 3b       	cpi	r22, 0xB5	; 181
    4d66:	71 05       	cpc	r23, r1
    4d68:	2c f0       	brlt	.+10     	; 0x4d74 <_ZN5Servo5writeEi+0x34>
    4d6a:	64 eb       	ldi	r22, 0xB4	; 180
    4d6c:	70 e0       	ldi	r23, 0x00	; 0
    4d6e:	02 c0       	rjmp	.+4      	; 0x4d74 <_ZN5Servo5writeEi+0x34>

void Servo::write(int value)
{
  if(value < MIN_PULSE_WIDTH)
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    4d70:	60 e0       	ldi	r22, 0x00	; 0
    4d72:	70 e0       	ldi	r23, 0x00	; 0
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
    4d74:	89 81       	ldd	r24, Y+1	; 0x01
    4d76:	28 e8       	ldi	r18, 0x88	; 136
    4d78:	30 e0       	ldi	r19, 0x00	; 0
    4d7a:	59 01       	movw	r10, r18
    4d7c:	a8 1a       	sub	r10, r24
    4d7e:	b1 08       	sbc	r11, r1
    4d80:	87 fd       	sbrc	r24, 7
    4d82:	b3 94       	inc	r11
    4d84:	aa 0c       	add	r10, r10
    4d86:	bb 1c       	adc	r11, r11
    4d88:	aa 0c       	add	r10, r10
    4d8a:	bb 1c       	adc	r11, r11
    4d8c:	0b 2c       	mov	r0, r11
    4d8e:	00 0c       	add	r0, r0
    4d90:	cc 08       	sbc	r12, r12
    4d92:	dd 08       	sbc	r13, r13
    4d94:	07 2e       	mov	r0, r23
    4d96:	00 0c       	add	r0, r0
    4d98:	88 0b       	sbc	r24, r24
    4d9a:	99 0b       	sbc	r25, r25
    4d9c:	2a 81       	ldd	r18, Y+2	; 0x02
    4d9e:	08 e5       	ldi	r16, 0x58	; 88
    4da0:	12 e0       	ldi	r17, 0x02	; 2
    4da2:	02 1b       	sub	r16, r18
    4da4:	11 09       	sbc	r17, r1
    4da6:	27 fd       	sbrc	r18, 7
    4da8:	13 95       	inc	r17
    4daa:	00 0f       	add	r16, r16
    4dac:	11 1f       	adc	r17, r17
    4dae:	00 0f       	add	r16, r16
    4db0:	11 1f       	adc	r17, r17
    4db2:	01 2e       	mov	r0, r17
    4db4:	00 0c       	add	r0, r0
    4db6:	22 0b       	sbc	r18, r18
    4db8:	33 0b       	sbc	r19, r19
    4dba:	3f 93       	push	r19
    4dbc:	2f 93       	push	r18
    4dbe:	1f 93       	push	r17
    4dc0:	0f 93       	push	r16
    4dc2:	14 eb       	ldi	r17, 0xB4	; 180
    4dc4:	e1 2e       	mov	r14, r17
    4dc6:	f1 2c       	mov	r15, r1
    4dc8:	00 e0       	ldi	r16, 0x00	; 0
    4dca:	10 e0       	ldi	r17, 0x00	; 0
    4dcc:	20 e0       	ldi	r18, 0x00	; 0
    4dce:	30 e0       	ldi	r19, 0x00	; 0
    4dd0:	a9 01       	movw	r20, r18
    4dd2:	0e 94 ff 37 	call	0x6ffe	; 0x6ffe <_Z3maplllll>
    4dd6:	0f 90       	pop	r0
    4dd8:	0f 90       	pop	r0
    4dda:	0f 90       	pop	r0
    4ddc:	0f 90       	pop	r0
  }
  this->writeMicroseconds(value);
    4dde:	ce 01       	movw	r24, r28
}
    4de0:	df 91       	pop	r29
    4de2:	cf 91       	pop	r28
    4de4:	1f 91       	pop	r17
    4de6:	0f 91       	pop	r16
    4de8:	ff 90       	pop	r15
    4dea:	ef 90       	pop	r14
    4dec:	df 90       	pop	r13
    4dee:	cf 90       	pop	r12
    4df0:	bf 90       	pop	r11
    4df2:	af 90       	pop	r10
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
  }
  this->writeMicroseconds(value);
    4df4:	6f cf       	rjmp	.-290    	; 0x4cd4 <_ZN5Servo17writeMicrosecondsEi>

00004df6 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    4df6:	cf 93       	push	r28
  uint8_t sreg = SREG;
    4df8:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    4dfa:	f8 94       	cli
  if (!initialized) {
    4dfc:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <_ZN8SPIClass11initializedE>
    4e00:	81 11       	cpse	r24, r1
    4e02:	27 c0       	rjmp	.+78     	; 0x4e52 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    4e04:	e0 ef       	ldi	r30, 0xF0	; 240
    4e06:	fb e0       	ldi	r31, 0x0B	; 11
    4e08:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    4e0a:	ea ea       	ldi	r30, 0xAA	; 170
    4e0c:	fb e0       	ldi	r31, 0x0B	; 11
    4e0e:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    4e10:	e8 2f       	mov	r30, r24
    4e12:	f0 e0       	ldi	r31, 0x00	; 0
    4e14:	ee 0f       	add	r30, r30
    4e16:	ff 1f       	adc	r31, r31
    4e18:	eb 5c       	subi	r30, 0xCB	; 203
    4e1a:	f3 4f       	sbci	r31, 0xF3	; 243
    4e1c:	a5 91       	lpm	r26, Z+
    4e1e:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    4e20:	ec 91       	ld	r30, X
    4e22:	e9 23       	and	r30, r25
    4e24:	21 f4       	brne	.+8      	; 0x4e2e <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    4e26:	61 e0       	ldi	r22, 0x01	; 1
    4e28:	85 e3       	ldi	r24, 0x35	; 53
    4e2a:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    4e2e:	61 e0       	ldi	r22, 0x01	; 1
    4e30:	85 e3       	ldi	r24, 0x35	; 53
    4e32:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    4e36:	8c b5       	in	r24, 0x2c	; 44
    4e38:	80 61       	ori	r24, 0x10	; 16
    4e3a:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    4e3c:	8c b5       	in	r24, 0x2c	; 44
    4e3e:	80 64       	ori	r24, 0x40	; 64
    4e40:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    4e42:	61 e0       	ldi	r22, 0x01	; 1
    4e44:	84 e3       	ldi	r24, 0x34	; 52
    4e46:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
    pinMode(MOSI, OUTPUT);
    4e4a:	61 e0       	ldi	r22, 0x01	; 1
    4e4c:	83 e3       	ldi	r24, 0x33	; 51
    4e4e:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <pinMode>
  }
  initialized++; // reference count
    4e52:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <_ZN8SPIClass11initializedE>
    4e56:	8f 5f       	subi	r24, 0xFF	; 255
    4e58:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    4e5c:	cf bf       	out	0x3f, r28	; 63
}
    4e5e:	cf 91       	pop	r28
    4e60:	08 95       	ret

00004e62 <__vector_20>:
void (*TimerOne::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
    4e62:	1f 92       	push	r1
    4e64:	0f 92       	push	r0
    4e66:	0f b6       	in	r0, 0x3f	; 63
    4e68:	0f 92       	push	r0
    4e6a:	11 24       	eor	r1, r1
    4e6c:	0b b6       	in	r0, 0x3b	; 59
    4e6e:	0f 92       	push	r0
    4e70:	2f 93       	push	r18
    4e72:	3f 93       	push	r19
    4e74:	4f 93       	push	r20
    4e76:	5f 93       	push	r21
    4e78:	6f 93       	push	r22
    4e7a:	7f 93       	push	r23
    4e7c:	8f 93       	push	r24
    4e7e:	9f 93       	push	r25
    4e80:	af 93       	push	r26
    4e82:	bf 93       	push	r27
    4e84:	ef 93       	push	r30
    4e86:	ff 93       	push	r31
  Timer1.isrCallback();
    4e88:	e0 91 03 05 	lds	r30, 0x0503	; 0x800503 <_ZN8TimerOne11isrCallbackE>
    4e8c:	f0 91 04 05 	lds	r31, 0x0504	; 0x800504 <_ZN8TimerOne11isrCallbackE+0x1>
    4e90:	19 95       	eicall
}
    4e92:	ff 91       	pop	r31
    4e94:	ef 91       	pop	r30
    4e96:	bf 91       	pop	r27
    4e98:	af 91       	pop	r26
    4e9a:	9f 91       	pop	r25
    4e9c:	8f 91       	pop	r24
    4e9e:	7f 91       	pop	r23
    4ea0:	6f 91       	pop	r22
    4ea2:	5f 91       	pop	r21
    4ea4:	4f 91       	pop	r20
    4ea6:	3f 91       	pop	r19
    4ea8:	2f 91       	pop	r18
    4eaa:	0f 90       	pop	r0
    4eac:	0b be       	out	0x3b, r0	; 59
    4eae:	0f 90       	pop	r0
    4eb0:	0f be       	out	0x3f, r0	; 63
    4eb2:	0f 90       	pop	r0
    4eb4:	1f 90       	pop	r1
    4eb6:	18 95       	reti

00004eb8 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    4eb8:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <twi_state>
    4ebc:	81 e0       	ldi	r24, 0x01	; 1
    4ebe:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <twi_sendStop>
    4ec2:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <twi_inRepStart>
    4ec6:	61 e0       	ldi	r22, 0x01	; 1
    4ec8:	84 e1       	ldi	r24, 0x14	; 20
    4eca:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    4ece:	61 e0       	ldi	r22, 0x01	; 1
    4ed0:	85 e1       	ldi	r24, 0x15	; 21
    4ed2:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    4ed6:	e9 eb       	ldi	r30, 0xB9	; 185
    4ed8:	f0 e0       	ldi	r31, 0x00	; 0
    4eda:	80 81       	ld	r24, Z
    4edc:	8e 7f       	andi	r24, 0xFE	; 254
    4ede:	80 83       	st	Z, r24
    4ee0:	80 81       	ld	r24, Z
    4ee2:	8d 7f       	andi	r24, 0xFD	; 253
    4ee4:	80 83       	st	Z, r24
    4ee6:	88 e4       	ldi	r24, 0x48	; 72
    4ee8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4eec:	85 e4       	ldi	r24, 0x45	; 69
    4eee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ef2:	08 95       	ret

00004ef4 <twi_disable>:
    4ef4:	ec eb       	ldi	r30, 0xBC	; 188
    4ef6:	f0 e0       	ldi	r31, 0x00	; 0
    4ef8:	80 81       	ld	r24, Z
    4efa:	8a 7b       	andi	r24, 0xBA	; 186
    4efc:	80 83       	st	Z, r24
    4efe:	60 e0       	ldi	r22, 0x00	; 0
    4f00:	84 e1       	ldi	r24, 0x14	; 20
    4f02:	0e 94 77 37 	call	0x6eee	; 0x6eee <digitalWrite>
    4f06:	60 e0       	ldi	r22, 0x00	; 0
    4f08:	85 e1       	ldi	r24, 0x15	; 21
    4f0a:	0c 94 77 37 	jmp	0x6eee	; 0x6eee <digitalWrite>

00004f0e <twi_setFrequency>:
    4f0e:	9b 01       	movw	r18, r22
    4f10:	ac 01       	movw	r20, r24
    4f12:	60 e0       	ldi	r22, 0x00	; 0
    4f14:	74 e2       	ldi	r23, 0x24	; 36
    4f16:	84 ef       	ldi	r24, 0xF4	; 244
    4f18:	90 e0       	ldi	r25, 0x00	; 0
    4f1a:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__udivmodsi4>
    4f1e:	da 01       	movw	r26, r20
    4f20:	c9 01       	movw	r24, r18
    4f22:	40 97       	sbiw	r24, 0x10	; 16
    4f24:	a1 09       	sbc	r26, r1
    4f26:	b1 09       	sbc	r27, r1
    4f28:	b6 95       	lsr	r27
    4f2a:	a7 95       	ror	r26
    4f2c:	97 95       	ror	r25
    4f2e:	87 95       	ror	r24
    4f30:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4f34:	08 95       	ret

00004f36 <twi_transmit>:
    4f36:	40 91 27 05 	lds	r20, 0x0527	; 0x800527 <twi_txBufferLength>
    4f3a:	26 2f       	mov	r18, r22
    4f3c:	30 e0       	ldi	r19, 0x00	; 0
    4f3e:	24 0f       	add	r18, r20
    4f40:	31 1d       	adc	r19, r1
    4f42:	21 32       	cpi	r18, 0x21	; 33
    4f44:	31 05       	cpc	r19, r1
    4f46:	dc f4       	brge	.+54     	; 0x4f7e <twi_transmit+0x48>
    4f48:	20 91 78 05 	lds	r18, 0x0578	; 0x800578 <twi_state>
    4f4c:	24 30       	cpi	r18, 0x04	; 4
    4f4e:	c9 f4       	brne	.+50     	; 0x4f82 <twi_transmit+0x4c>
    4f50:	fc 01       	movw	r30, r24
    4f52:	80 e0       	ldi	r24, 0x00	; 0
    4f54:	90 e0       	ldi	r25, 0x00	; 0
    4f56:	86 17       	cp	r24, r22
    4f58:	58 f4       	brcc	.+22     	; 0x4f70 <twi_transmit+0x3a>
    4f5a:	30 91 27 05 	lds	r19, 0x0527	; 0x800527 <twi_txBufferLength>
    4f5e:	21 91       	ld	r18, Z+
    4f60:	dc 01       	movw	r26, r24
    4f62:	a7 5d       	subi	r26, 0xD7	; 215
    4f64:	ba 4f       	sbci	r27, 0xFA	; 250
    4f66:	a3 0f       	add	r26, r19
    4f68:	b1 1d       	adc	r27, r1
    4f6a:	2c 93       	st	X, r18
    4f6c:	01 96       	adiw	r24, 0x01	; 1
    4f6e:	f3 cf       	rjmp	.-26     	; 0x4f56 <twi_transmit+0x20>
    4f70:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <twi_txBufferLength>
    4f74:	68 0f       	add	r22, r24
    4f76:	60 93 27 05 	sts	0x0527, r22	; 0x800527 <twi_txBufferLength>
    4f7a:	80 e0       	ldi	r24, 0x00	; 0
    4f7c:	08 95       	ret
    4f7e:	81 e0       	ldi	r24, 0x01	; 1
    4f80:	08 95       	ret
    4f82:	82 e0       	ldi	r24, 0x02	; 2
    4f84:	08 95       	ret

00004f86 <twi_attachSlaveRxEvent>:
    4f86:	90 93 6c 05 	sts	0x056C, r25	; 0x80056c <twi_onSlaveReceive+0x1>
    4f8a:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <twi_onSlaveReceive>
    4f8e:	08 95       	ret

00004f90 <twi_attachSlaveTxEvent>:
    4f90:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <twi_onSlaveTransmit+0x1>
    4f94:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <twi_onSlaveTransmit>
    4f98:	08 95       	ret

00004f9a <twi_releaseBus>:
    4f9a:	85 ec       	ldi	r24, 0xC5	; 197
    4f9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4fa0:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <twi_state>
    4fa4:	08 95       	ret

00004fa6 <twi_handleTimeout>:
    4fa6:	cf 93       	push	r28
    4fa8:	df 93       	push	r29
    4faa:	91 e0       	ldi	r25, 0x01	; 1
    4fac:	90 93 70 05 	sts	0x0570, r25	; 0x800570 <twi_timed_out_flag>
    4fb0:	88 23       	and	r24, r24
    4fb2:	51 f0       	breq	.+20     	; 0x4fc8 <twi_handleTimeout+0x22>
    4fb4:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4fb8:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    4fbc:	9b df       	rcall	.-202    	; 0x4ef4 <twi_disable>
    4fbe:	7c df       	rcall	.-264    	; 0x4eb8 <twi_init>
    4fc0:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    4fc4:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4fc8:	df 91       	pop	r29
    4fca:	cf 91       	pop	r28
    4fcc:	08 95       	ret

00004fce <twi_writeTo>:
    4fce:	4f 92       	push	r4
    4fd0:	5f 92       	push	r5
    4fd2:	6f 92       	push	r6
    4fd4:	7f 92       	push	r7
    4fd6:	8f 92       	push	r8
    4fd8:	9f 92       	push	r9
    4fda:	af 92       	push	r10
    4fdc:	bf 92       	push	r11
    4fde:	cf 92       	push	r12
    4fe0:	df 92       	push	r13
    4fe2:	ef 92       	push	r14
    4fe4:	ff 92       	push	r15
    4fe6:	0f 93       	push	r16
    4fe8:	1f 93       	push	r17
    4fea:	cf 93       	push	r28
    4fec:	df 93       	push	r29
    4fee:	41 32       	cpi	r20, 0x21	; 33
    4ff0:	08 f0       	brcs	.+2      	; 0x4ff4 <twi_writeTo+0x26>
    4ff2:	c5 c0       	rjmp	.+394    	; 0x517e <twi_writeTo+0x1b0>
    4ff4:	12 2f       	mov	r17, r18
    4ff6:	f4 2e       	mov	r15, r20
    4ff8:	d7 2e       	mov	r13, r23
    4ffa:	e6 2e       	mov	r14, r22
    4ffc:	d8 2f       	mov	r29, r24
    4ffe:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <micros>
    5002:	4b 01       	movw	r8, r22
    5004:	5c 01       	movw	r10, r24
    5006:	c0 91 78 05 	lds	r28, 0x0578	; 0x800578 <twi_state>
    500a:	cc 23       	and	r28, r28
    500c:	11 f1       	breq	.+68     	; 0x5052 <twi_writeTo+0x84>
    500e:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <twi_timeout_us>
    5012:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <twi_timeout_us+0x1>
    5016:	a0 91 73 05 	lds	r26, 0x0573	; 0x800573 <twi_timeout_us+0x2>
    501a:	b0 91 74 05 	lds	r27, 0x0574	; 0x800574 <twi_timeout_us+0x3>
    501e:	89 2b       	or	r24, r25
    5020:	8a 2b       	or	r24, r26
    5022:	8b 2b       	or	r24, r27
    5024:	81 f3       	breq	.-32     	; 0x5006 <twi_writeTo+0x38>
    5026:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <micros>
    502a:	40 90 71 05 	lds	r4, 0x0571	; 0x800571 <twi_timeout_us>
    502e:	50 90 72 05 	lds	r5, 0x0572	; 0x800572 <twi_timeout_us+0x1>
    5032:	60 90 73 05 	lds	r6, 0x0573	; 0x800573 <twi_timeout_us+0x2>
    5036:	70 90 74 05 	lds	r7, 0x0574	; 0x800574 <twi_timeout_us+0x3>
    503a:	dc 01       	movw	r26, r24
    503c:	cb 01       	movw	r24, r22
    503e:	88 19       	sub	r24, r8
    5040:	99 09       	sbc	r25, r9
    5042:	aa 09       	sbc	r26, r10
    5044:	bb 09       	sbc	r27, r11
    5046:	48 16       	cp	r4, r24
    5048:	59 06       	cpc	r5, r25
    504a:	6a 06       	cpc	r6, r26
    504c:	7b 06       	cpc	r7, r27
    504e:	d8 f6       	brcc	.-74     	; 0x5006 <twi_writeTo+0x38>
    5050:	83 c0       	rjmp	.+262    	; 0x5158 <twi_writeTo+0x18a>
    5052:	82 e0       	ldi	r24, 0x02	; 2
    5054:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <twi_state>
    5058:	00 93 76 05 	sts	0x0576, r16	; 0x800576 <twi_sendStop>
    505c:	8f ef       	ldi	r24, 0xFF	; 255
    505e:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <twi_error>
    5062:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <twi_masterBufferIndex>
    5066:	f0 92 49 05 	sts	0x0549, r15	; 0x800549 <twi_masterBufferLength>
    506a:	9e 2d       	mov	r25, r14
    506c:	ab e4       	ldi	r26, 0x4B	; 75
    506e:	b5 e0       	ldi	r27, 0x05	; 5
    5070:	ee 2d       	mov	r30, r14
    5072:	fd 2d       	mov	r31, r13
    5074:	8e 2f       	mov	r24, r30
    5076:	89 1b       	sub	r24, r25
    5078:	8f 15       	cp	r24, r15
    507a:	18 f4       	brcc	.+6      	; 0x5082 <twi_writeTo+0xb4>
    507c:	81 91       	ld	r24, Z+
    507e:	8d 93       	st	X+, r24
    5080:	f9 cf       	rjmp	.-14     	; 0x5074 <twi_writeTo+0xa6>
    5082:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <twi_slarw>
    5086:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <twi_slarw>
    508a:	dd 0f       	add	r29, r29
    508c:	d9 2b       	or	r29, r25
    508e:	d0 93 77 05 	sts	0x0577, r29	; 0x800577 <twi_slarw>
    5092:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <twi_inRepStart>
    5096:	81 30       	cpi	r24, 0x01	; 1
    5098:	89 f5       	brne	.+98     	; 0x50fc <twi_writeTo+0x12e>
    509a:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <twi_inRepStart>
    509e:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <micros>
    50a2:	6b 01       	movw	r12, r22
    50a4:	7c 01       	movw	r14, r24
    50a6:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <twi_slarw>
    50aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    50ae:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <twi_timeout_us>
    50b2:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <twi_timeout_us+0x1>
    50b6:	a0 91 73 05 	lds	r26, 0x0573	; 0x800573 <twi_timeout_us+0x2>
    50ba:	b0 91 74 05 	lds	r27, 0x0574	; 0x800574 <twi_timeout_us+0x3>
    50be:	89 2b       	or	r24, r25
    50c0:	8a 2b       	or	r24, r26
    50c2:	8b 2b       	or	r24, r27
    50c4:	a9 f0       	breq	.+42     	; 0x50f0 <twi_writeTo+0x122>
    50c6:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <micros>
    50ca:	80 90 71 05 	lds	r8, 0x0571	; 0x800571 <twi_timeout_us>
    50ce:	90 90 72 05 	lds	r9, 0x0572	; 0x800572 <twi_timeout_us+0x1>
    50d2:	a0 90 73 05 	lds	r10, 0x0573	; 0x800573 <twi_timeout_us+0x2>
    50d6:	b0 90 74 05 	lds	r11, 0x0574	; 0x800574 <twi_timeout_us+0x3>
    50da:	dc 01       	movw	r26, r24
    50dc:	cb 01       	movw	r24, r22
    50de:	8c 19       	sub	r24, r12
    50e0:	9d 09       	sbc	r25, r13
    50e2:	ae 09       	sbc	r26, r14
    50e4:	bf 09       	sbc	r27, r15
    50e6:	88 16       	cp	r8, r24
    50e8:	99 06       	cpc	r9, r25
    50ea:	aa 06       	cpc	r10, r26
    50ec:	bb 06       	cpc	r11, r27
    50ee:	a0 f1       	brcs	.+104    	; 0x5158 <twi_writeTo+0x18a>
    50f0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    50f4:	83 fd       	sbrc	r24, 3
    50f6:	d7 cf       	rjmp	.-82     	; 0x50a6 <twi_writeTo+0xd8>
    50f8:	85 ec       	ldi	r24, 0xC5	; 197
    50fa:	01 c0       	rjmp	.+2      	; 0x50fe <twi_writeTo+0x130>
    50fc:	85 ee       	ldi	r24, 0xE5	; 229
    50fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5102:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <micros>
    5106:	6b 01       	movw	r12, r22
    5108:	7c 01       	movw	r14, r24
    510a:	11 23       	and	r17, r17
    510c:	51 f1       	breq	.+84     	; 0x5162 <twi_writeTo+0x194>
    510e:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <twi_state>
    5112:	82 30       	cpi	r24, 0x02	; 2
    5114:	31 f5       	brne	.+76     	; 0x5162 <twi_writeTo+0x194>
    5116:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <twi_timeout_us>
    511a:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <twi_timeout_us+0x1>
    511e:	a0 91 73 05 	lds	r26, 0x0573	; 0x800573 <twi_timeout_us+0x2>
    5122:	b0 91 74 05 	lds	r27, 0x0574	; 0x800574 <twi_timeout_us+0x3>
    5126:	89 2b       	or	r24, r25
    5128:	8a 2b       	or	r24, r26
    512a:	8b 2b       	or	r24, r27
    512c:	71 f3       	breq	.-36     	; 0x510a <twi_writeTo+0x13c>
    512e:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <micros>
    5132:	80 90 71 05 	lds	r8, 0x0571	; 0x800571 <twi_timeout_us>
    5136:	90 90 72 05 	lds	r9, 0x0572	; 0x800572 <twi_timeout_us+0x1>
    513a:	a0 90 73 05 	lds	r10, 0x0573	; 0x800573 <twi_timeout_us+0x2>
    513e:	b0 90 74 05 	lds	r11, 0x0574	; 0x800574 <twi_timeout_us+0x3>
    5142:	dc 01       	movw	r26, r24
    5144:	cb 01       	movw	r24, r22
    5146:	8c 19       	sub	r24, r12
    5148:	9d 09       	sbc	r25, r13
    514a:	ae 09       	sbc	r26, r14
    514c:	bf 09       	sbc	r27, r15
    514e:	88 16       	cp	r8, r24
    5150:	99 06       	cpc	r9, r25
    5152:	aa 06       	cpc	r10, r26
    5154:	bb 06       	cpc	r11, r27
    5156:	c8 f6       	brcc	.-78     	; 0x510a <twi_writeTo+0x13c>
    5158:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <twi_do_reset_on_timeout>
    515c:	24 df       	rcall	.-440    	; 0x4fa6 <twi_handleTimeout>
    515e:	c5 e0       	ldi	r28, 0x05	; 5
    5160:	13 c0       	rjmp	.+38     	; 0x5188 <twi_writeTo+0x1ba>
    5162:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <twi_error>
    5166:	8f 3f       	cpi	r24, 0xFF	; 255
    5168:	79 f0       	breq	.+30     	; 0x5188 <twi_writeTo+0x1ba>
    516a:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <twi_error>
    516e:	80 32       	cpi	r24, 0x20	; 32
    5170:	41 f0       	breq	.+16     	; 0x5182 <twi_writeTo+0x1b4>
    5172:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <twi_error>
    5176:	80 33       	cpi	r24, 0x30	; 48
    5178:	31 f0       	breq	.+12     	; 0x5186 <twi_writeTo+0x1b8>
    517a:	c4 e0       	ldi	r28, 0x04	; 4
    517c:	05 c0       	rjmp	.+10     	; 0x5188 <twi_writeTo+0x1ba>
    517e:	c1 e0       	ldi	r28, 0x01	; 1
    5180:	03 c0       	rjmp	.+6      	; 0x5188 <twi_writeTo+0x1ba>
    5182:	c2 e0       	ldi	r28, 0x02	; 2
    5184:	01 c0       	rjmp	.+2      	; 0x5188 <twi_writeTo+0x1ba>
    5186:	c3 e0       	ldi	r28, 0x03	; 3
    5188:	8c 2f       	mov	r24, r28
    518a:	df 91       	pop	r29
    518c:	cf 91       	pop	r28
    518e:	1f 91       	pop	r17
    5190:	0f 91       	pop	r16
    5192:	ff 90       	pop	r15
    5194:	ef 90       	pop	r14
    5196:	df 90       	pop	r13
    5198:	cf 90       	pop	r12
    519a:	bf 90       	pop	r11
    519c:	af 90       	pop	r10
    519e:	9f 90       	pop	r9
    51a0:	8f 90       	pop	r8
    51a2:	7f 90       	pop	r7
    51a4:	6f 90       	pop	r6
    51a6:	5f 90       	pop	r5
    51a8:	4f 90       	pop	r4
    51aa:	08 95       	ret

000051ac <twi_stop>:
    51ac:	85 ed       	ldi	r24, 0xD5	; 213
    51ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    51b2:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <twi_timeout_us>
    51b6:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <twi_timeout_us+0x1>
    51ba:	a0 91 73 05 	lds	r26, 0x0573	; 0x800573 <twi_timeout_us+0x2>
    51be:	b0 91 74 05 	lds	r27, 0x0574	; 0x800574 <twi_timeout_us+0x3>
    51c2:	07 96       	adiw	r24, 0x07	; 7
    51c4:	a1 1d       	adc	r26, r1
    51c6:	b1 1d       	adc	r27, r1
    51c8:	23 e0       	ldi	r18, 0x03	; 3
    51ca:	b6 95       	lsr	r27
    51cc:	a7 95       	ror	r26
    51ce:	97 95       	ror	r25
    51d0:	87 95       	ror	r24
    51d2:	2a 95       	dec	r18
    51d4:	d1 f7       	brne	.-12     	; 0x51ca <twi_stop+0x1e>
    51d6:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    51da:	24 ff       	sbrs	r18, 4
    51dc:	1b c0       	rjmp	.+54     	; 0x5214 <twi_stop+0x68>
    51de:	40 91 71 05 	lds	r20, 0x0571	; 0x800571 <twi_timeout_us>
    51e2:	50 91 72 05 	lds	r21, 0x0572	; 0x800572 <twi_timeout_us+0x1>
    51e6:	60 91 73 05 	lds	r22, 0x0573	; 0x800573 <twi_timeout_us+0x2>
    51ea:	70 91 74 05 	lds	r23, 0x0574	; 0x800574 <twi_timeout_us+0x3>
    51ee:	45 2b       	or	r20, r21
    51f0:	46 2b       	or	r20, r22
    51f2:	47 2b       	or	r20, r23
    51f4:	81 f3       	breq	.-32     	; 0x51d6 <twi_stop+0x2a>
    51f6:	00 97       	sbiw	r24, 0x00	; 0
    51f8:	a1 05       	cpc	r26, r1
    51fa:	b1 05       	cpc	r27, r1
    51fc:	41 f0       	breq	.+16     	; 0x520e <twi_stop+0x62>
    51fe:	25 e3       	ldi	r18, 0x35	; 53
    5200:	2a 95       	dec	r18
    5202:	f1 f7       	brne	.-4      	; 0x5200 <twi_stop+0x54>
    5204:	00 00       	nop
    5206:	01 97       	sbiw	r24, 0x01	; 1
    5208:	a1 09       	sbc	r26, r1
    520a:	b1 09       	sbc	r27, r1
    520c:	e4 cf       	rjmp	.-56     	; 0x51d6 <twi_stop+0x2a>
    520e:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <twi_do_reset_on_timeout>
    5212:	c9 ce       	rjmp	.-622    	; 0x4fa6 <twi_handleTimeout>
    5214:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <twi_state>
    5218:	08 95       	ret

0000521a <__vector_39>:

ISR(TWI_vect)
{
    521a:	1f 92       	push	r1
    521c:	0f 92       	push	r0
    521e:	0f b6       	in	r0, 0x3f	; 63
    5220:	0f 92       	push	r0
    5222:	11 24       	eor	r1, r1
    5224:	0b b6       	in	r0, 0x3b	; 59
    5226:	0f 92       	push	r0
    5228:	2f 93       	push	r18
    522a:	3f 93       	push	r19
    522c:	4f 93       	push	r20
    522e:	5f 93       	push	r21
    5230:	6f 93       	push	r22
    5232:	7f 93       	push	r23
    5234:	8f 93       	push	r24
    5236:	9f 93       	push	r25
    5238:	af 93       	push	r26
    523a:	bf 93       	push	r27
    523c:	ef 93       	push	r30
    523e:	ff 93       	push	r31
  switch(TW_STATUS){
    5240:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5244:	88 7f       	andi	r24, 0xF8	; 248
    5246:	80 36       	cpi	r24, 0x60	; 96
    5248:	09 f4       	brne	.+2      	; 0x524c <__vector_39+0x32>
    524a:	9d c0       	rjmp	.+314    	; 0x5386 <__vector_39+0x16c>
    524c:	70 f5       	brcc	.+92     	; 0x52aa <__vector_39+0x90>
    524e:	88 32       	cpi	r24, 0x28	; 40
    5250:	09 f4       	brne	.+2      	; 0x5254 <__vector_39+0x3a>
    5252:	5c c0       	rjmp	.+184    	; 0x530c <__vector_39+0xf2>
    5254:	90 f4       	brcc	.+36     	; 0x527a <__vector_39+0x60>
    5256:	80 31       	cpi	r24, 0x10	; 16
    5258:	09 f4       	brne	.+2      	; 0x525c <__vector_39+0x42>
    525a:	55 c0       	rjmp	.+170    	; 0x5306 <__vector_39+0xec>
    525c:	38 f4       	brcc	.+14     	; 0x526c <__vector_39+0x52>
    525e:	88 23       	and	r24, r24
    5260:	09 f4       	brne	.+2      	; 0x5264 <__vector_39+0x4a>
    5262:	f3 c0       	rjmp	.+486    	; 0x544a <__vector_39+0x230>
    5264:	88 30       	cpi	r24, 0x08	; 8
    5266:	09 f4       	brne	.+2      	; 0x526a <__vector_39+0x50>
    5268:	4e c0       	rjmp	.+156    	; 0x5306 <__vector_39+0xec>
    526a:	f2 c0       	rjmp	.+484    	; 0x5450 <__vector_39+0x236>
    526c:	88 31       	cpi	r24, 0x18	; 24
    526e:	09 f4       	brne	.+2      	; 0x5272 <__vector_39+0x58>
    5270:	4d c0       	rjmp	.+154    	; 0x530c <__vector_39+0xf2>
    5272:	80 32       	cpi	r24, 0x20	; 32
    5274:	09 f4       	brne	.+2      	; 0x5278 <__vector_39+0x5e>
    5276:	5e c0       	rjmp	.+188    	; 0x5334 <__vector_39+0x11a>
    5278:	eb c0       	rjmp	.+470    	; 0x5450 <__vector_39+0x236>
    527a:	80 34       	cpi	r24, 0x40	; 64
    527c:	09 f4       	brne	.+2      	; 0x5280 <__vector_39+0x66>
    527e:	69 c0       	rjmp	.+210    	; 0x5352 <__vector_39+0x138>
    5280:	50 f4       	brcc	.+20     	; 0x5296 <__vector_39+0x7c>
    5282:	80 33       	cpi	r24, 0x30	; 48
    5284:	09 f4       	brne	.+2      	; 0x5288 <__vector_39+0x6e>
    5286:	56 c0       	rjmp	.+172    	; 0x5334 <__vector_39+0x11a>
    5288:	88 33       	cpi	r24, 0x38	; 56
    528a:	09 f0       	breq	.+2      	; 0x528e <__vector_39+0x74>
    528c:	e1 c0       	rjmp	.+450    	; 0x5450 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    528e:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <twi_error>
      twi_releaseBus();
    5292:	83 de       	rcall	.-762    	; 0x4f9a <twi_releaseBus>
      break;
    5294:	dd c0       	rjmp	.+442    	; 0x5450 <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5296:	80 35       	cpi	r24, 0x50	; 80
    5298:	09 f4       	brne	.+2      	; 0x529c <__vector_39+0x82>
    529a:	4f c0       	rjmp	.+158    	; 0x533a <__vector_39+0x120>
    529c:	88 35       	cpi	r24, 0x58	; 88
    529e:	09 f4       	brne	.+2      	; 0x52a2 <__vector_39+0x88>
    52a0:	5d c0       	rjmp	.+186    	; 0x535c <__vector_39+0x142>
    52a2:	88 34       	cpi	r24, 0x48	; 72
    52a4:	09 f0       	breq	.+2      	; 0x52a8 <__vector_39+0x8e>
    52a6:	d4 c0       	rjmp	.+424    	; 0x5450 <__vector_39+0x236>
    52a8:	d2 c0       	rjmp	.+420    	; 0x544e <__vector_39+0x234>
    52aa:	88 39       	cpi	r24, 0x98	; 152
    52ac:	09 f4       	brne	.+2      	; 0x52b0 <__vector_39+0x96>
    52ae:	c3 c0       	rjmp	.+390    	; 0x5436 <__vector_39+0x21c>
    52b0:	a8 f4       	brcc	.+42     	; 0x52dc <__vector_39+0xc2>
    52b2:	88 37       	cpi	r24, 0x78	; 120
    52b4:	09 f4       	brne	.+2      	; 0x52b8 <__vector_39+0x9e>
    52b6:	67 c0       	rjmp	.+206    	; 0x5386 <__vector_39+0x16c>
    52b8:	38 f4       	brcc	.+14     	; 0x52c8 <__vector_39+0xae>
    52ba:	88 36       	cpi	r24, 0x68	; 104
    52bc:	09 f4       	brne	.+2      	; 0x52c0 <__vector_39+0xa6>
    52be:	63 c0       	rjmp	.+198    	; 0x5386 <__vector_39+0x16c>
    52c0:	80 37       	cpi	r24, 0x70	; 112
    52c2:	09 f4       	brne	.+2      	; 0x52c6 <__vector_39+0xac>
    52c4:	60 c0       	rjmp	.+192    	; 0x5386 <__vector_39+0x16c>
    52c6:	c4 c0       	rjmp	.+392    	; 0x5450 <__vector_39+0x236>
    52c8:	88 38       	cpi	r24, 0x88	; 136
    52ca:	09 f4       	brne	.+2      	; 0x52ce <__vector_39+0xb4>
    52cc:	b4 c0       	rjmp	.+360    	; 0x5436 <__vector_39+0x21c>
    52ce:	80 39       	cpi	r24, 0x90	; 144
    52d0:	09 f4       	brne	.+2      	; 0x52d4 <__vector_39+0xba>
    52d2:	5f c0       	rjmp	.+190    	; 0x5392 <__vector_39+0x178>
    52d4:	80 38       	cpi	r24, 0x80	; 128
    52d6:	09 f0       	breq	.+2      	; 0x52da <__vector_39+0xc0>
    52d8:	bb c0       	rjmp	.+374    	; 0x5450 <__vector_39+0x236>
    52da:	5b c0       	rjmp	.+182    	; 0x5392 <__vector_39+0x178>
    52dc:	80 3b       	cpi	r24, 0xB0	; 176
    52de:	09 f4       	brne	.+2      	; 0x52e2 <__vector_39+0xc8>
    52e0:	82 c0       	rjmp	.+260    	; 0x53e6 <__vector_39+0x1cc>
    52e2:	38 f4       	brcc	.+14     	; 0x52f2 <__vector_39+0xd8>
    52e4:	80 3a       	cpi	r24, 0xA0	; 160
    52e6:	09 f4       	brne	.+2      	; 0x52ea <__vector_39+0xd0>
    52e8:	66 c0       	rjmp	.+204    	; 0x53b6 <__vector_39+0x19c>
    52ea:	88 3a       	cpi	r24, 0xA8	; 168
    52ec:	09 f4       	brne	.+2      	; 0x52f0 <__vector_39+0xd6>
    52ee:	7b c0       	rjmp	.+246    	; 0x53e6 <__vector_39+0x1cc>
    52f0:	af c0       	rjmp	.+350    	; 0x5450 <__vector_39+0x236>
    52f2:	80 3c       	cpi	r24, 0xC0	; 192
    52f4:	09 f4       	brne	.+2      	; 0x52f8 <__vector_39+0xde>
    52f6:	a3 c0       	rjmp	.+326    	; 0x543e <__vector_39+0x224>
    52f8:	88 3c       	cpi	r24, 0xC8	; 200
    52fa:	09 f4       	brne	.+2      	; 0x52fe <__vector_39+0xe4>
    52fc:	a0 c0       	rjmp	.+320    	; 0x543e <__vector_39+0x224>
    52fe:	88 3b       	cpi	r24, 0xB8	; 184
    5300:	09 f4       	brne	.+2      	; 0x5304 <__vector_39+0xea>
    5302:	86 c0       	rjmp	.+268    	; 0x5410 <__vector_39+0x1f6>
    5304:	a5 c0       	rjmp	.+330    	; 0x5450 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    5306:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <twi_slarw>
    530a:	10 c0       	rjmp	.+32     	; 0x532c <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    530c:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <twi_masterBufferIndex>
    5310:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <twi_masterBufferLength>
    5314:	98 17       	cp	r25, r24
    5316:	70 f5       	brcc	.+92     	; 0x5374 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5318:	e0 91 4a 05 	lds	r30, 0x054A	; 0x80054a <twi_masterBufferIndex>
    531c:	81 e0       	ldi	r24, 0x01	; 1
    531e:	8e 0f       	add	r24, r30
    5320:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <twi_masterBufferIndex>
    5324:	f0 e0       	ldi	r31, 0x00	; 0
    5326:	e5 5b       	subi	r30, 0xB5	; 181
    5328:	fa 4f       	sbci	r31, 0xFA	; 250
    532a:	80 81       	ld	r24, Z
    532c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5330:	85 ec       	ldi	r24, 0xC5	; 197
    5332:	82 c0       	rjmp	.+260    	; 0x5438 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    5334:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <twi_error>
    5338:	8a c0       	rjmp	.+276    	; 0x544e <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    533a:	e0 91 4a 05 	lds	r30, 0x054A	; 0x80054a <twi_masterBufferIndex>
    533e:	81 e0       	ldi	r24, 0x01	; 1
    5340:	8e 0f       	add	r24, r30
    5342:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <twi_masterBufferIndex>
    5346:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    534a:	f0 e0       	ldi	r31, 0x00	; 0
    534c:	e5 5b       	subi	r30, 0xB5	; 181
    534e:	fa 4f       	sbci	r31, 0xFA	; 250
    5350:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5352:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <twi_masterBufferIndex>
    5356:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <twi_masterBufferLength>
    535a:	6a c0       	rjmp	.+212    	; 0x5430 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    535c:	e0 91 4a 05 	lds	r30, 0x054A	; 0x80054a <twi_masterBufferIndex>
    5360:	81 e0       	ldi	r24, 0x01	; 1
    5362:	8e 0f       	add	r24, r30
    5364:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <twi_masterBufferIndex>
    5368:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    536c:	f0 e0       	ldi	r31, 0x00	; 0
    536e:	e5 5b       	subi	r30, 0xB5	; 181
    5370:	fa 4f       	sbci	r31, 0xFA	; 250
    5372:	80 83       	st	Z, r24
      if (twi_sendStop){
    5374:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <twi_sendStop>
    5378:	81 11       	cpse	r24, r1
    537a:	69 c0       	rjmp	.+210    	; 0x544e <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    537c:	81 e0       	ldi	r24, 0x01	; 1
    537e:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    5382:	84 ea       	ldi	r24, 0xA4	; 164
    5384:	5d c0       	rjmp	.+186    	; 0x5440 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    5386:	83 e0       	ldi	r24, 0x03	; 3
    5388:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    538c:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <twi_rxBufferIndex>
    5390:	cf cf       	rjmp	.-98     	; 0x5330 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5392:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <twi_rxBufferIndex>
    5396:	80 32       	cpi	r24, 0x20	; 32
    5398:	08 f0       	brcs	.+2      	; 0x539c <__vector_39+0x182>
    539a:	4d c0       	rjmp	.+154    	; 0x5436 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    539c:	e0 91 06 05 	lds	r30, 0x0506	; 0x800506 <twi_rxBufferIndex>
    53a0:	81 e0       	ldi	r24, 0x01	; 1
    53a2:	8e 0f       	add	r24, r30
    53a4:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <twi_rxBufferIndex>
    53a8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    53ac:	f0 e0       	ldi	r31, 0x00	; 0
    53ae:	e9 5f       	subi	r30, 0xF9	; 249
    53b0:	fa 4f       	sbci	r31, 0xFA	; 250
    53b2:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    53b4:	bd cf       	rjmp	.-134    	; 0x5330 <__vector_39+0x116>
    53b6:	f1 dd       	rcall	.-1054   	; 0x4f9a <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    53b8:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <twi_rxBufferIndex>
    53bc:	80 32       	cpi	r24, 0x20	; 32
    53be:	30 f4       	brcc	.+12     	; 0x53cc <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    53c0:	e0 91 06 05 	lds	r30, 0x0506	; 0x800506 <twi_rxBufferIndex>
    53c4:	f0 e0       	ldi	r31, 0x00	; 0
    53c6:	e9 5f       	subi	r30, 0xF9	; 249
    53c8:	fa 4f       	sbci	r31, 0xFA	; 250
    53ca:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    53cc:	60 91 06 05 	lds	r22, 0x0506	; 0x800506 <twi_rxBufferIndex>
    53d0:	70 e0       	ldi	r23, 0x00	; 0
    53d2:	e0 91 6b 05 	lds	r30, 0x056B	; 0x80056b <twi_onSlaveReceive>
    53d6:	f0 91 6c 05 	lds	r31, 0x056C	; 0x80056c <twi_onSlaveReceive+0x1>
    53da:	87 e0       	ldi	r24, 0x07	; 7
    53dc:	95 e0       	ldi	r25, 0x05	; 5
    53de:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    53e0:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <twi_rxBufferIndex>
      break;
    53e4:	35 c0       	rjmp	.+106    	; 0x5450 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    53e6:	84 e0       	ldi	r24, 0x04	; 4
    53e8:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    53ec:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    53f0:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    53f4:	e0 91 6d 05 	lds	r30, 0x056D	; 0x80056d <twi_onSlaveTransmit>
    53f8:	f0 91 6e 05 	lds	r31, 0x056E	; 0x80056e <twi_onSlaveTransmit+0x1>
    53fc:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    53fe:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <twi_txBufferLength>
    5402:	81 11       	cpse	r24, r1
    5404:	05 c0       	rjmp	.+10     	; 0x5410 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    5406:	81 e0       	ldi	r24, 0x01	; 1
    5408:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    540c:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    5410:	e0 91 28 05 	lds	r30, 0x0528	; 0x800528 <twi_txBufferIndex>
    5414:	81 e0       	ldi	r24, 0x01	; 1
    5416:	8e 0f       	add	r24, r30
    5418:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <twi_txBufferIndex>
    541c:	f0 e0       	ldi	r31, 0x00	; 0
    541e:	e7 5d       	subi	r30, 0xD7	; 215
    5420:	fa 4f       	sbci	r31, 0xFA	; 250
    5422:	80 81       	ld	r24, Z
    5424:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5428:	90 91 28 05 	lds	r25, 0x0528	; 0x800528 <twi_txBufferIndex>
    542c:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <twi_txBufferLength>
    5430:	98 17       	cp	r25, r24
    5432:	08 f4       	brcc	.+2      	; 0x5436 <__vector_39+0x21c>
    5434:	7d cf       	rjmp	.-262    	; 0x5330 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5436:	85 e8       	ldi	r24, 0x85	; 133
    5438:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    543c:	09 c0       	rjmp	.+18     	; 0x5450 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    543e:	85 ec       	ldi	r24, 0xC5	; 197
    5440:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    5444:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <twi_state>
      break;
    5448:	03 c0       	rjmp	.+6      	; 0x5450 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    544a:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <twi_error>
      twi_stop();
    544e:	ae de       	rcall	.-676    	; 0x51ac <twi_stop>
      break;
  }
}
    5450:	ff 91       	pop	r31
    5452:	ef 91       	pop	r30
    5454:	bf 91       	pop	r27
    5456:	af 91       	pop	r26
    5458:	9f 91       	pop	r25
    545a:	8f 91       	pop	r24
    545c:	7f 91       	pop	r23
    545e:	6f 91       	pop	r22
    5460:	5f 91       	pop	r21
    5462:	4f 91       	pop	r20
    5464:	3f 91       	pop	r19
    5466:	2f 91       	pop	r18
    5468:	0f 90       	pop	r0
    546a:	0b be       	out	0x3b, r0	; 59
    546c:	0f 90       	pop	r0
    546e:	0f be       	out	0x3f, r0	; 63
    5470:	0f 90       	pop	r0
    5472:	1f 90       	pop	r1
    5474:	18 95       	reti

00005476 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    5476:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <_ZN7TwoWire14rxBufferLengthE>
    547a:	90 e0       	ldi	r25, 0x00	; 0
    547c:	20 91 ae 05 	lds	r18, 0x05AE	; 0x8005ae <_ZN7TwoWire13rxBufferIndexE>
    5480:	82 1b       	sub	r24, r18
    5482:	91 09       	sbc	r25, r1
    5484:	08 95       	ret

00005486 <_ZN7TwoWire4readEv>:
    5486:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <_ZN7TwoWire13rxBufferIndexE>
    548a:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <_ZN7TwoWire14rxBufferLengthE>
    548e:	98 17       	cp	r25, r24
    5490:	50 f4       	brcc	.+20     	; 0x54a6 <_ZN7TwoWire4readEv+0x20>
    5492:	e9 2f       	mov	r30, r25
    5494:	f0 e0       	ldi	r31, 0x00	; 0
    5496:	e1 55       	subi	r30, 0x51	; 81
    5498:	fa 4f       	sbci	r31, 0xFA	; 250
    549a:	20 81       	ld	r18, Z
    549c:	30 e0       	ldi	r19, 0x00	; 0
    549e:	9f 5f       	subi	r25, 0xFF	; 255
    54a0:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <_ZN7TwoWire13rxBufferIndexE>
    54a4:	02 c0       	rjmp	.+4      	; 0x54aa <_ZN7TwoWire4readEv+0x24>
    54a6:	2f ef       	ldi	r18, 0xFF	; 255
    54a8:	3f ef       	ldi	r19, 0xFF	; 255
    54aa:	c9 01       	movw	r24, r18
    54ac:	08 95       	ret

000054ae <_ZN7TwoWire4peekEv>:
    54ae:	e0 91 ae 05 	lds	r30, 0x05AE	; 0x8005ae <_ZN7TwoWire13rxBufferIndexE>
    54b2:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <_ZN7TwoWire14rxBufferLengthE>
    54b6:	e8 17       	cp	r30, r24
    54b8:	30 f4       	brcc	.+12     	; 0x54c6 <_ZN7TwoWire4peekEv+0x18>
    54ba:	f0 e0       	ldi	r31, 0x00	; 0
    54bc:	e1 55       	subi	r30, 0x51	; 81
    54be:	fa 4f       	sbci	r31, 0xFA	; 250
    54c0:	80 81       	ld	r24, Z
    54c2:	90 e0       	ldi	r25, 0x00	; 0
    54c4:	08 95       	ret
    54c6:	8f ef       	ldi	r24, 0xFF	; 255
    54c8:	9f ef       	ldi	r25, 0xFF	; 255
    54ca:	08 95       	ret

000054cc <_ZN7TwoWire5flushEv>:
    54cc:	08 95       	ret

000054ce <_ZN7TwoWire16onReceiveServiceEPhi>:
    54ce:	cf 93       	push	r28
    54d0:	df 93       	push	r29
    54d2:	ec 01       	movw	r28, r24
    54d4:	e0 91 85 05 	lds	r30, 0x0585	; 0x800585 <_ZN7TwoWire14user_onReceiveE>
    54d8:	f0 91 86 05 	lds	r31, 0x0586	; 0x800586 <_ZN7TwoWire14user_onReceiveE+0x1>
    54dc:	30 97       	sbiw	r30, 0x00	; 0
    54de:	f1 f0       	breq	.+60     	; 0x551c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    54e0:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <_ZN7TwoWire13rxBufferIndexE>
    54e4:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <_ZN7TwoWire14rxBufferLengthE>
    54e8:	98 17       	cp	r25, r24
    54ea:	c0 f0       	brcs	.+48     	; 0x551c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    54ec:	90 e0       	ldi	r25, 0x00	; 0
    54ee:	29 2f       	mov	r18, r25
    54f0:	30 e0       	ldi	r19, 0x00	; 0
    54f2:	26 17       	cp	r18, r22
    54f4:	37 07       	cpc	r19, r23
    54f6:	54 f4       	brge	.+20     	; 0x550c <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    54f8:	de 01       	movw	r26, r28
    54fa:	a2 0f       	add	r26, r18
    54fc:	b3 1f       	adc	r27, r19
    54fe:	4c 91       	ld	r20, X
    5500:	d9 01       	movw	r26, r18
    5502:	a1 55       	subi	r26, 0x51	; 81
    5504:	ba 4f       	sbci	r27, 0xFA	; 250
    5506:	4c 93       	st	X, r20
    5508:	9f 5f       	subi	r25, 0xFF	; 255
    550a:	f1 cf       	rjmp	.-30     	; 0x54ee <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    550c:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <_ZN7TwoWire13rxBufferIndexE>
    5510:	60 93 ad 05 	sts	0x05AD, r22	; 0x8005ad <_ZN7TwoWire14rxBufferLengthE>
    5514:	cb 01       	movw	r24, r22
    5516:	df 91       	pop	r29
    5518:	cf 91       	pop	r28
    551a:	19 94       	eijmp
    551c:	df 91       	pop	r29
    551e:	cf 91       	pop	r28
    5520:	08 95       	ret

00005522 <_ZN7TwoWire16onRequestServiceEv>:
    5522:	e0 91 87 05 	lds	r30, 0x0587	; 0x800587 <_ZN7TwoWire14user_onRequestE>
    5526:	f0 91 88 05 	lds	r31, 0x0588	; 0x800588 <_ZN7TwoWire14user_onRequestE+0x1>
    552a:	30 97       	sbiw	r30, 0x00	; 0
    552c:	29 f0       	breq	.+10     	; 0x5538 <_ZN7TwoWire16onRequestServiceEv+0x16>
    552e:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <_ZN7TwoWire13txBufferIndexE>
    5532:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <_ZN7TwoWire14txBufferLengthE>
    5536:	19 94       	eijmp
    5538:	08 95       	ret

0000553a <_ZN7TwoWire5writeEPKhj>:
    553a:	cf 92       	push	r12
    553c:	df 92       	push	r13
    553e:	ef 92       	push	r14
    5540:	ff 92       	push	r15
    5542:	0f 93       	push	r16
    5544:	1f 93       	push	r17
    5546:	cf 93       	push	r28
    5548:	df 93       	push	r29
    554a:	7c 01       	movw	r14, r24
    554c:	cb 01       	movw	r24, r22
    554e:	8a 01       	movw	r16, r20
    5550:	20 91 89 05 	lds	r18, 0x0589	; 0x800589 <_ZN7TwoWire12transmittingE>
    5554:	22 23       	and	r18, r18
    5556:	89 f0       	breq	.+34     	; 0x557a <_ZN7TwoWire5writeEPKhj+0x40>
    5558:	eb 01       	movw	r28, r22
    555a:	6b 01       	movw	r12, r22
    555c:	c4 0e       	add	r12, r20
    555e:	d5 1e       	adc	r13, r21
    5560:	cc 15       	cp	r28, r12
    5562:	dd 05       	cpc	r29, r13
    5564:	61 f0       	breq	.+24     	; 0x557e <_ZN7TwoWire5writeEPKhj+0x44>
    5566:	69 91       	ld	r22, Y+
    5568:	d7 01       	movw	r26, r14
    556a:	ed 91       	ld	r30, X+
    556c:	fc 91       	ld	r31, X
    556e:	01 90       	ld	r0, Z+
    5570:	f0 81       	ld	r31, Z
    5572:	e0 2d       	mov	r30, r0
    5574:	c7 01       	movw	r24, r14
    5576:	19 95       	eicall
    5578:	f3 cf       	rjmp	.-26     	; 0x5560 <_ZN7TwoWire5writeEPKhj+0x26>
    557a:	64 2f       	mov	r22, r20
    557c:	dc dc       	rcall	.-1608   	; 0x4f36 <twi_transmit>
    557e:	c8 01       	movw	r24, r16
    5580:	df 91       	pop	r29
    5582:	cf 91       	pop	r28
    5584:	1f 91       	pop	r17
    5586:	0f 91       	pop	r16
    5588:	ff 90       	pop	r15
    558a:	ef 90       	pop	r14
    558c:	df 90       	pop	r13
    558e:	cf 90       	pop	r12
    5590:	08 95       	ret

00005592 <_ZN7TwoWire5writeEh>:
    5592:	cf 93       	push	r28
    5594:	df 93       	push	r29
    5596:	1f 92       	push	r1
    5598:	cd b7       	in	r28, 0x3d	; 61
    559a:	de b7       	in	r29, 0x3e	; 62
    559c:	69 83       	std	Y+1, r22	; 0x01
    559e:	20 91 89 05 	lds	r18, 0x0589	; 0x800589 <_ZN7TwoWire12transmittingE>
    55a2:	22 23       	and	r18, r18
    55a4:	d1 f0       	breq	.+52     	; 0x55da <_ZN7TwoWire5writeEh+0x48>
    55a6:	20 91 8a 05 	lds	r18, 0x058A	; 0x80058a <_ZN7TwoWire14txBufferLengthE>
    55aa:	20 32       	cpi	r18, 0x20	; 32
    55ac:	40 f0       	brcs	.+16     	; 0x55be <_ZN7TwoWire5writeEh+0x2c>
    55ae:	21 e0       	ldi	r18, 0x01	; 1
    55b0:	30 e0       	ldi	r19, 0x00	; 0
    55b2:	fc 01       	movw	r30, r24
    55b4:	33 83       	std	Z+3, r19	; 0x03
    55b6:	22 83       	std	Z+2, r18	; 0x02
    55b8:	80 e0       	ldi	r24, 0x00	; 0
    55ba:	90 e0       	ldi	r25, 0x00	; 0
    55bc:	14 c0       	rjmp	.+40     	; 0x55e6 <_ZN7TwoWire5writeEh+0x54>
    55be:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <_ZN7TwoWire13txBufferIndexE>
    55c2:	e8 2f       	mov	r30, r24
    55c4:	f0 e0       	ldi	r31, 0x00	; 0
    55c6:	e4 57       	subi	r30, 0x74	; 116
    55c8:	fa 4f       	sbci	r31, 0xFA	; 250
    55ca:	99 81       	ldd	r25, Y+1	; 0x01
    55cc:	90 83       	st	Z, r25
    55ce:	8f 5f       	subi	r24, 0xFF	; 255
    55d0:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <_ZN7TwoWire13txBufferIndexE>
    55d4:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <_ZN7TwoWire14txBufferLengthE>
    55d8:	04 c0       	rjmp	.+8      	; 0x55e2 <_ZN7TwoWire5writeEh+0x50>
    55da:	61 e0       	ldi	r22, 0x01	; 1
    55dc:	ce 01       	movw	r24, r28
    55de:	01 96       	adiw	r24, 0x01	; 1
    55e0:	aa dc       	rcall	.-1708   	; 0x4f36 <twi_transmit>
    55e2:	81 e0       	ldi	r24, 0x01	; 1
    55e4:	90 e0       	ldi	r25, 0x00	; 0
    55e6:	0f 90       	pop	r0
    55e8:	df 91       	pop	r29
    55ea:	cf 91       	pop	r28
    55ec:	08 95       	ret

000055ee <_ZN7TwoWireC1Ev>:
    55ee:	fc 01       	movw	r30, r24
    55f0:	13 82       	std	Z+3, r1	; 0x03
    55f2:	12 82       	std	Z+2, r1	; 0x02
    55f4:	88 ee       	ldi	r24, 0xE8	; 232
    55f6:	93 e0       	ldi	r25, 0x03	; 3
    55f8:	a0 e0       	ldi	r26, 0x00	; 0
    55fa:	b0 e0       	ldi	r27, 0x00	; 0
    55fc:	84 83       	std	Z+4, r24	; 0x04
    55fe:	95 83       	std	Z+5, r25	; 0x05
    5600:	a6 83       	std	Z+6, r26	; 0x06
    5602:	b7 83       	std	Z+7, r27	; 0x07
    5604:	8c e3       	ldi	r24, 0x3C	; 60
    5606:	93 e0       	ldi	r25, 0x03	; 3
    5608:	91 83       	std	Z+1, r25	; 0x01
    560a:	80 83       	st	Z, r24
    560c:	08 95       	ret

0000560e <_ZN7TwoWire5beginEv>:
    560e:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <_ZN7TwoWire13rxBufferIndexE>
    5612:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <_ZN7TwoWire14rxBufferLengthE>
    5616:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <_ZN7TwoWire13txBufferIndexE>
    561a:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <_ZN7TwoWire14txBufferLengthE>
    561e:	4c dc       	rcall	.-1896   	; 0x4eb8 <twi_init>
    5620:	81 e9       	ldi	r24, 0x91	; 145
    5622:	9a e2       	ldi	r25, 0x2A	; 42
    5624:	b5 dc       	rcall	.-1686   	; 0x4f90 <twi_attachSlaveTxEvent>
    5626:	87 e6       	ldi	r24, 0x67	; 103
    5628:	9a e2       	ldi	r25, 0x2A	; 42
    562a:	ad cc       	rjmp	.-1702   	; 0x4f86 <twi_attachSlaveRxEvent>

0000562c <_ZN7TwoWire8setClockEm>:
    562c:	cb 01       	movw	r24, r22
    562e:	ba 01       	movw	r22, r20
    5630:	6e cc       	rjmp	.-1828   	; 0x4f0e <twi_setFrequency>

00005632 <_ZN7TwoWire17beginTransmissionEh>:
    5632:	81 e0       	ldi	r24, 0x01	; 1
    5634:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <_ZN7TwoWire12transmittingE>
    5638:	60 93 ac 05 	sts	0x05AC, r22	; 0x8005ac <_ZN7TwoWire9txAddressE>
    563c:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <_ZN7TwoWire13txBufferIndexE>
    5640:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <_ZN7TwoWire14txBufferLengthE>
    5644:	08 95       	ret

00005646 <_ZN7TwoWire17beginTransmissionEi>:
    5646:	f5 cf       	rjmp	.-22     	; 0x5632 <_ZN7TwoWire17beginTransmissionEh>

00005648 <_ZN7TwoWire15endTransmissionEh>:
    5648:	0f 93       	push	r16
    564a:	06 2f       	mov	r16, r22
    564c:	21 e0       	ldi	r18, 0x01	; 1
    564e:	40 91 8a 05 	lds	r20, 0x058A	; 0x80058a <_ZN7TwoWire14txBufferLengthE>
    5652:	6c e8       	ldi	r22, 0x8C	; 140
    5654:	75 e0       	ldi	r23, 0x05	; 5
    5656:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <_ZN7TwoWire9txAddressE>
    565a:	b9 dc       	rcall	.-1678   	; 0x4fce <twi_writeTo>
    565c:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <_ZN7TwoWire13txBufferIndexE>
    5660:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <_ZN7TwoWire14txBufferLengthE>
    5664:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <_ZN7TwoWire12transmittingE>
    5668:	0f 91       	pop	r16
    566a:	08 95       	ret

0000566c <_ZN7TwoWire15endTransmissionEv>:
    566c:	61 e0       	ldi	r22, 0x01	; 1
    566e:	ec cf       	rjmp	.-40     	; 0x5648 <_ZN7TwoWire15endTransmissionEh>

00005670 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    5670:	89 e7       	ldi	r24, 0x79	; 121
    5672:	95 e0       	ldi	r25, 0x05	; 5
    5674:	bc cf       	rjmp	.-136    	; 0x55ee <_ZN7TwoWireC1Ev>

00005676 <__subsf3>:
    5676:	50 58       	subi	r21, 0x80	; 128

00005678 <__addsf3>:
    5678:	bb 27       	eor	r27, r27
    567a:	aa 27       	eor	r26, r26
    567c:	0e d0       	rcall	.+28     	; 0x569a <__addsf3x>
    567e:	0d c1       	rjmp	.+538    	; 0x589a <__fp_round>
    5680:	fe d0       	rcall	.+508    	; 0x587e <__fp_pscA>
    5682:	30 f0       	brcs	.+12     	; 0x5690 <__addsf3+0x18>
    5684:	03 d1       	rcall	.+518    	; 0x588c <__fp_pscB>
    5686:	20 f0       	brcs	.+8      	; 0x5690 <__addsf3+0x18>
    5688:	31 f4       	brne	.+12     	; 0x5696 <__addsf3+0x1e>
    568a:	9f 3f       	cpi	r25, 0xFF	; 255
    568c:	11 f4       	brne	.+4      	; 0x5692 <__addsf3+0x1a>
    568e:	1e f4       	brtc	.+6      	; 0x5696 <__addsf3+0x1e>
    5690:	f3 c0       	rjmp	.+486    	; 0x5878 <__fp_nan>
    5692:	0e f4       	brtc	.+2      	; 0x5696 <__addsf3+0x1e>
    5694:	e0 95       	com	r30
    5696:	e7 fb       	bst	r30, 7
    5698:	e9 c0       	rjmp	.+466    	; 0x586c <__fp_inf>

0000569a <__addsf3x>:
    569a:	e9 2f       	mov	r30, r25
    569c:	0f d1       	rcall	.+542    	; 0x58bc <__fp_split3>
    569e:	80 f3       	brcs	.-32     	; 0x5680 <__addsf3+0x8>
    56a0:	ba 17       	cp	r27, r26
    56a2:	62 07       	cpc	r22, r18
    56a4:	73 07       	cpc	r23, r19
    56a6:	84 07       	cpc	r24, r20
    56a8:	95 07       	cpc	r25, r21
    56aa:	18 f0       	brcs	.+6      	; 0x56b2 <__addsf3x+0x18>
    56ac:	71 f4       	brne	.+28     	; 0x56ca <__addsf3x+0x30>
    56ae:	9e f5       	brtc	.+102    	; 0x5716 <__addsf3x+0x7c>
    56b0:	27 c1       	rjmp	.+590    	; 0x5900 <__fp_zero>
    56b2:	0e f4       	brtc	.+2      	; 0x56b6 <__addsf3x+0x1c>
    56b4:	e0 95       	com	r30
    56b6:	0b 2e       	mov	r0, r27
    56b8:	ba 2f       	mov	r27, r26
    56ba:	a0 2d       	mov	r26, r0
    56bc:	0b 01       	movw	r0, r22
    56be:	b9 01       	movw	r22, r18
    56c0:	90 01       	movw	r18, r0
    56c2:	0c 01       	movw	r0, r24
    56c4:	ca 01       	movw	r24, r20
    56c6:	a0 01       	movw	r20, r0
    56c8:	11 24       	eor	r1, r1
    56ca:	ff 27       	eor	r31, r31
    56cc:	59 1b       	sub	r21, r25
    56ce:	99 f0       	breq	.+38     	; 0x56f6 <__addsf3x+0x5c>
    56d0:	59 3f       	cpi	r21, 0xF9	; 249
    56d2:	50 f4       	brcc	.+20     	; 0x56e8 <__addsf3x+0x4e>
    56d4:	50 3e       	cpi	r21, 0xE0	; 224
    56d6:	68 f1       	brcs	.+90     	; 0x5732 <__addsf3x+0x98>
    56d8:	1a 16       	cp	r1, r26
    56da:	f0 40       	sbci	r31, 0x00	; 0
    56dc:	a2 2f       	mov	r26, r18
    56de:	23 2f       	mov	r18, r19
    56e0:	34 2f       	mov	r19, r20
    56e2:	44 27       	eor	r20, r20
    56e4:	58 5f       	subi	r21, 0xF8	; 248
    56e6:	f3 cf       	rjmp	.-26     	; 0x56ce <__addsf3x+0x34>
    56e8:	46 95       	lsr	r20
    56ea:	37 95       	ror	r19
    56ec:	27 95       	ror	r18
    56ee:	a7 95       	ror	r26
    56f0:	f0 40       	sbci	r31, 0x00	; 0
    56f2:	53 95       	inc	r21
    56f4:	c9 f7       	brne	.-14     	; 0x56e8 <__addsf3x+0x4e>
    56f6:	7e f4       	brtc	.+30     	; 0x5716 <__addsf3x+0x7c>
    56f8:	1f 16       	cp	r1, r31
    56fa:	ba 0b       	sbc	r27, r26
    56fc:	62 0b       	sbc	r22, r18
    56fe:	73 0b       	sbc	r23, r19
    5700:	84 0b       	sbc	r24, r20
    5702:	ba f0       	brmi	.+46     	; 0x5732 <__addsf3x+0x98>
    5704:	91 50       	subi	r25, 0x01	; 1
    5706:	a1 f0       	breq	.+40     	; 0x5730 <__addsf3x+0x96>
    5708:	ff 0f       	add	r31, r31
    570a:	bb 1f       	adc	r27, r27
    570c:	66 1f       	adc	r22, r22
    570e:	77 1f       	adc	r23, r23
    5710:	88 1f       	adc	r24, r24
    5712:	c2 f7       	brpl	.-16     	; 0x5704 <__addsf3x+0x6a>
    5714:	0e c0       	rjmp	.+28     	; 0x5732 <__addsf3x+0x98>
    5716:	ba 0f       	add	r27, r26
    5718:	62 1f       	adc	r22, r18
    571a:	73 1f       	adc	r23, r19
    571c:	84 1f       	adc	r24, r20
    571e:	48 f4       	brcc	.+18     	; 0x5732 <__addsf3x+0x98>
    5720:	87 95       	ror	r24
    5722:	77 95       	ror	r23
    5724:	67 95       	ror	r22
    5726:	b7 95       	ror	r27
    5728:	f7 95       	ror	r31
    572a:	9e 3f       	cpi	r25, 0xFE	; 254
    572c:	08 f0       	brcs	.+2      	; 0x5730 <__addsf3x+0x96>
    572e:	b3 cf       	rjmp	.-154    	; 0x5696 <__addsf3+0x1e>
    5730:	93 95       	inc	r25
    5732:	88 0f       	add	r24, r24
    5734:	08 f0       	brcs	.+2      	; 0x5738 <__addsf3x+0x9e>
    5736:	99 27       	eor	r25, r25
    5738:	ee 0f       	add	r30, r30
    573a:	97 95       	ror	r25
    573c:	87 95       	ror	r24
    573e:	08 95       	ret

00005740 <__cmpsf2>:
    5740:	71 d0       	rcall	.+226    	; 0x5824 <__fp_cmp>
    5742:	08 f4       	brcc	.+2      	; 0x5746 <__cmpsf2+0x6>
    5744:	81 e0       	ldi	r24, 0x01	; 1
    5746:	08 95       	ret

00005748 <__fixsfsi>:
    5748:	04 d0       	rcall	.+8      	; 0x5752 <__fixunssfsi>
    574a:	68 94       	set
    574c:	b1 11       	cpse	r27, r1
    574e:	d9 c0       	rjmp	.+434    	; 0x5902 <__fp_szero>
    5750:	08 95       	ret

00005752 <__fixunssfsi>:
    5752:	bc d0       	rcall	.+376    	; 0x58cc <__fp_splitA>
    5754:	88 f0       	brcs	.+34     	; 0x5778 <__fixunssfsi+0x26>
    5756:	9f 57       	subi	r25, 0x7F	; 127
    5758:	90 f0       	brcs	.+36     	; 0x577e <__fixunssfsi+0x2c>
    575a:	b9 2f       	mov	r27, r25
    575c:	99 27       	eor	r25, r25
    575e:	b7 51       	subi	r27, 0x17	; 23
    5760:	a0 f0       	brcs	.+40     	; 0x578a <__fixunssfsi+0x38>
    5762:	d1 f0       	breq	.+52     	; 0x5798 <__fixunssfsi+0x46>
    5764:	66 0f       	add	r22, r22
    5766:	77 1f       	adc	r23, r23
    5768:	88 1f       	adc	r24, r24
    576a:	99 1f       	adc	r25, r25
    576c:	1a f0       	brmi	.+6      	; 0x5774 <__fixunssfsi+0x22>
    576e:	ba 95       	dec	r27
    5770:	c9 f7       	brne	.-14     	; 0x5764 <__fixunssfsi+0x12>
    5772:	12 c0       	rjmp	.+36     	; 0x5798 <__fixunssfsi+0x46>
    5774:	b1 30       	cpi	r27, 0x01	; 1
    5776:	81 f0       	breq	.+32     	; 0x5798 <__fixunssfsi+0x46>
    5778:	c3 d0       	rcall	.+390    	; 0x5900 <__fp_zero>
    577a:	b1 e0       	ldi	r27, 0x01	; 1
    577c:	08 95       	ret
    577e:	c0 c0       	rjmp	.+384    	; 0x5900 <__fp_zero>
    5780:	67 2f       	mov	r22, r23
    5782:	78 2f       	mov	r23, r24
    5784:	88 27       	eor	r24, r24
    5786:	b8 5f       	subi	r27, 0xF8	; 248
    5788:	39 f0       	breq	.+14     	; 0x5798 <__fixunssfsi+0x46>
    578a:	b9 3f       	cpi	r27, 0xF9	; 249
    578c:	cc f3       	brlt	.-14     	; 0x5780 <__fixunssfsi+0x2e>
    578e:	86 95       	lsr	r24
    5790:	77 95       	ror	r23
    5792:	67 95       	ror	r22
    5794:	b3 95       	inc	r27
    5796:	d9 f7       	brne	.-10     	; 0x578e <__fixunssfsi+0x3c>
    5798:	3e f4       	brtc	.+14     	; 0x57a8 <__fixunssfsi+0x56>
    579a:	90 95       	com	r25
    579c:	80 95       	com	r24
    579e:	70 95       	com	r23
    57a0:	61 95       	neg	r22
    57a2:	7f 4f       	sbci	r23, 0xFF	; 255
    57a4:	8f 4f       	sbci	r24, 0xFF	; 255
    57a6:	9f 4f       	sbci	r25, 0xFF	; 255
    57a8:	08 95       	ret

000057aa <__floatunsisf>:
    57aa:	e8 94       	clt
    57ac:	09 c0       	rjmp	.+18     	; 0x57c0 <__floatsisf+0x12>

000057ae <__floatsisf>:
    57ae:	97 fb       	bst	r25, 7
    57b0:	3e f4       	brtc	.+14     	; 0x57c0 <__floatsisf+0x12>
    57b2:	90 95       	com	r25
    57b4:	80 95       	com	r24
    57b6:	70 95       	com	r23
    57b8:	61 95       	neg	r22
    57ba:	7f 4f       	sbci	r23, 0xFF	; 255
    57bc:	8f 4f       	sbci	r24, 0xFF	; 255
    57be:	9f 4f       	sbci	r25, 0xFF	; 255
    57c0:	99 23       	and	r25, r25
    57c2:	a9 f0       	breq	.+42     	; 0x57ee <__floatsisf+0x40>
    57c4:	f9 2f       	mov	r31, r25
    57c6:	96 e9       	ldi	r25, 0x96	; 150
    57c8:	bb 27       	eor	r27, r27
    57ca:	93 95       	inc	r25
    57cc:	f6 95       	lsr	r31
    57ce:	87 95       	ror	r24
    57d0:	77 95       	ror	r23
    57d2:	67 95       	ror	r22
    57d4:	b7 95       	ror	r27
    57d6:	f1 11       	cpse	r31, r1
    57d8:	f8 cf       	rjmp	.-16     	; 0x57ca <__floatsisf+0x1c>
    57da:	fa f4       	brpl	.+62     	; 0x581a <__floatsisf+0x6c>
    57dc:	bb 0f       	add	r27, r27
    57de:	11 f4       	brne	.+4      	; 0x57e4 <__floatsisf+0x36>
    57e0:	60 ff       	sbrs	r22, 0
    57e2:	1b c0       	rjmp	.+54     	; 0x581a <__floatsisf+0x6c>
    57e4:	6f 5f       	subi	r22, 0xFF	; 255
    57e6:	7f 4f       	sbci	r23, 0xFF	; 255
    57e8:	8f 4f       	sbci	r24, 0xFF	; 255
    57ea:	9f 4f       	sbci	r25, 0xFF	; 255
    57ec:	16 c0       	rjmp	.+44     	; 0x581a <__floatsisf+0x6c>
    57ee:	88 23       	and	r24, r24
    57f0:	11 f0       	breq	.+4      	; 0x57f6 <__floatsisf+0x48>
    57f2:	96 e9       	ldi	r25, 0x96	; 150
    57f4:	11 c0       	rjmp	.+34     	; 0x5818 <__floatsisf+0x6a>
    57f6:	77 23       	and	r23, r23
    57f8:	21 f0       	breq	.+8      	; 0x5802 <__floatsisf+0x54>
    57fa:	9e e8       	ldi	r25, 0x8E	; 142
    57fc:	87 2f       	mov	r24, r23
    57fe:	76 2f       	mov	r23, r22
    5800:	05 c0       	rjmp	.+10     	; 0x580c <__floatsisf+0x5e>
    5802:	66 23       	and	r22, r22
    5804:	71 f0       	breq	.+28     	; 0x5822 <__floatsisf+0x74>
    5806:	96 e8       	ldi	r25, 0x86	; 134
    5808:	86 2f       	mov	r24, r22
    580a:	70 e0       	ldi	r23, 0x00	; 0
    580c:	60 e0       	ldi	r22, 0x00	; 0
    580e:	2a f0       	brmi	.+10     	; 0x581a <__floatsisf+0x6c>
    5810:	9a 95       	dec	r25
    5812:	66 0f       	add	r22, r22
    5814:	77 1f       	adc	r23, r23
    5816:	88 1f       	adc	r24, r24
    5818:	da f7       	brpl	.-10     	; 0x5810 <__floatsisf+0x62>
    581a:	88 0f       	add	r24, r24
    581c:	96 95       	lsr	r25
    581e:	87 95       	ror	r24
    5820:	97 f9       	bld	r25, 7
    5822:	08 95       	ret

00005824 <__fp_cmp>:
    5824:	99 0f       	add	r25, r25
    5826:	00 08       	sbc	r0, r0
    5828:	55 0f       	add	r21, r21
    582a:	aa 0b       	sbc	r26, r26
    582c:	e0 e8       	ldi	r30, 0x80	; 128
    582e:	fe ef       	ldi	r31, 0xFE	; 254
    5830:	16 16       	cp	r1, r22
    5832:	17 06       	cpc	r1, r23
    5834:	e8 07       	cpc	r30, r24
    5836:	f9 07       	cpc	r31, r25
    5838:	c0 f0       	brcs	.+48     	; 0x586a <__fp_cmp+0x46>
    583a:	12 16       	cp	r1, r18
    583c:	13 06       	cpc	r1, r19
    583e:	e4 07       	cpc	r30, r20
    5840:	f5 07       	cpc	r31, r21
    5842:	98 f0       	brcs	.+38     	; 0x586a <__fp_cmp+0x46>
    5844:	62 1b       	sub	r22, r18
    5846:	73 0b       	sbc	r23, r19
    5848:	84 0b       	sbc	r24, r20
    584a:	95 0b       	sbc	r25, r21
    584c:	39 f4       	brne	.+14     	; 0x585c <__fp_cmp+0x38>
    584e:	0a 26       	eor	r0, r26
    5850:	61 f0       	breq	.+24     	; 0x586a <__fp_cmp+0x46>
    5852:	23 2b       	or	r18, r19
    5854:	24 2b       	or	r18, r20
    5856:	25 2b       	or	r18, r21
    5858:	21 f4       	brne	.+8      	; 0x5862 <__fp_cmp+0x3e>
    585a:	08 95       	ret
    585c:	0a 26       	eor	r0, r26
    585e:	09 f4       	brne	.+2      	; 0x5862 <__fp_cmp+0x3e>
    5860:	a1 40       	sbci	r26, 0x01	; 1
    5862:	a6 95       	lsr	r26
    5864:	8f ef       	ldi	r24, 0xFF	; 255
    5866:	81 1d       	adc	r24, r1
    5868:	81 1d       	adc	r24, r1
    586a:	08 95       	ret

0000586c <__fp_inf>:
    586c:	97 f9       	bld	r25, 7
    586e:	9f 67       	ori	r25, 0x7F	; 127
    5870:	80 e8       	ldi	r24, 0x80	; 128
    5872:	70 e0       	ldi	r23, 0x00	; 0
    5874:	60 e0       	ldi	r22, 0x00	; 0
    5876:	08 95       	ret

00005878 <__fp_nan>:
    5878:	9f ef       	ldi	r25, 0xFF	; 255
    587a:	80 ec       	ldi	r24, 0xC0	; 192
    587c:	08 95       	ret

0000587e <__fp_pscA>:
    587e:	00 24       	eor	r0, r0
    5880:	0a 94       	dec	r0
    5882:	16 16       	cp	r1, r22
    5884:	17 06       	cpc	r1, r23
    5886:	18 06       	cpc	r1, r24
    5888:	09 06       	cpc	r0, r25
    588a:	08 95       	ret

0000588c <__fp_pscB>:
    588c:	00 24       	eor	r0, r0
    588e:	0a 94       	dec	r0
    5890:	12 16       	cp	r1, r18
    5892:	13 06       	cpc	r1, r19
    5894:	14 06       	cpc	r1, r20
    5896:	05 06       	cpc	r0, r21
    5898:	08 95       	ret

0000589a <__fp_round>:
    589a:	09 2e       	mov	r0, r25
    589c:	03 94       	inc	r0
    589e:	00 0c       	add	r0, r0
    58a0:	11 f4       	brne	.+4      	; 0x58a6 <__fp_round+0xc>
    58a2:	88 23       	and	r24, r24
    58a4:	52 f0       	brmi	.+20     	; 0x58ba <__fp_round+0x20>
    58a6:	bb 0f       	add	r27, r27
    58a8:	40 f4       	brcc	.+16     	; 0x58ba <__fp_round+0x20>
    58aa:	bf 2b       	or	r27, r31
    58ac:	11 f4       	brne	.+4      	; 0x58b2 <__fp_round+0x18>
    58ae:	60 ff       	sbrs	r22, 0
    58b0:	04 c0       	rjmp	.+8      	; 0x58ba <__fp_round+0x20>
    58b2:	6f 5f       	subi	r22, 0xFF	; 255
    58b4:	7f 4f       	sbci	r23, 0xFF	; 255
    58b6:	8f 4f       	sbci	r24, 0xFF	; 255
    58b8:	9f 4f       	sbci	r25, 0xFF	; 255
    58ba:	08 95       	ret

000058bc <__fp_split3>:
    58bc:	57 fd       	sbrc	r21, 7
    58be:	90 58       	subi	r25, 0x80	; 128
    58c0:	44 0f       	add	r20, r20
    58c2:	55 1f       	adc	r21, r21
    58c4:	59 f0       	breq	.+22     	; 0x58dc <__fp_splitA+0x10>
    58c6:	5f 3f       	cpi	r21, 0xFF	; 255
    58c8:	71 f0       	breq	.+28     	; 0x58e6 <__fp_splitA+0x1a>
    58ca:	47 95       	ror	r20

000058cc <__fp_splitA>:
    58cc:	88 0f       	add	r24, r24
    58ce:	97 fb       	bst	r25, 7
    58d0:	99 1f       	adc	r25, r25
    58d2:	61 f0       	breq	.+24     	; 0x58ec <__fp_splitA+0x20>
    58d4:	9f 3f       	cpi	r25, 0xFF	; 255
    58d6:	79 f0       	breq	.+30     	; 0x58f6 <__fp_splitA+0x2a>
    58d8:	87 95       	ror	r24
    58da:	08 95       	ret
    58dc:	12 16       	cp	r1, r18
    58de:	13 06       	cpc	r1, r19
    58e0:	14 06       	cpc	r1, r20
    58e2:	55 1f       	adc	r21, r21
    58e4:	f2 cf       	rjmp	.-28     	; 0x58ca <__fp_split3+0xe>
    58e6:	46 95       	lsr	r20
    58e8:	f1 df       	rcall	.-30     	; 0x58cc <__fp_splitA>
    58ea:	08 c0       	rjmp	.+16     	; 0x58fc <__fp_splitA+0x30>
    58ec:	16 16       	cp	r1, r22
    58ee:	17 06       	cpc	r1, r23
    58f0:	18 06       	cpc	r1, r24
    58f2:	99 1f       	adc	r25, r25
    58f4:	f1 cf       	rjmp	.-30     	; 0x58d8 <__fp_splitA+0xc>
    58f6:	86 95       	lsr	r24
    58f8:	71 05       	cpc	r23, r1
    58fa:	61 05       	cpc	r22, r1
    58fc:	08 94       	sec
    58fe:	08 95       	ret

00005900 <__fp_zero>:
    5900:	e8 94       	clt

00005902 <__fp_szero>:
    5902:	bb 27       	eor	r27, r27
    5904:	66 27       	eor	r22, r22
    5906:	77 27       	eor	r23, r23
    5908:	cb 01       	movw	r24, r22
    590a:	97 f9       	bld	r25, 7
    590c:	08 95       	ret

0000590e <__gesf2>:
    590e:	8a df       	rcall	.-236    	; 0x5824 <__fp_cmp>
    5910:	08 f4       	brcc	.+2      	; 0x5914 <__gesf2+0x6>
    5912:	8f ef       	ldi	r24, 0xFF	; 255
    5914:	08 95       	ret

00005916 <__mulsf3>:
    5916:	0b d0       	rcall	.+22     	; 0x592e <__mulsf3x>
    5918:	c0 cf       	rjmp	.-128    	; 0x589a <__fp_round>
    591a:	b1 df       	rcall	.-158    	; 0x587e <__fp_pscA>
    591c:	28 f0       	brcs	.+10     	; 0x5928 <__mulsf3+0x12>
    591e:	b6 df       	rcall	.-148    	; 0x588c <__fp_pscB>
    5920:	18 f0       	brcs	.+6      	; 0x5928 <__mulsf3+0x12>
    5922:	95 23       	and	r25, r21
    5924:	09 f0       	breq	.+2      	; 0x5928 <__mulsf3+0x12>
    5926:	a2 cf       	rjmp	.-188    	; 0x586c <__fp_inf>
    5928:	a7 cf       	rjmp	.-178    	; 0x5878 <__fp_nan>
    592a:	11 24       	eor	r1, r1
    592c:	ea cf       	rjmp	.-44     	; 0x5902 <__fp_szero>

0000592e <__mulsf3x>:
    592e:	c6 df       	rcall	.-116    	; 0x58bc <__fp_split3>
    5930:	a0 f3       	brcs	.-24     	; 0x591a <__mulsf3+0x4>

00005932 <__mulsf3_pse>:
    5932:	95 9f       	mul	r25, r21
    5934:	d1 f3       	breq	.-12     	; 0x592a <__mulsf3+0x14>
    5936:	95 0f       	add	r25, r21
    5938:	50 e0       	ldi	r21, 0x00	; 0
    593a:	55 1f       	adc	r21, r21
    593c:	62 9f       	mul	r22, r18
    593e:	f0 01       	movw	r30, r0
    5940:	72 9f       	mul	r23, r18
    5942:	bb 27       	eor	r27, r27
    5944:	f0 0d       	add	r31, r0
    5946:	b1 1d       	adc	r27, r1
    5948:	63 9f       	mul	r22, r19
    594a:	aa 27       	eor	r26, r26
    594c:	f0 0d       	add	r31, r0
    594e:	b1 1d       	adc	r27, r1
    5950:	aa 1f       	adc	r26, r26
    5952:	64 9f       	mul	r22, r20
    5954:	66 27       	eor	r22, r22
    5956:	b0 0d       	add	r27, r0
    5958:	a1 1d       	adc	r26, r1
    595a:	66 1f       	adc	r22, r22
    595c:	82 9f       	mul	r24, r18
    595e:	22 27       	eor	r18, r18
    5960:	b0 0d       	add	r27, r0
    5962:	a1 1d       	adc	r26, r1
    5964:	62 1f       	adc	r22, r18
    5966:	73 9f       	mul	r23, r19
    5968:	b0 0d       	add	r27, r0
    596a:	a1 1d       	adc	r26, r1
    596c:	62 1f       	adc	r22, r18
    596e:	83 9f       	mul	r24, r19
    5970:	a0 0d       	add	r26, r0
    5972:	61 1d       	adc	r22, r1
    5974:	22 1f       	adc	r18, r18
    5976:	74 9f       	mul	r23, r20
    5978:	33 27       	eor	r19, r19
    597a:	a0 0d       	add	r26, r0
    597c:	61 1d       	adc	r22, r1
    597e:	23 1f       	adc	r18, r19
    5980:	84 9f       	mul	r24, r20
    5982:	60 0d       	add	r22, r0
    5984:	21 1d       	adc	r18, r1
    5986:	82 2f       	mov	r24, r18
    5988:	76 2f       	mov	r23, r22
    598a:	6a 2f       	mov	r22, r26
    598c:	11 24       	eor	r1, r1
    598e:	9f 57       	subi	r25, 0x7F	; 127
    5990:	50 40       	sbci	r21, 0x00	; 0
    5992:	8a f0       	brmi	.+34     	; 0x59b6 <__mulsf3_pse+0x84>
    5994:	e1 f0       	breq	.+56     	; 0x59ce <__mulsf3_pse+0x9c>
    5996:	88 23       	and	r24, r24
    5998:	4a f0       	brmi	.+18     	; 0x59ac <__mulsf3_pse+0x7a>
    599a:	ee 0f       	add	r30, r30
    599c:	ff 1f       	adc	r31, r31
    599e:	bb 1f       	adc	r27, r27
    59a0:	66 1f       	adc	r22, r22
    59a2:	77 1f       	adc	r23, r23
    59a4:	88 1f       	adc	r24, r24
    59a6:	91 50       	subi	r25, 0x01	; 1
    59a8:	50 40       	sbci	r21, 0x00	; 0
    59aa:	a9 f7       	brne	.-22     	; 0x5996 <__mulsf3_pse+0x64>
    59ac:	9e 3f       	cpi	r25, 0xFE	; 254
    59ae:	51 05       	cpc	r21, r1
    59b0:	70 f0       	brcs	.+28     	; 0x59ce <__mulsf3_pse+0x9c>
    59b2:	5c cf       	rjmp	.-328    	; 0x586c <__fp_inf>
    59b4:	a6 cf       	rjmp	.-180    	; 0x5902 <__fp_szero>
    59b6:	5f 3f       	cpi	r21, 0xFF	; 255
    59b8:	ec f3       	brlt	.-6      	; 0x59b4 <__mulsf3_pse+0x82>
    59ba:	98 3e       	cpi	r25, 0xE8	; 232
    59bc:	dc f3       	brlt	.-10     	; 0x59b4 <__mulsf3_pse+0x82>
    59be:	86 95       	lsr	r24
    59c0:	77 95       	ror	r23
    59c2:	67 95       	ror	r22
    59c4:	b7 95       	ror	r27
    59c6:	f7 95       	ror	r31
    59c8:	e7 95       	ror	r30
    59ca:	9f 5f       	subi	r25, 0xFF	; 255
    59cc:	c1 f7       	brne	.-16     	; 0x59be <__mulsf3_pse+0x8c>
    59ce:	fe 2b       	or	r31, r30
    59d0:	88 0f       	add	r24, r24
    59d2:	91 1d       	adc	r25, r1
    59d4:	96 95       	lsr	r25
    59d6:	87 95       	ror	r24
    59d8:	97 f9       	bld	r25, 7
    59da:	08 95       	ret

000059dc <__cxa_pure_virtual>:
    59dc:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <abort>

000059e0 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    59e0:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    59e2:	91 8d       	ldd	r25, Z+25	; 0x19
    59e4:	22 8d       	ldd	r18, Z+26	; 0x1a
    59e6:	89 2f       	mov	r24, r25
    59e8:	90 e0       	ldi	r25, 0x00	; 0
    59ea:	80 5c       	subi	r24, 0xC0	; 192
    59ec:	9f 4f       	sbci	r25, 0xFF	; 255
    59ee:	82 1b       	sub	r24, r18
    59f0:	91 09       	sbc	r25, r1
}
    59f2:	8f 73       	andi	r24, 0x3F	; 63
    59f4:	99 27       	eor	r25, r25
    59f6:	08 95       	ret

000059f8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    59f8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    59fa:	91 8d       	ldd	r25, Z+25	; 0x19
    59fc:	82 8d       	ldd	r24, Z+26	; 0x1a
    59fe:	98 17       	cp	r25, r24
    5a00:	31 f0       	breq	.+12     	; 0x5a0e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    5a02:	82 8d       	ldd	r24, Z+26	; 0x1a
    5a04:	e8 0f       	add	r30, r24
    5a06:	f1 1d       	adc	r31, r1
    5a08:	85 8d       	ldd	r24, Z+29	; 0x1d
    5a0a:	90 e0       	ldi	r25, 0x00	; 0
    5a0c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    5a0e:	8f ef       	ldi	r24, 0xFF	; 255
    5a10:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    5a12:	08 95       	ret

00005a14 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    5a14:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    5a16:	91 8d       	ldd	r25, Z+25	; 0x19
    5a18:	82 8d       	ldd	r24, Z+26	; 0x1a
    5a1a:	98 17       	cp	r25, r24
    5a1c:	61 f0       	breq	.+24     	; 0x5a36 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    5a1e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5a20:	df 01       	movw	r26, r30
    5a22:	a8 0f       	add	r26, r24
    5a24:	b1 1d       	adc	r27, r1
    5a26:	5d 96       	adiw	r26, 0x1d	; 29
    5a28:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    5a2a:	92 8d       	ldd	r25, Z+26	; 0x1a
    5a2c:	9f 5f       	subi	r25, 0xFF	; 255
    5a2e:	9f 73       	andi	r25, 0x3F	; 63
    5a30:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    5a32:	90 e0       	ldi	r25, 0x00	; 0
    5a34:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    5a36:	8f ef       	ldi	r24, 0xFF	; 255
    5a38:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    5a3a:	08 95       	ret

00005a3c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    5a3c:	fc 01       	movw	r30, r24
    5a3e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    5a40:	44 8d       	ldd	r20, Z+28	; 0x1c
    5a42:	25 2f       	mov	r18, r21
    5a44:	30 e0       	ldi	r19, 0x00	; 0
    5a46:	84 2f       	mov	r24, r20
    5a48:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    5a4a:	82 1b       	sub	r24, r18
    5a4c:	93 0b       	sbc	r25, r19
    5a4e:	54 17       	cp	r21, r20
    5a50:	10 f0       	brcs	.+4      	; 0x5a56 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    5a52:	cf 96       	adiw	r24, 0x3f	; 63
    5a54:	08 95       	ret
  return tail - head - 1;
    5a56:	01 97       	sbiw	r24, 0x01	; 1
}
    5a58:	08 95       	ret

00005a5a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    5a5a:	8c eb       	ldi	r24, 0xBC	; 188
    5a5c:	9e e2       	ldi	r25, 0x2E	; 46
    5a5e:	89 2b       	or	r24, r25
    5a60:	39 f0       	breq	.+14     	; 0x5a70 <_Z14serialEventRunv+0x16>
    5a62:	80 e0       	ldi	r24, 0x00	; 0
    5a64:	90 e0       	ldi	r25, 0x00	; 0
    5a66:	89 2b       	or	r24, r25
    5a68:	19 f0       	breq	.+6      	; 0x5a70 <_Z14serialEventRunv+0x16>
    5a6a:	86 d1       	rcall	.+780    	; 0x5d78 <_Z17Serial0_availablev>
    5a6c:	81 11       	cpse	r24, r1
    5a6e:	25 c0       	rjmp	.+74     	; 0x5aba <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5a70:	80 e0       	ldi	r24, 0x00	; 0
    5a72:	90 e0       	ldi	r25, 0x00	; 0
    5a74:	89 2b       	or	r24, r25
    5a76:	41 f0       	breq	.+16     	; 0x5a88 <_Z14serialEventRunv+0x2e>
    5a78:	80 e0       	ldi	r24, 0x00	; 0
    5a7a:	90 e0       	ldi	r25, 0x00	; 0
    5a7c:	89 2b       	or	r24, r25
    5a7e:	21 f0       	breq	.+8      	; 0x5a88 <_Z14serialEventRunv+0x2e>
    5a80:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5a84:	81 11       	cpse	r24, r1
    5a86:	1c c0       	rjmp	.+56     	; 0x5ac0 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    5a88:	80 e0       	ldi	r24, 0x00	; 0
    5a8a:	90 e0       	ldi	r25, 0x00	; 0
    5a8c:	89 2b       	or	r24, r25
    5a8e:	41 f0       	breq	.+16     	; 0x5aa0 <_Z14serialEventRunv+0x46>
    5a90:	80 e0       	ldi	r24, 0x00	; 0
    5a92:	90 e0       	ldi	r25, 0x00	; 0
    5a94:	89 2b       	or	r24, r25
    5a96:	21 f0       	breq	.+8      	; 0x5aa0 <_Z14serialEventRunv+0x46>
    5a98:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5a9c:	81 11       	cpse	r24, r1
    5a9e:	13 c0       	rjmp	.+38     	; 0x5ac6 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    5aa0:	80 e0       	ldi	r24, 0x00	; 0
    5aa2:	90 e0       	ldi	r25, 0x00	; 0
    5aa4:	89 2b       	or	r24, r25
    5aa6:	a1 f0       	breq	.+40     	; 0x5ad0 <_Z14serialEventRunv+0x76>
    5aa8:	80 e0       	ldi	r24, 0x00	; 0
    5aaa:	90 e0       	ldi	r25, 0x00	; 0
    5aac:	89 2b       	or	r24, r25
    5aae:	81 f0       	breq	.+32     	; 0x5ad0 <_Z14serialEventRunv+0x76>
    5ab0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5ab4:	81 11       	cpse	r24, r1
    5ab6:	0a c0       	rjmp	.+20     	; 0x5acc <_Z14serialEventRunv+0x72>
    5ab8:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    5aba:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5abe:	d8 cf       	rjmp	.-80     	; 0x5a70 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5ac0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5ac4:	e1 cf       	rjmp	.-62     	; 0x5a88 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    5ac6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5aca:	ea cf       	rjmp	.-44     	; 0x5aa0 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    5acc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    5ad0:	08 95       	ret

00005ad2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    5ad2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    5ad4:	84 8d       	ldd	r24, Z+28	; 0x1c
    5ad6:	df 01       	movw	r26, r30
    5ad8:	a8 0f       	add	r26, r24
    5ada:	b1 1d       	adc	r27, r1
    5adc:	a3 5a       	subi	r26, 0xA3	; 163
    5ade:	bf 4f       	sbci	r27, 0xFF	; 255
    5ae0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    5ae2:	84 8d       	ldd	r24, Z+28	; 0x1c
    5ae4:	90 e0       	ldi	r25, 0x00	; 0
    5ae6:	01 96       	adiw	r24, 0x01	; 1
    5ae8:	8f 73       	andi	r24, 0x3F	; 63
    5aea:	99 27       	eor	r25, r25
    5aec:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    5aee:	a6 89       	ldd	r26, Z+22	; 0x16
    5af0:	b7 89       	ldd	r27, Z+23	; 0x17
    5af2:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    5af4:	a0 89       	ldd	r26, Z+16	; 0x10
    5af6:	b1 89       	ldd	r27, Z+17	; 0x11
    5af8:	8c 91       	ld	r24, X
    5afa:	83 70       	andi	r24, 0x03	; 3
    5afc:	80 64       	ori	r24, 0x40	; 64
    5afe:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    5b00:	93 8d       	ldd	r25, Z+27	; 0x1b
    5b02:	84 8d       	ldd	r24, Z+28	; 0x1c
    5b04:	98 13       	cpse	r25, r24
    5b06:	06 c0       	rjmp	.+12     	; 0x5b14 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    5b08:	02 88       	ldd	r0, Z+18	; 0x12
    5b0a:	f3 89       	ldd	r31, Z+19	; 0x13
    5b0c:	e0 2d       	mov	r30, r0
    5b0e:	80 81       	ld	r24, Z
    5b10:	8f 7d       	andi	r24, 0xDF	; 223
    5b12:	80 83       	st	Z, r24
    5b14:	08 95       	ret

00005b16 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    5b16:	ef 92       	push	r14
    5b18:	ff 92       	push	r15
    5b1a:	0f 93       	push	r16
    5b1c:	1f 93       	push	r17
    5b1e:	cf 93       	push	r28
    5b20:	df 93       	push	r29
    5b22:	ec 01       	movw	r28, r24
  _written = true;
    5b24:	81 e0       	ldi	r24, 0x01	; 1
    5b26:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    5b28:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5b2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5b2c:	98 13       	cpse	r25, r24
    5b2e:	05 c0       	rjmp	.+10     	; 0x5b3a <_ZN14HardwareSerial5writeEh+0x24>
    5b30:	e8 89       	ldd	r30, Y+16	; 0x10
    5b32:	f9 89       	ldd	r31, Y+17	; 0x11
    5b34:	80 81       	ld	r24, Z
    5b36:	85 fd       	sbrc	r24, 5
    5b38:	25 c0       	rjmp	.+74     	; 0x5b84 <_ZN14HardwareSerial5writeEh+0x6e>
    5b3a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    5b3c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    5b3e:	10 e0       	ldi	r17, 0x00	; 0
    5b40:	0f 5f       	subi	r16, 0xFF	; 255
    5b42:	1f 4f       	sbci	r17, 0xFF	; 255
    5b44:	0f 73       	andi	r16, 0x3F	; 63
    5b46:	11 27       	eor	r17, r17
    5b48:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    5b4a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5b4c:	e8 12       	cpse	r14, r24
    5b4e:	0b c0       	rjmp	.+22     	; 0x5b66 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    5b50:	0f b6       	in	r0, 0x3f	; 63
    5b52:	07 fc       	sbrc	r0, 7
    5b54:	fa cf       	rjmp	.-12     	; 0x5b4a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    5b56:	e8 89       	ldd	r30, Y+16	; 0x10
    5b58:	f9 89       	ldd	r31, Y+17	; 0x11
    5b5a:	80 81       	ld	r24, Z
    5b5c:	85 ff       	sbrs	r24, 5
    5b5e:	f5 cf       	rjmp	.-22     	; 0x5b4a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    5b60:	ce 01       	movw	r24, r28
    5b62:	b7 df       	rcall	.-146    	; 0x5ad2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    5b64:	f2 cf       	rjmp	.-28     	; 0x5b4a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    5b66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b68:	fe 01       	movw	r30, r28
    5b6a:	e8 0f       	add	r30, r24
    5b6c:	f1 1d       	adc	r31, r1
    5b6e:	e3 5a       	subi	r30, 0xA3	; 163
    5b70:	ff 4f       	sbci	r31, 0xFF	; 255
    5b72:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5b74:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5b76:	f8 94       	cli
    _tx_buffer_head = i;
    5b78:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    5b7a:	ea 89       	ldd	r30, Y+18	; 0x12
    5b7c:	fb 89       	ldd	r31, Y+19	; 0x13
    5b7e:	80 81       	ld	r24, Z
    5b80:	80 62       	ori	r24, 0x20	; 32
    5b82:	0a c0       	rjmp	.+20     	; 0x5b98 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5b84:	9f b7       	in	r25, 0x3f	; 63
    5b86:	f8 94       	cli
      *_udr = c;
    5b88:	ee 89       	ldd	r30, Y+22	; 0x16
    5b8a:	ff 89       	ldd	r31, Y+23	; 0x17
    5b8c:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    5b8e:	e8 89       	ldd	r30, Y+16	; 0x10
    5b90:	f9 89       	ldd	r31, Y+17	; 0x11
    5b92:	80 81       	ld	r24, Z
    5b94:	83 70       	andi	r24, 0x03	; 3
    5b96:	80 64       	ori	r24, 0x40	; 64
    5b98:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5b9a:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    5b9c:	81 e0       	ldi	r24, 0x01	; 1
    5b9e:	90 e0       	ldi	r25, 0x00	; 0
    5ba0:	df 91       	pop	r29
    5ba2:	cf 91       	pop	r28
    5ba4:	1f 91       	pop	r17
    5ba6:	0f 91       	pop	r16
    5ba8:	ff 90       	pop	r15
    5baa:	ef 90       	pop	r14
    5bac:	08 95       	ret

00005bae <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    5bae:	cf 93       	push	r28
    5bb0:	df 93       	push	r29
    5bb2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    5bb4:	88 8d       	ldd	r24, Y+24	; 0x18
    5bb6:	88 23       	and	r24, r24
    5bb8:	c1 f0       	breq	.+48     	; 0x5bea <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    5bba:	ea 89       	ldd	r30, Y+18	; 0x12
    5bbc:	fb 89       	ldd	r31, Y+19	; 0x13
    5bbe:	80 81       	ld	r24, Z
    5bc0:	85 fd       	sbrc	r24, 5
    5bc2:	05 c0       	rjmp	.+10     	; 0x5bce <_ZN14HardwareSerial5flushEv+0x20>
    5bc4:	a8 89       	ldd	r26, Y+16	; 0x10
    5bc6:	b9 89       	ldd	r27, Y+17	; 0x11
    5bc8:	8c 91       	ld	r24, X
    5bca:	86 fd       	sbrc	r24, 6
    5bcc:	0e c0       	rjmp	.+28     	; 0x5bea <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    5bce:	0f b6       	in	r0, 0x3f	; 63
    5bd0:	07 fc       	sbrc	r0, 7
    5bd2:	f5 cf       	rjmp	.-22     	; 0x5bbe <_ZN14HardwareSerial5flushEv+0x10>
    5bd4:	80 81       	ld	r24, Z
    5bd6:	85 ff       	sbrs	r24, 5
    5bd8:	f2 cf       	rjmp	.-28     	; 0x5bbe <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    5bda:	a8 89       	ldd	r26, Y+16	; 0x10
    5bdc:	b9 89       	ldd	r27, Y+17	; 0x11
    5bde:	8c 91       	ld	r24, X
    5be0:	85 ff       	sbrs	r24, 5
    5be2:	ed cf       	rjmp	.-38     	; 0x5bbe <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    5be4:	ce 01       	movw	r24, r28
    5be6:	75 df       	rcall	.-278    	; 0x5ad2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    5be8:	e8 cf       	rjmp	.-48     	; 0x5bba <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    5bea:	df 91       	pop	r29
    5bec:	cf 91       	pop	r28
    5bee:	08 95       	ret

00005bf0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    5bf0:	cf 92       	push	r12
    5bf2:	df 92       	push	r13
    5bf4:	ef 92       	push	r14
    5bf6:	ff 92       	push	r15
    5bf8:	1f 93       	push	r17
    5bfa:	cf 93       	push	r28
    5bfc:	df 93       	push	r29
    5bfe:	ec 01       	movw	r28, r24
    5c00:	6a 01       	movw	r12, r20
    5c02:	7b 01       	movw	r14, r22
    5c04:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    5c06:	e8 89       	ldd	r30, Y+16	; 0x10
    5c08:	f9 89       	ldd	r31, Y+17	; 0x11
    5c0a:	82 e0       	ldi	r24, 0x02	; 2
    5c0c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5c0e:	41 15       	cp	r20, r1
    5c10:	51 4e       	sbci	r21, 0xE1	; 225
    5c12:	61 05       	cpc	r22, r1
    5c14:	71 05       	cpc	r23, r1
    5c16:	b1 f0       	breq	.+44     	; 0x5c44 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    5c18:	60 e0       	ldi	r22, 0x00	; 0
    5c1a:	79 e0       	ldi	r23, 0x09	; 9
    5c1c:	8d e3       	ldi	r24, 0x3D	; 61
    5c1e:	90 e0       	ldi	r25, 0x00	; 0
    5c20:	a7 01       	movw	r20, r14
    5c22:	96 01       	movw	r18, r12
    5c24:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__udivmodsi4>
    5c28:	da 01       	movw	r26, r20
    5c2a:	c9 01       	movw	r24, r18
    5c2c:	01 97       	sbiw	r24, 0x01	; 1
    5c2e:	a1 09       	sbc	r26, r1
    5c30:	b1 09       	sbc	r27, r1
    5c32:	b6 95       	lsr	r27
    5c34:	a7 95       	ror	r26
    5c36:	97 95       	ror	r25
    5c38:	87 95       	ror	r24
    5c3a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5c3c:	21 15       	cp	r18, r1
    5c3e:	80 e1       	ldi	r24, 0x10	; 16
    5c40:	38 07       	cpc	r19, r24
    5c42:	a8 f0       	brcs	.+42     	; 0x5c6e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    5c44:	e8 89       	ldd	r30, Y+16	; 0x10
    5c46:	f9 89       	ldd	r31, Y+17	; 0x11
    5c48:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    5c4a:	60 e8       	ldi	r22, 0x80	; 128
    5c4c:	74 e8       	ldi	r23, 0x84	; 132
    5c4e:	8e e1       	ldi	r24, 0x1E	; 30
    5c50:	90 e0       	ldi	r25, 0x00	; 0
    5c52:	a7 01       	movw	r20, r14
    5c54:	96 01       	movw	r18, r12
    5c56:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__udivmodsi4>
    5c5a:	da 01       	movw	r26, r20
    5c5c:	c9 01       	movw	r24, r18
    5c5e:	01 97       	sbiw	r24, 0x01	; 1
    5c60:	a1 09       	sbc	r26, r1
    5c62:	b1 09       	sbc	r27, r1
    5c64:	b6 95       	lsr	r27
    5c66:	a7 95       	ror	r26
    5c68:	97 95       	ror	r25
    5c6a:	87 95       	ror	r24
    5c6c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    5c6e:	ec 85       	ldd	r30, Y+12	; 0x0c
    5c70:	fd 85       	ldd	r31, Y+13	; 0x0d
    5c72:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    5c74:	ee 85       	ldd	r30, Y+14	; 0x0e
    5c76:	ff 85       	ldd	r31, Y+15	; 0x0f
    5c78:	20 83       	st	Z, r18

  _written = false;
    5c7a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    5c7c:	ec 89       	ldd	r30, Y+20	; 0x14
    5c7e:	fd 89       	ldd	r31, Y+21	; 0x15
    5c80:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    5c82:	ea 89       	ldd	r30, Y+18	; 0x12
    5c84:	fb 89       	ldd	r31, Y+19	; 0x13
    5c86:	80 81       	ld	r24, Z
    5c88:	80 61       	ori	r24, 0x10	; 16
    5c8a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    5c8c:	ea 89       	ldd	r30, Y+18	; 0x12
    5c8e:	fb 89       	ldd	r31, Y+19	; 0x13
    5c90:	80 81       	ld	r24, Z
    5c92:	88 60       	ori	r24, 0x08	; 8
    5c94:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    5c96:	ea 89       	ldd	r30, Y+18	; 0x12
    5c98:	fb 89       	ldd	r31, Y+19	; 0x13
    5c9a:	80 81       	ld	r24, Z
    5c9c:	80 68       	ori	r24, 0x80	; 128
    5c9e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    5ca0:	ea 89       	ldd	r30, Y+18	; 0x12
    5ca2:	fb 89       	ldd	r31, Y+19	; 0x13
    5ca4:	80 81       	ld	r24, Z
    5ca6:	8f 7d       	andi	r24, 0xDF	; 223
    5ca8:	80 83       	st	Z, r24
}
    5caa:	df 91       	pop	r29
    5cac:	cf 91       	pop	r28
    5cae:	1f 91       	pop	r17
    5cb0:	ff 90       	pop	r15
    5cb2:	ef 90       	pop	r14
    5cb4:	df 90       	pop	r13
    5cb6:	cf 90       	pop	r12
    5cb8:	08 95       	ret

00005cba <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    5cba:	1f 92       	push	r1
    5cbc:	0f 92       	push	r0
    5cbe:	0f b6       	in	r0, 0x3f	; 63
    5cc0:	0f 92       	push	r0
    5cc2:	11 24       	eor	r1, r1
    5cc4:	0b b6       	in	r0, 0x3b	; 59
    5cc6:	0f 92       	push	r0
    5cc8:	2f 93       	push	r18
    5cca:	8f 93       	push	r24
    5ccc:	9f 93       	push	r25
    5cce:	ef 93       	push	r30
    5cd0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5cd2:	e0 91 df 05 	lds	r30, 0x05DF	; 0x8005df <Serial+0x10>
    5cd6:	f0 91 e0 05 	lds	r31, 0x05E0	; 0x8005e0 <Serial+0x11>
    5cda:	80 81       	ld	r24, Z
    5cdc:	e0 91 e5 05 	lds	r30, 0x05E5	; 0x8005e5 <Serial+0x16>
    5ce0:	f0 91 e6 05 	lds	r31, 0x05E6	; 0x8005e6 <Serial+0x17>
    5ce4:	82 fd       	sbrc	r24, 2
    5ce6:	12 c0       	rjmp	.+36     	; 0x5d0c <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5ce8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5cea:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <Serial+0x19>
    5cee:	8f 5f       	subi	r24, 0xFF	; 255
    5cf0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5cf2:	20 91 e9 05 	lds	r18, 0x05E9	; 0x8005e9 <Serial+0x1a>
    5cf6:	82 17       	cp	r24, r18
    5cf8:	51 f0       	breq	.+20     	; 0x5d0e <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    5cfa:	e0 91 e8 05 	lds	r30, 0x05E8	; 0x8005e8 <Serial+0x19>
    5cfe:	f0 e0       	ldi	r31, 0x00	; 0
    5d00:	e1 53       	subi	r30, 0x31	; 49
    5d02:	fa 4f       	sbci	r31, 0xFA	; 250
    5d04:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    5d06:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <Serial+0x19>
    5d0a:	01 c0       	rjmp	.+2      	; 0x5d0e <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    5d0c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    5d0e:	ff 91       	pop	r31
    5d10:	ef 91       	pop	r30
    5d12:	9f 91       	pop	r25
    5d14:	8f 91       	pop	r24
    5d16:	2f 91       	pop	r18
    5d18:	0f 90       	pop	r0
    5d1a:	0b be       	out	0x3b, r0	; 59
    5d1c:	0f 90       	pop	r0
    5d1e:	0f be       	out	0x3f, r0	; 63
    5d20:	0f 90       	pop	r0
    5d22:	1f 90       	pop	r1
    5d24:	18 95       	reti

00005d26 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    5d26:	1f 92       	push	r1
    5d28:	0f 92       	push	r0
    5d2a:	0f b6       	in	r0, 0x3f	; 63
    5d2c:	0f 92       	push	r0
    5d2e:	11 24       	eor	r1, r1
    5d30:	0b b6       	in	r0, 0x3b	; 59
    5d32:	0f 92       	push	r0
    5d34:	2f 93       	push	r18
    5d36:	3f 93       	push	r19
    5d38:	4f 93       	push	r20
    5d3a:	5f 93       	push	r21
    5d3c:	6f 93       	push	r22
    5d3e:	7f 93       	push	r23
    5d40:	8f 93       	push	r24
    5d42:	9f 93       	push	r25
    5d44:	af 93       	push	r26
    5d46:	bf 93       	push	r27
    5d48:	ef 93       	push	r30
    5d4a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    5d4c:	8f ec       	ldi	r24, 0xCF	; 207
    5d4e:	95 e0       	ldi	r25, 0x05	; 5
    5d50:	c0 de       	rcall	.-640    	; 0x5ad2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5d52:	ff 91       	pop	r31
    5d54:	ef 91       	pop	r30
    5d56:	bf 91       	pop	r27
    5d58:	af 91       	pop	r26
    5d5a:	9f 91       	pop	r25
    5d5c:	8f 91       	pop	r24
    5d5e:	7f 91       	pop	r23
    5d60:	6f 91       	pop	r22
    5d62:	5f 91       	pop	r21
    5d64:	4f 91       	pop	r20
    5d66:	3f 91       	pop	r19
    5d68:	2f 91       	pop	r18
    5d6a:	0f 90       	pop	r0
    5d6c:	0b be       	out	0x3b, r0	; 59
    5d6e:	0f 90       	pop	r0
    5d70:	0f be       	out	0x3f, r0	; 63
    5d72:	0f 90       	pop	r0
    5d74:	1f 90       	pop	r1
    5d76:	18 95       	reti

00005d78 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5d78:	8f ec       	ldi	r24, 0xCF	; 207
    5d7a:	95 e0       	ldi	r25, 0x05	; 5
    5d7c:	31 de       	rcall	.-926    	; 0x59e0 <_ZN14HardwareSerial9availableEv>
    5d7e:	21 e0       	ldi	r18, 0x01	; 1
    5d80:	89 2b       	or	r24, r25
    5d82:	09 f4       	brne	.+2      	; 0x5d86 <_Z17Serial0_availablev+0xe>
    5d84:	20 e0       	ldi	r18, 0x00	; 0
}
    5d86:	82 2f       	mov	r24, r18
    5d88:	08 95       	ret

00005d8a <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5d8a:	ef ec       	ldi	r30, 0xCF	; 207
    5d8c:	f5 e0       	ldi	r31, 0x05	; 5
    5d8e:	13 82       	std	Z+3, r1	; 0x03
    5d90:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    5d92:	88 ee       	ldi	r24, 0xE8	; 232
    5d94:	93 e0       	ldi	r25, 0x03	; 3
    5d96:	a0 e0       	ldi	r26, 0x00	; 0
    5d98:	b0 e0       	ldi	r27, 0x00	; 0
    5d9a:	84 83       	std	Z+4, r24	; 0x04
    5d9c:	95 83       	std	Z+5, r25	; 0x05
    5d9e:	a6 83       	std	Z+6, r26	; 0x06
    5da0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5da2:	8e e4       	ldi	r24, 0x4E	; 78
    5da4:	93 e0       	ldi	r25, 0x03	; 3
    5da6:	91 83       	std	Z+1, r25	; 0x01
    5da8:	80 83       	st	Z, r24
    5daa:	85 ec       	ldi	r24, 0xC5	; 197
    5dac:	90 e0       	ldi	r25, 0x00	; 0
    5dae:	95 87       	std	Z+13, r25	; 0x0d
    5db0:	84 87       	std	Z+12, r24	; 0x0c
    5db2:	84 ec       	ldi	r24, 0xC4	; 196
    5db4:	90 e0       	ldi	r25, 0x00	; 0
    5db6:	97 87       	std	Z+15, r25	; 0x0f
    5db8:	86 87       	std	Z+14, r24	; 0x0e
    5dba:	80 ec       	ldi	r24, 0xC0	; 192
    5dbc:	90 e0       	ldi	r25, 0x00	; 0
    5dbe:	91 8b       	std	Z+17, r25	; 0x11
    5dc0:	80 8b       	std	Z+16, r24	; 0x10
    5dc2:	81 ec       	ldi	r24, 0xC1	; 193
    5dc4:	90 e0       	ldi	r25, 0x00	; 0
    5dc6:	93 8b       	std	Z+19, r25	; 0x13
    5dc8:	82 8b       	std	Z+18, r24	; 0x12
    5dca:	82 ec       	ldi	r24, 0xC2	; 194
    5dcc:	90 e0       	ldi	r25, 0x00	; 0
    5dce:	95 8b       	std	Z+21, r25	; 0x15
    5dd0:	84 8b       	std	Z+20, r24	; 0x14
    5dd2:	86 ec       	ldi	r24, 0xC6	; 198
    5dd4:	90 e0       	ldi	r25, 0x00	; 0
    5dd6:	97 8b       	std	Z+23, r25	; 0x17
    5dd8:	86 8b       	std	Z+22, r24	; 0x16
    5dda:	11 8e       	std	Z+25, r1	; 0x19
    5ddc:	12 8e       	std	Z+26, r1	; 0x1a
    5dde:	13 8e       	std	Z+27, r1	; 0x1b
    5de0:	14 8e       	std	Z+28, r1	; 0x1c
    5de2:	08 95       	ret

00005de4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    5de4:	08 95       	ret

00005de6 <initVariant>:
    5de6:	08 95       	ret

00005de8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    5de8:	c9 d6       	rcall	.+3474   	; 0x6b7c <init>

	initVariant();
    5dea:	fd df       	rcall	.-6      	; 0x5de6 <initVariant>
    5dec:	0e 94 a3 06 	call	0xd46	; 0xd46 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    5df0:	cd e2       	ldi	r28, 0x2D	; 45
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    5df2:	dd e2       	ldi	r29, 0x2D	; 45
    5df4:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    5df8:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    5dfa:	e1 f3       	breq	.-8      	; 0x5df4 <main+0xc>
    5dfc:	2e de       	rcall	.-932    	; 0x5a5a <_Z14serialEventRunv>
    5dfe:	fa cf       	rjmp	.-12     	; 0x5df4 <main+0xc>

00005e00 <_ZN5Print5writeEPKhj>:
    5e00:	cf 92       	push	r12
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    5e02:	df 92       	push	r13
    5e04:	ef 92       	push	r14
    5e06:	ff 92       	push	r15
    5e08:	0f 93       	push	r16
    5e0a:	1f 93       	push	r17
    5e0c:	cf 93       	push	r28
    5e0e:	df 93       	push	r29
    5e10:	6c 01       	movw	r12, r24
    5e12:	7a 01       	movw	r14, r20
    5e14:	8b 01       	movw	r16, r22
    5e16:	c0 e0       	ldi	r28, 0x00	; 0
    5e18:	d0 e0       	ldi	r29, 0x00	; 0
    5e1a:	ce 15       	cp	r28, r14
    5e1c:	df 05       	cpc	r29, r15
    5e1e:	81 f0       	breq	.+32     	; 0x5e40 <_ZN5Print5writeEPKhj+0x40>
    5e20:	d8 01       	movw	r26, r16
    5e22:	6d 91       	ld	r22, X+
    5e24:	8d 01       	movw	r16, r26
    5e26:	d6 01       	movw	r26, r12
    5e28:	ed 91       	ld	r30, X+
    5e2a:	fc 91       	ld	r31, X
    5e2c:	01 90       	ld	r0, Z+
    5e2e:	f0 81       	ld	r31, Z
    5e30:	e0 2d       	mov	r30, r0
    5e32:	c6 01       	movw	r24, r12
    5e34:	19 95       	eicall
    5e36:	89 2b       	or	r24, r25
    5e38:	11 f0       	breq	.+4      	; 0x5e3e <_ZN5Print5writeEPKhj+0x3e>
    5e3a:	21 96       	adiw	r28, 0x01	; 1
    5e3c:	ee cf       	rjmp	.-36     	; 0x5e1a <_ZN5Print5writeEPKhj+0x1a>
    5e3e:	7e 01       	movw	r14, r28
    5e40:	c7 01       	movw	r24, r14
    5e42:	df 91       	pop	r29
    5e44:	cf 91       	pop	r28
    5e46:	1f 91       	pop	r17
    5e48:	0f 91       	pop	r16
    5e4a:	ff 90       	pop	r15
    5e4c:	ef 90       	pop	r14
    5e4e:	df 90       	pop	r13
    5e50:	cf 90       	pop	r12
    5e52:	08 95       	ret

00005e54 <_ZN5Print5writeEPKc>:
    5e54:	61 15       	cp	r22, r1
    5e56:	71 05       	cpc	r23, r1
    5e58:	79 f0       	breq	.+30     	; 0x5e78 <_ZN5Print5writeEPKc+0x24>
    5e5a:	fb 01       	movw	r30, r22
    5e5c:	01 90       	ld	r0, Z+
    5e5e:	00 20       	and	r0, r0
    5e60:	e9 f7       	brne	.-6      	; 0x5e5c <_ZN5Print5writeEPKc+0x8>
    5e62:	31 97       	sbiw	r30, 0x01	; 1
    5e64:	af 01       	movw	r20, r30
    5e66:	46 1b       	sub	r20, r22
    5e68:	57 0b       	sbc	r21, r23
    5e6a:	dc 01       	movw	r26, r24
    5e6c:	ed 91       	ld	r30, X+
    5e6e:	fc 91       	ld	r31, X
    5e70:	02 80       	ldd	r0, Z+2	; 0x02
    5e72:	f3 81       	ldd	r31, Z+3	; 0x03
    5e74:	e0 2d       	mov	r30, r0
    5e76:	19 94       	eijmp
    5e78:	80 e0       	ldi	r24, 0x00	; 0
    5e7a:	90 e0       	ldi	r25, 0x00	; 0
    5e7c:	08 95       	ret

00005e7e <_ZN5Print5printERK6String>:
    5e7e:	db 01       	movw	r26, r22
    5e80:	14 96       	adiw	r26, 0x04	; 4
    5e82:	4d 91       	ld	r20, X+
    5e84:	5c 91       	ld	r21, X
    5e86:	15 97       	sbiw	r26, 0x05	; 5
    5e88:	6d 91       	ld	r22, X+
    5e8a:	7c 91       	ld	r23, X
    5e8c:	dc 01       	movw	r26, r24
    5e8e:	ed 91       	ld	r30, X+
    5e90:	fc 91       	ld	r31, X
    5e92:	02 80       	ldd	r0, Z+2	; 0x02
    5e94:	f3 81       	ldd	r31, Z+3	; 0x03
    5e96:	e0 2d       	mov	r30, r0
    5e98:	19 94       	eijmp

00005e9a <_ZN5Print5printEPKc>:
    5e9a:	dc cf       	rjmp	.-72     	; 0x5e54 <_ZN5Print5writeEPKc>

00005e9c <_ZN5Print5printEc>:
    5e9c:	dc 01       	movw	r26, r24
    5e9e:	ed 91       	ld	r30, X+
    5ea0:	fc 91       	ld	r31, X
    5ea2:	01 90       	ld	r0, Z+
    5ea4:	f0 81       	ld	r31, Z
    5ea6:	e0 2d       	mov	r30, r0
    5ea8:	19 94       	eijmp

00005eaa <_ZN5Print7printlnEv>:
    5eaa:	6c e5       	ldi	r22, 0x5C	; 92
    5eac:	73 e0       	ldi	r23, 0x03	; 3
    5eae:	d2 cf       	rjmp	.-92     	; 0x5e54 <_ZN5Print5writeEPKc>

00005eb0 <_ZN5Print7printlnERK6String>:
    5eb0:	0f 93       	push	r16
    5eb2:	1f 93       	push	r17
    5eb4:	cf 93       	push	r28
    5eb6:	df 93       	push	r29
    5eb8:	ec 01       	movw	r28, r24
    5eba:	e1 df       	rcall	.-62     	; 0x5e7e <_ZN5Print5printERK6String>
    5ebc:	8c 01       	movw	r16, r24
    5ebe:	ce 01       	movw	r24, r28
    5ec0:	f4 df       	rcall	.-24     	; 0x5eaa <_ZN5Print7printlnEv>
    5ec2:	80 0f       	add	r24, r16
    5ec4:	91 1f       	adc	r25, r17
    5ec6:	df 91       	pop	r29
    5ec8:	cf 91       	pop	r28
    5eca:	1f 91       	pop	r17
    5ecc:	0f 91       	pop	r16
    5ece:	08 95       	ret

00005ed0 <_ZN5Print7printlnEPKc>:
    5ed0:	0f 93       	push	r16
    5ed2:	1f 93       	push	r17
    5ed4:	cf 93       	push	r28
    5ed6:	df 93       	push	r29
    5ed8:	ec 01       	movw	r28, r24
    5eda:	bc df       	rcall	.-136    	; 0x5e54 <_ZN5Print5writeEPKc>
    5edc:	8c 01       	movw	r16, r24
    5ede:	ce 01       	movw	r24, r28
    5ee0:	e4 df       	rcall	.-56     	; 0x5eaa <_ZN5Print7printlnEv>
    5ee2:	80 0f       	add	r24, r16
    5ee4:	91 1f       	adc	r25, r17
    5ee6:	df 91       	pop	r29
    5ee8:	cf 91       	pop	r28
    5eea:	1f 91       	pop	r17
    5eec:	0f 91       	pop	r16
    5eee:	08 95       	ret

00005ef0 <_ZN5Print11printNumberEmh>:
    5ef0:	8f 92       	push	r8
    5ef2:	9f 92       	push	r9
    5ef4:	af 92       	push	r10
    5ef6:	bf 92       	push	r11
    5ef8:	ef 92       	push	r14
    5efa:	ff 92       	push	r15
    5efc:	0f 93       	push	r16
    5efe:	1f 93       	push	r17
    5f00:	cf 93       	push	r28
    5f02:	df 93       	push	r29
    5f04:	cd b7       	in	r28, 0x3d	; 61
    5f06:	de b7       	in	r29, 0x3e	; 62
    5f08:	a1 97       	sbiw	r28, 0x21	; 33
    5f0a:	0f b6       	in	r0, 0x3f	; 63
    5f0c:	f8 94       	cli
    5f0e:	de bf       	out	0x3e, r29	; 62
    5f10:	0f be       	out	0x3f, r0	; 63
    5f12:	cd bf       	out	0x3d, r28	; 61
    5f14:	7c 01       	movw	r14, r24
    5f16:	fa 01       	movw	r30, r20
    5f18:	cb 01       	movw	r24, r22
    5f1a:	19 a2       	std	Y+33, r1	; 0x21
    5f1c:	22 30       	cpi	r18, 0x02	; 2
    5f1e:	08 f4       	brcc	.+2      	; 0x5f22 <_ZN5Print11printNumberEmh+0x32>
    5f20:	2a e0       	ldi	r18, 0x0A	; 10
    5f22:	8e 01       	movw	r16, r28
    5f24:	0f 5d       	subi	r16, 0xDF	; 223
    5f26:	1f 4f       	sbci	r17, 0xFF	; 255
    5f28:	82 2e       	mov	r8, r18
    5f2a:	91 2c       	mov	r9, r1
    5f2c:	a1 2c       	mov	r10, r1
    5f2e:	b1 2c       	mov	r11, r1
    5f30:	bf 01       	movw	r22, r30
    5f32:	a5 01       	movw	r20, r10
    5f34:	94 01       	movw	r18, r8
    5f36:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__udivmodsi4>
    5f3a:	f9 01       	movw	r30, r18
    5f3c:	ca 01       	movw	r24, r20
    5f3e:	01 50       	subi	r16, 0x01	; 1
    5f40:	11 09       	sbc	r17, r1
    5f42:	6a 30       	cpi	r22, 0x0A	; 10
    5f44:	10 f4       	brcc	.+4      	; 0x5f4a <_ZN5Print11printNumberEmh+0x5a>
    5f46:	60 5d       	subi	r22, 0xD0	; 208
    5f48:	01 c0       	rjmp	.+2      	; 0x5f4c <_ZN5Print11printNumberEmh+0x5c>
    5f4a:	69 5c       	subi	r22, 0xC9	; 201
    5f4c:	d8 01       	movw	r26, r16
    5f4e:	6c 93       	st	X, r22
    5f50:	23 2b       	or	r18, r19
    5f52:	24 2b       	or	r18, r20
    5f54:	25 2b       	or	r18, r21
    5f56:	61 f7       	brne	.-40     	; 0x5f30 <_ZN5Print11printNumberEmh+0x40>
    5f58:	b8 01       	movw	r22, r16
    5f5a:	c7 01       	movw	r24, r14
    5f5c:	7b df       	rcall	.-266    	; 0x5e54 <_ZN5Print5writeEPKc>
    5f5e:	a1 96       	adiw	r28, 0x21	; 33
    5f60:	0f b6       	in	r0, 0x3f	; 63
    5f62:	f8 94       	cli
    5f64:	de bf       	out	0x3e, r29	; 62
    5f66:	0f be       	out	0x3f, r0	; 63
    5f68:	cd bf       	out	0x3d, r28	; 61
    5f6a:	df 91       	pop	r29
    5f6c:	cf 91       	pop	r28
    5f6e:	1f 91       	pop	r17
    5f70:	0f 91       	pop	r16
    5f72:	ff 90       	pop	r15
    5f74:	ef 90       	pop	r14
    5f76:	bf 90       	pop	r11
    5f78:	af 90       	pop	r10
    5f7a:	9f 90       	pop	r9
    5f7c:	8f 90       	pop	r8
    5f7e:	08 95       	ret

00005f80 <_ZN5Print5printEmi>:
    5f80:	21 15       	cp	r18, r1
    5f82:	31 05       	cpc	r19, r1
    5f84:	41 f4       	brne	.+16     	; 0x5f96 <_ZN5Print5printEmi+0x16>
    5f86:	dc 01       	movw	r26, r24
    5f88:	ed 91       	ld	r30, X+
    5f8a:	fc 91       	ld	r31, X
    5f8c:	01 90       	ld	r0, Z+
    5f8e:	f0 81       	ld	r31, Z
    5f90:	e0 2d       	mov	r30, r0
    5f92:	64 2f       	mov	r22, r20
    5f94:	19 94       	eijmp
    5f96:	ac cf       	rjmp	.-168    	; 0x5ef0 <_ZN5Print11printNumberEmh>

00005f98 <_ZN5Print5printEji>:
    5f98:	9a 01       	movw	r18, r20
    5f9a:	ab 01       	movw	r20, r22
    5f9c:	60 e0       	ldi	r22, 0x00	; 0
    5f9e:	70 e0       	ldi	r23, 0x00	; 0
    5fa0:	ef cf       	rjmp	.-34     	; 0x5f80 <_ZN5Print5printEmi>

00005fa2 <_ZN5Print5printEli>:
    5fa2:	cf 92       	push	r12
    5fa4:	df 92       	push	r13
    5fa6:	ef 92       	push	r14
    5fa8:	ff 92       	push	r15
    5faa:	0f 93       	push	r16
    5fac:	1f 93       	push	r17
    5fae:	cf 93       	push	r28
    5fb0:	df 93       	push	r29
    5fb2:	21 15       	cp	r18, r1
    5fb4:	31 05       	cpc	r19, r1
    5fb6:	81 f4       	brne	.+32     	; 0x5fd8 <_ZN5Print5printEli+0x36>
    5fb8:	dc 01       	movw	r26, r24
    5fba:	ed 91       	ld	r30, X+
    5fbc:	fc 91       	ld	r31, X
    5fbe:	01 90       	ld	r0, Z+
    5fc0:	f0 81       	ld	r31, Z
    5fc2:	e0 2d       	mov	r30, r0
    5fc4:	64 2f       	mov	r22, r20
    5fc6:	df 91       	pop	r29
    5fc8:	cf 91       	pop	r28
    5fca:	1f 91       	pop	r17
    5fcc:	0f 91       	pop	r16
    5fce:	ff 90       	pop	r15
    5fd0:	ef 90       	pop	r14
    5fd2:	df 90       	pop	r13
    5fd4:	cf 90       	pop	r12
    5fd6:	19 94       	eijmp
    5fd8:	2a 30       	cpi	r18, 0x0A	; 10
    5fda:	31 05       	cpc	r19, r1
    5fdc:	f1 f4       	brne	.+60     	; 0x601a <_ZN5Print5printEli+0x78>
    5fde:	77 ff       	sbrs	r23, 7
    5fe0:	1b c0       	rjmp	.+54     	; 0x6018 <_ZN5Print5printEli+0x76>
    5fe2:	6a 01       	movw	r12, r20
    5fe4:	7b 01       	movw	r14, r22
    5fe6:	ec 01       	movw	r28, r24
    5fe8:	6d e2       	ldi	r22, 0x2D	; 45
    5fea:	58 df       	rcall	.-336    	; 0x5e9c <_ZN5Print5printEc>
    5fec:	8c 01       	movw	r16, r24
    5fee:	44 27       	eor	r20, r20
    5ff0:	55 27       	eor	r21, r21
    5ff2:	ba 01       	movw	r22, r20
    5ff4:	4c 19       	sub	r20, r12
    5ff6:	5d 09       	sbc	r21, r13
    5ff8:	6e 09       	sbc	r22, r14
    5ffa:	7f 09       	sbc	r23, r15
    5ffc:	2a e0       	ldi	r18, 0x0A	; 10
    5ffe:	ce 01       	movw	r24, r28
    6000:	77 df       	rcall	.-274    	; 0x5ef0 <_ZN5Print11printNumberEmh>
    6002:	80 0f       	add	r24, r16
    6004:	91 1f       	adc	r25, r17
    6006:	df 91       	pop	r29
    6008:	cf 91       	pop	r28
    600a:	1f 91       	pop	r17
    600c:	0f 91       	pop	r16
    600e:	ff 90       	pop	r15
    6010:	ef 90       	pop	r14
    6012:	df 90       	pop	r13
    6014:	cf 90       	pop	r12
    6016:	08 95       	ret
    6018:	2a e0       	ldi	r18, 0x0A	; 10
    601a:	df 91       	pop	r29
    601c:	cf 91       	pop	r28
    601e:	1f 91       	pop	r17
    6020:	0f 91       	pop	r16
    6022:	ff 90       	pop	r15
    6024:	ef 90       	pop	r14
    6026:	df 90       	pop	r13
    6028:	cf 90       	pop	r12
    602a:	62 cf       	rjmp	.-316    	; 0x5ef0 <_ZN5Print11printNumberEmh>

0000602c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    602c:	7f 92       	push	r7
    602e:	8f 92       	push	r8
    6030:	9f 92       	push	r9
    6032:	af 92       	push	r10
    6034:	bf 92       	push	r11
    6036:	cf 92       	push	r12
    6038:	df 92       	push	r13
    603a:	ef 92       	push	r14
    603c:	ff 92       	push	r15
    603e:	0f 93       	push	r16
    6040:	1f 93       	push	r17
    6042:	cf 93       	push	r28
    6044:	df 93       	push	r29
    6046:	8c 01       	movw	r16, r24
    6048:	6a 01       	movw	r12, r20
    604a:	7b 01       	movw	r14, r22
    604c:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    604e:	9a 01       	movw	r18, r20
    6050:	ab 01       	movw	r20, r22
    6052:	c7 01       	movw	r24, r14
    6054:	b6 01       	movw	r22, r12
    6056:	0e 94 b8 3a 	call	0x7570	; 0x7570 <__unordsf2>
    605a:	88 23       	and	r24, r24
    605c:	19 f0       	breq	.+6      	; 0x6064 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    605e:	6f e5       	ldi	r22, 0x5F	; 95
    6060:	73 e0       	ldi	r23, 0x03	; 3
    6062:	25 c0       	rjmp	.+74     	; 0x60ae <_ZN5Print10printFloatEdh+0x82>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    6064:	46 01       	movw	r8, r12
    6066:	57 01       	movw	r10, r14
    6068:	e8 94       	clt
    606a:	b7 f8       	bld	r11, 7
    606c:	2f ef       	ldi	r18, 0xFF	; 255
    606e:	3f ef       	ldi	r19, 0xFF	; 255
    6070:	4f e7       	ldi	r20, 0x7F	; 127
    6072:	5f e7       	ldi	r21, 0x7F	; 127
    6074:	c5 01       	movw	r24, r10
    6076:	b4 01       	movw	r22, r8
    6078:	0e 94 b8 3a 	call	0x7570	; 0x7570 <__unordsf2>
    607c:	81 11       	cpse	r24, r1
    607e:	0c c0       	rjmp	.+24     	; 0x6098 <_ZN5Print10printFloatEdh+0x6c>
    6080:	2f ef       	ldi	r18, 0xFF	; 255
    6082:	3f ef       	ldi	r19, 0xFF	; 255
    6084:	4f e7       	ldi	r20, 0x7F	; 127
    6086:	5f e7       	ldi	r21, 0x7F	; 127
    6088:	c5 01       	movw	r24, r10
    608a:	b4 01       	movw	r22, r8
    608c:	59 db       	rcall	.-2382   	; 0x5740 <__cmpsf2>
    608e:	18 16       	cp	r1, r24
    6090:	1c f4       	brge	.+6      	; 0x6098 <_ZN5Print10printFloatEdh+0x6c>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    6092:	63 e6       	ldi	r22, 0x63	; 99
    6094:	73 e0       	ldi	r23, 0x03	; 3
    6096:	0b c0       	rjmp	.+22     	; 0x60ae <_ZN5Print10printFloatEdh+0x82>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    6098:	2f ef       	ldi	r18, 0xFF	; 255
    609a:	3f ef       	ldi	r19, 0xFF	; 255
    609c:	4f e7       	ldi	r20, 0x7F	; 127
    609e:	5f e4       	ldi	r21, 0x4F	; 79
    60a0:	c7 01       	movw	r24, r14
    60a2:	b6 01       	movw	r22, r12
    60a4:	34 dc       	rcall	.-1944   	; 0x590e <__gesf2>
    60a6:	18 16       	cp	r1, r24
    60a8:	8c f4       	brge	.+34     	; 0x60cc <_ZN5Print10printFloatEdh+0xa0>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    60aa:	67 e6       	ldi	r22, 0x67	; 103
    60ac:	73 e0       	ldi	r23, 0x03	; 3
    60ae:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    60b0:	df 91       	pop	r29
    60b2:	cf 91       	pop	r28
    60b4:	1f 91       	pop	r17
    60b6:	0f 91       	pop	r16
    60b8:	ff 90       	pop	r15
    60ba:	ef 90       	pop	r14
    60bc:	df 90       	pop	r13
    60be:	cf 90       	pop	r12
    60c0:	bf 90       	pop	r11
    60c2:	af 90       	pop	r10
    60c4:	9f 90       	pop	r9
    60c6:	8f 90       	pop	r8
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    60c8:	7f 90       	pop	r7
    60ca:	c4 ce       	rjmp	.-632    	; 0x5e54 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    60cc:	2f ef       	ldi	r18, 0xFF	; 255
    60ce:	3f ef       	ldi	r19, 0xFF	; 255
    60d0:	4f e7       	ldi	r20, 0x7F	; 127
    60d2:	5f ec       	ldi	r21, 0xCF	; 207
    60d4:	c7 01       	movw	r24, r14
    60d6:	b6 01       	movw	r22, r12
    60d8:	33 db       	rcall	.-2458   	; 0x5740 <__cmpsf2>
    60da:	87 fd       	sbrc	r24, 7
    60dc:	e6 cf       	rjmp	.-52     	; 0x60aa <_ZN5Print10printFloatEdh+0x7e>
  
  // Handle negative numbers
  if (number < 0.0)
    60de:	20 e0       	ldi	r18, 0x00	; 0
    60e0:	30 e0       	ldi	r19, 0x00	; 0
    60e2:	a9 01       	movw	r20, r18
    60e4:	c7 01       	movw	r24, r14
    60e6:	b6 01       	movw	r22, r12
    60e8:	2b db       	rcall	.-2474   	; 0x5740 <__cmpsf2>
    60ea:	87 ff       	sbrs	r24, 7
  {
     n += print('-');
    60ec:	09 c0       	rjmp	.+18     	; 0x6100 <_ZN5Print10printFloatEdh+0xd4>
    60ee:	6d e2       	ldi	r22, 0x2D	; 45
    60f0:	c8 01       	movw	r24, r16
    60f2:	d4 de       	rcall	.-600    	; 0x5e9c <_ZN5Print5printEc>
    60f4:	ec 01       	movw	r28, r24
     number = -number;
    60f6:	f7 fa       	bst	r15, 7
    60f8:	f0 94       	com	r15
    60fa:	f7 f8       	bld	r15, 7
    60fc:	f0 94       	com	r15
    60fe:	02 c0       	rjmp	.+4      	; 0x6104 <_ZN5Print10printFloatEdh+0xd8>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    6100:	c0 e0       	ldi	r28, 0x00	; 0
    6102:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    6104:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    6106:	60 e0       	ldi	r22, 0x00	; 0
    6108:	70 e0       	ldi	r23, 0x00	; 0
    610a:	80 e0       	ldi	r24, 0x00	; 0
    610c:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    610e:	7b 14       	cp	r7, r11
    6110:	41 f0       	breq	.+16     	; 0x6122 <_ZN5Print10printFloatEdh+0xf6>
    rounding /= 10.0;
    6112:	20 e0       	ldi	r18, 0x00	; 0
    6114:	30 e0       	ldi	r19, 0x00	; 0
    6116:	40 e2       	ldi	r20, 0x20	; 32
    6118:	51 e4       	ldi	r21, 0x41	; 65
    611a:	0e 94 47 3a 	call	0x748e	; 0x748e <__divsf3>
  
  number += rounding;
    611e:	b3 94       	inc	r11
    6120:	f6 cf       	rjmp	.-20     	; 0x610e <_ZN5Print10printFloatEdh+0xe2>
    6122:	a7 01       	movw	r20, r14
    6124:	96 01       	movw	r18, r12
    6126:	a8 da       	rcall	.-2736   	; 0x5678 <__addsf3>
    6128:	6b 01       	movw	r12, r22

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    612a:	7c 01       	movw	r14, r24
    612c:	12 db       	rcall	.-2524   	; 0x5752 <__fixunssfsi>
    612e:	4b 01       	movw	r8, r22
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    6130:	5c 01       	movw	r10, r24
    6132:	2a e0       	ldi	r18, 0x0A	; 10
    6134:	ab 01       	movw	r20, r22
    6136:	bc 01       	movw	r22, r24
    6138:	c8 01       	movw	r24, r16
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    613a:	da de       	rcall	.-588    	; 0x5ef0 <_ZN5Print11printNumberEmh>
    613c:	c8 0f       	add	r28, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    613e:	d9 1f       	adc	r29, r25
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    6140:	77 20       	and	r7, r7
    6142:	79 f1       	breq	.+94     	; 0x61a2 <_ZN5Print10printFloatEdh+0x176>
    6144:	c5 01       	movw	r24, r10
    6146:	b4 01       	movw	r22, r8
    6148:	30 db       	rcall	.-2464   	; 0x57aa <__floatunsisf>
    614a:	9b 01       	movw	r18, r22
    614c:	ac 01       	movw	r20, r24
    614e:	c7 01       	movw	r24, r14
    6150:	b6 01       	movw	r22, r12
    6152:	91 da       	rcall	.-2782   	; 0x5676 <__subsf3>
    6154:	6b 01       	movw	r12, r22
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    6156:	7c 01       	movw	r14, r24
    6158:	6e e2       	ldi	r22, 0x2E	; 46
    615a:	c8 01       	movw	r24, r16
    615c:	9f de       	rcall	.-706    	; 0x5e9c <_ZN5Print5printEc>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    615e:	c8 0f       	add	r28, r24
    6160:	d9 1f       	adc	r29, r25
    6162:	20 e0       	ldi	r18, 0x00	; 0
    6164:	30 e0       	ldi	r19, 0x00	; 0
    6166:	40 e2       	ldi	r20, 0x20	; 32
    6168:	51 e4       	ldi	r21, 0x41	; 65
    616a:	c7 01       	movw	r24, r14
    616c:	b6 01       	movw	r22, r12
    616e:	d3 db       	rcall	.-2138   	; 0x5916 <__mulsf3>
    unsigned int toPrint = (unsigned int)(remainder);
    6170:	4b 01       	movw	r8, r22
    6172:	5c 01       	movw	r10, r24
    6174:	ee da       	rcall	.-2596   	; 0x5752 <__fixunssfsi>
    6176:	6b 01       	movw	r12, r22
    n += print(toPrint);
    6178:	7c 01       	movw	r14, r24
    617a:	4a e0       	ldi	r20, 0x0A	; 10
    617c:	50 e0       	ldi	r21, 0x00	; 0
    617e:	c8 01       	movw	r24, r16
    6180:	0b df       	rcall	.-490    	; 0x5f98 <_ZN5Print5printEji>
    6182:	c8 0f       	add	r28, r24
    remainder -= toPrint; 
    6184:	d9 1f       	adc	r29, r25
    6186:	b6 01       	movw	r22, r12
    6188:	80 e0       	ldi	r24, 0x00	; 0
    618a:	90 e0       	ldi	r25, 0x00	; 0
    618c:	0e db       	rcall	.-2532   	; 0x57aa <__floatunsisf>
    618e:	9b 01       	movw	r18, r22
    6190:	ac 01       	movw	r20, r24
    6192:	c5 01       	movw	r24, r10
    6194:	b4 01       	movw	r22, r8
    6196:	6f da       	rcall	.-2850   	; 0x5676 <__subsf3>
    6198:	6b 01       	movw	r12, r22
    619a:	7c 01       	movw	r14, r24
    619c:	7a 94       	dec	r7
    619e:	71 10       	cpse	r7, r1
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    61a0:	e0 cf       	rjmp	.-64     	; 0x6162 <_ZN5Print10printFloatEdh+0x136>
    61a2:	ce 01       	movw	r24, r28
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    61a4:	df 91       	pop	r29
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    61a6:	cf 91       	pop	r28
    61a8:	1f 91       	pop	r17
    61aa:	0f 91       	pop	r16
    61ac:	ff 90       	pop	r15
    61ae:	ef 90       	pop	r14
    61b0:	df 90       	pop	r13
    61b2:	cf 90       	pop	r12
    61b4:	bf 90       	pop	r11
    61b6:	af 90       	pop	r10
    61b8:	9f 90       	pop	r9
    61ba:	8f 90       	pop	r8
    61bc:	7f 90       	pop	r7
    61be:	08 95       	ret

000061c0 <_ZN5Print5printEdi>:
    61c0:	35 cf       	rjmp	.-406    	; 0x602c <_ZN5Print10printFloatEdh>

000061c2 <_Z4tonehjm>:


// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
    61c2:	4f 92       	push	r4
    61c4:	5f 92       	push	r5
    61c6:	6f 92       	push	r6
    61c8:	7f 92       	push	r7
    61ca:	8f 92       	push	r8
    61cc:	9f 92       	push	r9
    61ce:	af 92       	push	r10
    61d0:	bf 92       	push	r11
    61d2:	cf 92       	push	r12
    61d4:	df 92       	push	r13
    61d6:	ef 92       	push	r14
    61d8:	ff 92       	push	r15
    61da:	0f 93       	push	r16
    61dc:	1f 93       	push	r17
    61de:	cf 93       	push	r28
    61e0:	df 93       	push	r29
    61e2:	00 d0       	rcall	.+0      	; 0x61e4 <_Z4tonehjm+0x22>
    61e4:	1f 92       	push	r1
    61e6:	1f 92       	push	r1
    61e8:	cd b7       	in	r28, 0x3d	; 61
    61ea:	de b7       	in	r29, 0x3e	; 62
    61ec:	8b 01       	movw	r16, r22
    61ee:	29 01       	movw	r4, r18
    61f0:	3a 01       	movw	r6, r20
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    61f2:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <_ZL9tone_pins>
    61f6:	89 17       	cp	r24, r25
    61f8:	21 f0       	breq	.+8      	; 0x6202 <_Z4tonehjm+0x40>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
    61fa:	9f 3f       	cpi	r25, 0xFF	; 255
    61fc:	09 f0       	breq	.+2      	; 0x6200 <_Z4tonehjm+0x3e>
    61fe:	3d c3       	rjmp	.+1658   	; 0x687a <_Z4tonehjm+0x6b8>
    6200:	05 c0       	rjmp	.+10     	; 0x620c <_Z4tonehjm+0x4a>
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    6202:	ee e2       	ldi	r30, 0x2E	; 46
    6204:	fb e0       	ldi	r31, 0x0B	; 11
    6206:	24 91       	lpm	r18, Z
    6208:	2d 83       	std	Y+5, r18	; 0x05
    620a:	03 c1       	rjmp	.+518    	; 0x6412 <_Z4tonehjm+0x250>
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
      tone_pins[i] = _pin;
    620c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <_ZL9tone_pins>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    6210:	ee e2       	ldi	r30, 0x2E	; 46
    6212:	fb e0       	ldi	r31, 0x0B	; 11
    6214:	94 91       	lpm	r25, Z
    6216:	9d 83       	std	Y+5, r25	; 0x05
      break;
    }
  }
  
  if (_timer != -1)
    6218:	9f 3f       	cpi	r25, 0xFF	; 255
    621a:	09 f4       	brne	.+2      	; 0x621e <_Z4tonehjm+0x5c>
    621c:	2e c3       	rjmp	.+1628   	; 0x687a <_Z4tonehjm+0x6b8>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    621e:	92 30       	cpi	r25, 0x02	; 2
    6220:	09 f4       	brne	.+2      	; 0x6224 <_Z4tonehjm+0x62>
    6222:	7f c0       	rjmp	.+254    	; 0x6322 <_Z4tonehjm+0x160>
    6224:	68 f5       	brcc	.+90     	; 0x6280 <_Z4tonehjm+0xbe>
    6226:	99 23       	and	r25, r25
    6228:	09 f4       	brne	.+2      	; 0x622c <_Z4tonehjm+0x6a>
    622a:	5a c0       	rjmp	.+180    	; 0x62e0 <_Z4tonehjm+0x11e>
    622c:	91 30       	cpi	r25, 0x01	; 1
    622e:	09 f0       	breq	.+2      	; 0x6232 <_Z4tonehjm+0x70>
    6230:	f0 c0       	rjmp	.+480    	; 0x6412 <_Z4tonehjm+0x250>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
    6232:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
        TCCR1B = 0;
    6236:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
        bitWrite(TCCR1B, WGM12, 1);
    623a:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
    623e:	98 60       	ori	r25, 0x08	; 8
    6240:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
        bitWrite(TCCR1B, CS10, 1);
    6244:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
    6248:	91 60       	ori	r25, 0x01	; 1
    624a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
    624e:	28 2f       	mov	r18, r24
    6250:	30 e0       	ldi	r19, 0x00	; 0
    6252:	f9 01       	movw	r30, r18
    6254:	e5 54       	subi	r30, 0x45	; 69
    6256:	f4 4f       	sbci	r31, 0xF4	; 244
    6258:	e4 91       	lpm	r30, Z
    625a:	f0 e0       	ldi	r31, 0x00	; 0
    625c:	ee 0f       	add	r30, r30
    625e:	ff 1f       	adc	r31, r31
    6260:	e5 5e       	subi	r30, 0xE5	; 229
    6262:	f3 4f       	sbci	r31, 0xF3	; 243
    6264:	45 91       	lpm	r20, Z+
    6266:	54 91       	lpm	r21, Z
    6268:	50 93 8a 06 	sts	0x068A, r21	; 0x80068a <timer1_pin_port+0x1>
    626c:	40 93 89 06 	sts	0x0689, r20	; 0x800689 <timer1_pin_port>
        timer1_pin_mask = digitalPinToBitMask(_pin);
    6270:	f9 01       	movw	r30, r18
    6272:	eb 58       	subi	r30, 0x8B	; 139
    6274:	f4 4f       	sbci	r31, 0xF4	; 244
    6276:	e4 91       	lpm	r30, Z
    6278:	e0 93 88 06 	sts	0x0688, r30	; 0x800688 <timer1_pin_mask>
    627c:	91 e0       	ldi	r25, 0x01	; 1
    627e:	9f c0       	rjmp	.+318    	; 0x63be <_Z4tonehjm+0x1fc>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    6280:	2d 81       	ldd	r18, Y+5	; 0x05
    6282:	24 30       	cpi	r18, 0x04	; 4
    6284:	09 f4       	brne	.+2      	; 0x6288 <_Z4tonehjm+0xc6>
    6286:	9d c0       	rjmp	.+314    	; 0x63c2 <_Z4tonehjm+0x200>
    6288:	08 f4       	brcc	.+2      	; 0x628c <_Z4tonehjm+0xca>
    628a:	73 c0       	rjmp	.+230    	; 0x6372 <_Z4tonehjm+0x1b0>
    628c:	25 30       	cpi	r18, 0x05	; 5
    628e:	09 f0       	breq	.+2      	; 0x6292 <_Z4tonehjm+0xd0>
    6290:	c0 c0       	rjmp	.+384    	; 0x6412 <_Z4tonehjm+0x250>
      #endif

      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)
      case 5:
        // 16 bit timer
        TCCR5A = 0;
    6292:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
        TCCR5B = 0;
    6296:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__TEXT_REGION_LENGTH__+0x7c0121>
        bitWrite(TCCR5B, WGM52, 1);
    629a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x7c0121>
    629e:	98 60       	ori	r25, 0x08	; 8
    62a0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__TEXT_REGION_LENGTH__+0x7c0121>
        bitWrite(TCCR5B, CS50, 1);
    62a4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x7c0121>
    62a8:	91 60       	ori	r25, 0x01	; 1
    62aa:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__TEXT_REGION_LENGTH__+0x7c0121>
        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));
    62ae:	28 2f       	mov	r18, r24
    62b0:	30 e0       	ldi	r19, 0x00	; 0
    62b2:	f9 01       	movw	r30, r18
    62b4:	e5 54       	subi	r30, 0x45	; 69
    62b6:	f4 4f       	sbci	r31, 0xF4	; 244
    62b8:	e4 91       	lpm	r30, Z
    62ba:	f0 e0       	ldi	r31, 0x00	; 0
    62bc:	ee 0f       	add	r30, r30
    62be:	ff 1f       	adc	r31, r31
    62c0:	e5 5e       	subi	r30, 0xE5	; 229
    62c2:	f3 4f       	sbci	r31, 0xF3	; 243
    62c4:	45 91       	lpm	r20, Z+
    62c6:	54 91       	lpm	r21, Z
    62c8:	50 93 6e 06 	sts	0x066E, r21	; 0x80066e <timer5_pin_port+0x1>
    62cc:	40 93 6d 06 	sts	0x066D, r20	; 0x80066d <timer5_pin_port>
        timer5_pin_mask = digitalPinToBitMask(_pin);
    62d0:	f9 01       	movw	r30, r18
    62d2:	eb 58       	subi	r30, 0x8B	; 139
    62d4:	f4 4f       	sbci	r31, 0xF4	; 244
    62d6:	e4 91       	lpm	r30, Z
    62d8:	e0 93 6c 06 	sts	0x066C, r30	; 0x80066c <timer5_pin_mask>
    62dc:	95 e0       	ldi	r25, 0x05	; 5
    62de:	6f c0       	rjmp	.+222    	; 0x63be <_Z4tonehjm+0x1fc>
    switch (_timer)
    {
      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
    62e0:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;
    62e2:	15 bc       	out	0x25, r1	; 37
        bitWrite(TCCR0A, WGM01, 1);
    62e4:	94 b5       	in	r25, 0x24	; 36
    62e6:	92 60       	ori	r25, 0x02	; 2
    62e8:	94 bd       	out	0x24, r25	; 36
        bitWrite(TCCR0B, CS00, 1);
    62ea:	95 b5       	in	r25, 0x25	; 37
    62ec:	91 60       	ori	r25, 0x01	; 1
    62ee:	95 bd       	out	0x25, r25	; 37
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
    62f0:	28 2f       	mov	r18, r24
    62f2:	30 e0       	ldi	r19, 0x00	; 0
    62f4:	f9 01       	movw	r30, r18
    62f6:	e5 54       	subi	r30, 0x45	; 69
    62f8:	f4 4f       	sbci	r31, 0xF4	; 244
    62fa:	e4 91       	lpm	r30, Z
    62fc:	f0 e0       	ldi	r31, 0x00	; 0
    62fe:	ee 0f       	add	r30, r30
    6300:	ff 1f       	adc	r31, r31
    6302:	e5 5e       	subi	r30, 0xE5	; 229
    6304:	f3 4f       	sbci	r31, 0xF3	; 243
    6306:	45 91       	lpm	r20, Z+
    6308:	54 91       	lpm	r21, Z
    630a:	50 93 91 06 	sts	0x0691, r21	; 0x800691 <timer0_pin_port+0x1>
    630e:	40 93 90 06 	sts	0x0690, r20	; 0x800690 <timer0_pin_port>
        timer0_pin_mask = digitalPinToBitMask(_pin);
    6312:	f9 01       	movw	r30, r18
    6314:	eb 58       	subi	r30, 0x8B	; 139
    6316:	f4 4f       	sbci	r31, 0xF4	; 244
    6318:	e4 91       	lpm	r30, Z
    631a:	e0 93 8f 06 	sts	0x068F, r30	; 0x80068f <timer0_pin_mask>
    631e:	1d 82       	std	Y+5, r1	; 0x05
    6320:	a9 c2       	rjmp	.+1362   	; 0x6874 <_Z4tonehjm+0x6b2>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
    6322:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
        TCCR2B = 0;
    6326:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
        bitWrite(TCCR2A, WGM21, 1);
    632a:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    632e:	92 60       	ori	r25, 0x02	; 2
    6330:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
        bitWrite(TCCR2B, CS20, 1);
    6334:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    6338:	91 60       	ori	r25, 0x01	; 1
    633a:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
    633e:	28 2f       	mov	r18, r24
    6340:	30 e0       	ldi	r19, 0x00	; 0
    6342:	f9 01       	movw	r30, r18
    6344:	e5 54       	subi	r30, 0x45	; 69
    6346:	f4 4f       	sbci	r31, 0xF4	; 244
    6348:	e4 91       	lpm	r30, Z
    634a:	f0 e0       	ldi	r31, 0x00	; 0
    634c:	ee 0f       	add	r30, r30
    634e:	ff 1f       	adc	r31, r31
    6350:	e5 5e       	subi	r30, 0xE5	; 229
    6352:	f3 4f       	sbci	r31, 0xF3	; 243
    6354:	45 91       	lpm	r20, Z+
    6356:	54 91       	lpm	r21, Z
    6358:	50 93 83 06 	sts	0x0683, r21	; 0x800683 <timer2_pin_port+0x1>
    635c:	40 93 82 06 	sts	0x0682, r20	; 0x800682 <timer2_pin_port>
        timer2_pin_mask = digitalPinToBitMask(_pin);
    6360:	f9 01       	movw	r30, r18
    6362:	eb 58       	subi	r30, 0x8B	; 139
    6364:	f4 4f       	sbci	r31, 0xF4	; 244
    6366:	e4 91       	lpm	r30, Z
    6368:	e0 93 81 06 	sts	0x0681, r30	; 0x800681 <timer2_pin_mask>
    636c:	22 e0       	ldi	r18, 0x02	; 2
    636e:	2d 83       	std	Y+5, r18	; 0x05
    6370:	81 c2       	rjmp	.+1282   	; 0x6874 <_Z4tonehjm+0x6b2>
      #endif

      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)
      case 3:
        // 16 bit timer
        TCCR3A = 0;
    6372:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
        TCCR3B = 0;
    6376:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
        bitWrite(TCCR3B, WGM32, 1);
    637a:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
    637e:	98 60       	ori	r25, 0x08	; 8
    6380:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
        bitWrite(TCCR3B, CS30, 1);
    6384:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
    6388:	91 60       	ori	r25, 0x01	; 1
    638a:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));
    638e:	28 2f       	mov	r18, r24
    6390:	30 e0       	ldi	r19, 0x00	; 0
    6392:	f9 01       	movw	r30, r18
    6394:	e5 54       	subi	r30, 0x45	; 69
    6396:	f4 4f       	sbci	r31, 0xF4	; 244
    6398:	e4 91       	lpm	r30, Z
    639a:	f0 e0       	ldi	r31, 0x00	; 0
    639c:	ee 0f       	add	r30, r30
    639e:	ff 1f       	adc	r31, r31
    63a0:	e5 5e       	subi	r30, 0xE5	; 229
    63a2:	f3 4f       	sbci	r31, 0xF3	; 243
    63a4:	45 91       	lpm	r20, Z+
    63a6:	54 91       	lpm	r21, Z
    63a8:	50 93 7c 06 	sts	0x067C, r21	; 0x80067c <timer3_pin_port+0x1>
    63ac:	40 93 7b 06 	sts	0x067B, r20	; 0x80067b <timer3_pin_port>
        timer3_pin_mask = digitalPinToBitMask(_pin);
    63b0:	f9 01       	movw	r30, r18
    63b2:	eb 58       	subi	r30, 0x8B	; 139
    63b4:	f4 4f       	sbci	r31, 0xF4	; 244
    63b6:	e4 91       	lpm	r30, Z
    63b8:	e0 93 7a 06 	sts	0x067A, r30	; 0x80067a <timer3_pin_mask>
    63bc:	93 e0       	ldi	r25, 0x03	; 3
    63be:	9d 83       	std	Y+5, r25	; 0x05
    63c0:	b0 c0       	rjmp	.+352    	; 0x6522 <_Z4tonehjm+0x360>
      #endif

      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)
      case 4:
        // 16 bit timer
        TCCR4A = 0;
    63c2:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
        TCCR4B = 0;
    63c6:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
        #if defined(WGM42)
          bitWrite(TCCR4B, WGM42, 1);
    63ca:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
    63ce:	98 60       	ori	r25, 0x08	; 8
    63d0:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
        #elif defined(CS43)
          // TODO this may not be correct
          // atmega32u4
          bitWrite(TCCR4B, CS43, 1);
        #endif
        bitWrite(TCCR4B, CS40, 1);
    63d4:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
    63d8:	91 60       	ori	r25, 0x01	; 1
    63da:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));
    63de:	28 2f       	mov	r18, r24
    63e0:	30 e0       	ldi	r19, 0x00	; 0
    63e2:	f9 01       	movw	r30, r18
    63e4:	e5 54       	subi	r30, 0x45	; 69
    63e6:	f4 4f       	sbci	r31, 0xF4	; 244
    63e8:	e4 91       	lpm	r30, Z
    63ea:	f0 e0       	ldi	r31, 0x00	; 0
    63ec:	ee 0f       	add	r30, r30
    63ee:	ff 1f       	adc	r31, r31
    63f0:	e5 5e       	subi	r30, 0xE5	; 229
    63f2:	f3 4f       	sbci	r31, 0xF3	; 243
    63f4:	45 91       	lpm	r20, Z+
    63f6:	54 91       	lpm	r21, Z
    63f8:	50 93 75 06 	sts	0x0675, r21	; 0x800675 <timer4_pin_port+0x1>
    63fc:	40 93 74 06 	sts	0x0674, r20	; 0x800674 <timer4_pin_port>
        timer4_pin_mask = digitalPinToBitMask(_pin);
    6400:	f9 01       	movw	r30, r18
    6402:	eb 58       	subi	r30, 0x8B	; 139
    6404:	f4 4f       	sbci	r31, 0xF4	; 244
    6406:	e4 91       	lpm	r30, Z
    6408:	e0 93 73 06 	sts	0x0673, r30	; 0x800673 <timer4_pin_mask>
    640c:	24 e0       	ldi	r18, 0x04	; 4
    640e:	2d 83       	std	Y+5, r18	; 0x05
    6410:	88 c0       	rjmp	.+272    	; 0x6522 <_Z4tonehjm+0x360>
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    6412:	2d 81       	ldd	r18, Y+5	; 0x05
    6414:	27 fd       	sbrc	r18, 7
    6416:	31 c2       	rjmp	.+1122   	; 0x687a <_Z4tonehjm+0x6b8>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    6418:	61 e0       	ldi	r22, 0x01	; 1
    641a:	2d d5       	rcall	.+2650   	; 0x6e76 <pinMode>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    641c:	8d 81       	ldd	r24, Y+5	; 0x05
    641e:	8d 7f       	andi	r24, 0xFD	; 253
    6420:	09 f0       	breq	.+2      	; 0x6424 <_Z4tonehjm+0x262>
    6422:	81 c0       	rjmp	.+258    	; 0x6526 <_Z4tonehjm+0x364>
    {
      ocr = F_CPU / frequency / 2 - 1;
    6424:	48 01       	movw	r8, r16
    6426:	a1 2c       	mov	r10, r1
    6428:	b1 2c       	mov	r11, r1
    642a:	60 e0       	ldi	r22, 0x00	; 0
    642c:	72 e1       	ldi	r23, 0x12	; 18
    642e:	8a e7       	ldi	r24, 0x7A	; 122
    6430:	90 e0       	ldi	r25, 0x00	; 0
    6432:	a5 01       	movw	r20, r10
    6434:	94 01       	movw	r18, r8
    6436:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <__divmodsi4>
    643a:	29 83       	std	Y+1, r18	; 0x01
    643c:	3a 83       	std	Y+2, r19	; 0x02
    643e:	4b 83       	std	Y+3, r20	; 0x03
    6440:	5c 83       	std	Y+4, r21	; 0x04
    6442:	69 01       	movw	r12, r18
    6444:	7a 01       	movw	r14, r20
    6446:	81 e0       	ldi	r24, 0x01	; 1
    6448:	c8 1a       	sub	r12, r24
    644a:	d1 08       	sbc	r13, r1
    644c:	e1 08       	sbc	r14, r1
    644e:	f1 08       	sbc	r15, r1
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
    6450:	9f ef       	ldi	r25, 0xFF	; 255
    6452:	c9 16       	cp	r12, r25
    6454:	d1 04       	cpc	r13, r1
    6456:	e1 04       	cpc	r14, r1
    6458:	f1 04       	cpc	r15, r1
    645a:	09 f0       	breq	.+2      	; 0x645e <_Z4tonehjm+0x29c>
    645c:	08 f4       	brcc	.+2      	; 0x6460 <_Z4tonehjm+0x29e>
    645e:	4e c0       	rjmp	.+156    	; 0x64fc <_Z4tonehjm+0x33a>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
    6460:	60 e4       	ldi	r22, 0x40	; 64
    6462:	72 e4       	ldi	r23, 0x42	; 66
    6464:	8f e0       	ldi	r24, 0x0F	; 15
    6466:	90 e0       	ldi	r25, 0x00	; 0
    6468:	a5 01       	movw	r20, r10
    646a:	94 01       	movw	r18, r8
    646c:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <__divmodsi4>
    6470:	69 01       	movw	r12, r18
    6472:	7a 01       	movw	r14, r20
    6474:	81 e0       	ldi	r24, 0x01	; 1
    6476:	c8 1a       	sub	r12, r24
    6478:	d1 08       	sbc	r13, r1
    647a:	e1 08       	sbc	r14, r1
    647c:	f1 08       	sbc	r15, r1
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
    647e:	9d 81       	ldd	r25, Y+5	; 0x05
    6480:	92 30       	cpi	r25, 0x02	; 2
    6482:	09 f5       	brne	.+66     	; 0x64c6 <_Z4tonehjm+0x304>
    6484:	2f ef       	ldi	r18, 0xFF	; 255
    6486:	c2 16       	cp	r12, r18
    6488:	d1 04       	cpc	r13, r1
    648a:	e1 04       	cpc	r14, r1
    648c:	f1 04       	cpc	r15, r1
    648e:	09 f0       	breq	.+2      	; 0x6492 <_Z4tonehjm+0x2d0>
    6490:	08 f4       	brcc	.+2      	; 0x6494 <_Z4tonehjm+0x2d2>
    6492:	b8 c1       	rjmp	.+880    	; 0x6804 <_Z4tonehjm+0x642>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
    6494:	60 e9       	ldi	r22, 0x90	; 144
    6496:	70 ed       	ldi	r23, 0xD0	; 208
    6498:	83 e0       	ldi	r24, 0x03	; 3
    649a:	90 e0       	ldi	r25, 0x00	; 0
    649c:	a5 01       	movw	r20, r10
    649e:	94 01       	movw	r18, r8
    64a0:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <__divmodsi4>
    64a4:	69 01       	movw	r12, r18
    64a6:	7a 01       	movw	r14, r20
    64a8:	81 e0       	ldi	r24, 0x01	; 1
    64aa:	c8 1a       	sub	r12, r24
    64ac:	d1 08       	sbc	r13, r1
    64ae:	e1 08       	sbc	r14, r1
    64b0:	f1 08       	sbc	r15, r1
          prescalarbits = 0b011;
        }

        if (ocr > 255)
    64b2:	9f ef       	ldi	r25, 0xFF	; 255
    64b4:	c9 16       	cp	r12, r25
    64b6:	d1 04       	cpc	r13, r1
    64b8:	e1 04       	cpc	r14, r1
    64ba:	f1 04       	cpc	r15, r1
    64bc:	11 f0       	breq	.+4      	; 0x64c2 <_Z4tonehjm+0x300>
    64be:	08 f0       	brcs	.+2      	; 0x64c2 <_Z4tonehjm+0x300>
    64c0:	33 c1       	rjmp	.+614    	; 0x6728 <_Z4tonehjm+0x566>
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
          prescalarbits = 0b011;
    64c2:	83 e0       	ldi	r24, 0x03	; 3
    64c4:	27 c0       	rjmp	.+78     	; 0x6514 <_Z4tonehjm+0x352>
        }

        if (ocr > 255)
    64c6:	2f ef       	ldi	r18, 0xFF	; 255
    64c8:	c2 16       	cp	r12, r18
    64ca:	d1 04       	cpc	r13, r1
    64cc:	e1 04       	cpc	r14, r1
    64ce:	f1 04       	cpc	r15, r1
    64d0:	b9 f0       	breq	.+46     	; 0x6500 <_Z4tonehjm+0x33e>
    64d2:	b0 f0       	brcs	.+44     	; 0x6500 <_Z4tonehjm+0x33e>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    64d4:	68 e4       	ldi	r22, 0x48	; 72
    64d6:	78 ee       	ldi	r23, 0xE8	; 232
    64d8:	81 e0       	ldi	r24, 0x01	; 1
    64da:	90 e0       	ldi	r25, 0x00	; 0
    64dc:	a5 01       	movw	r20, r10
    64de:	94 01       	movw	r18, r8
    64e0:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <__divmodsi4>
    64e4:	69 01       	movw	r12, r18
    64e6:	7a 01       	movw	r14, r20
    64e8:	81 e0       	ldi	r24, 0x01	; 1
    64ea:	c8 1a       	sub	r12, r24
    64ec:	d1 08       	sbc	r13, r1
    64ee:	e1 08       	sbc	r14, r1
    64f0:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    64f2:	9d 81       	ldd	r25, Y+5	; 0x05
    64f4:	99 23       	and	r25, r25
    64f6:	09 f4       	brne	.+2      	; 0x64fa <_Z4tonehjm+0x338>
    64f8:	89 c1       	rjmp	.+786    	; 0x680c <_Z4tonehjm+0x64a>
    64fa:	52 c1       	rjmp	.+676    	; 0x67a0 <_Z4tonehjm+0x5de>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    {
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
    64fc:	81 e0       	ldi	r24, 0x01	; 1
    64fe:	01 c0       	rjmp	.+2      	; 0x6502 <_Z4tonehjm+0x340>
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    6500:	82 e0       	ldi	r24, 0x02	; 2
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
    6502:	9d 81       	ldd	r25, Y+5	; 0x05
    6504:	91 11       	cpse	r25, r1
    6506:	06 c0       	rjmp	.+12     	; 0x6514 <_Z4tonehjm+0x352>
      {
        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
    6508:	95 b5       	in	r25, 0x25	; 37
    650a:	98 7f       	andi	r25, 0xF8	; 248
    650c:	89 2b       	or	r24, r25
    650e:	85 bd       	out	0x25, r24	; 37
    6510:	7d c0       	rjmp	.+250    	; 0x660c <_Z4tonehjm+0x44a>
          prescalarbits = _timer == 0 ? 0b011 : 0b100;

          if (_timer == 2 && ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
    6512:	85 e0       	ldi	r24, 0x05	; 5
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;
    6514:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    6518:	98 7f       	andi	r25, 0xF8	; 248
    651a:	89 2b       	or	r24, r25
    651c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    6520:	75 c0       	rjmp	.+234    	; 0x660c <_Z4tonehjm+0x44a>
  _timer = toneBegin(_pin);

  if (_timer >= 0)
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    6522:	61 e0       	ldi	r22, 0x01	; 1
    6524:	a8 d4       	rcall	.+2384   	; 0x6e76 <pinMode>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
    6526:	48 01       	movw	r8, r16
    6528:	a1 2c       	mov	r10, r1
    652a:	b1 2c       	mov	r11, r1
    652c:	60 e0       	ldi	r22, 0x00	; 0
    652e:	72 e1       	ldi	r23, 0x12	; 18
    6530:	8a e7       	ldi	r24, 0x7A	; 122
    6532:	90 e0       	ldi	r25, 0x00	; 0
    6534:	a5 01       	movw	r20, r10
    6536:	94 01       	movw	r18, r8
    6538:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <__divmodsi4>
    653c:	69 01       	movw	r12, r18
    653e:	7a 01       	movw	r14, r20
    6540:	81 e0       	ldi	r24, 0x01	; 1
    6542:	c8 1a       	sub	r12, r24
    6544:	d1 08       	sbc	r13, r1
    6546:	e1 08       	sbc	r14, r1
    6548:	f1 08       	sbc	r15, r1

      prescalarbits = 0b001;
      if (ocr > 0xffff)
    654a:	c1 14       	cp	r12, r1
    654c:	d1 04       	cpc	r13, r1
    654e:	91 e0       	ldi	r25, 0x01	; 1
    6550:	e9 06       	cpc	r14, r25
    6552:	f1 04       	cpc	r15, r1
    6554:	88 f0       	brcs	.+34     	; 0x6578 <_Z4tonehjm+0x3b6>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
    6556:	68 e4       	ldi	r22, 0x48	; 72
    6558:	78 ee       	ldi	r23, 0xE8	; 232
    655a:	81 e0       	ldi	r24, 0x01	; 1
    655c:	90 e0       	ldi	r25, 0x00	; 0
    655e:	a5 01       	movw	r20, r10
    6560:	94 01       	movw	r18, r8
    6562:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <__divmodsi4>
    6566:	69 01       	movw	r12, r18
    6568:	7a 01       	movw	r14, r20
    656a:	81 e0       	ldi	r24, 0x01	; 1
    656c:	c8 1a       	sub	r12, r24
    656e:	d1 08       	sbc	r13, r1
    6570:	e1 08       	sbc	r14, r1
    6572:	f1 08       	sbc	r15, r1
        prescalarbits = 0b011;
    6574:	83 e0       	ldi	r24, 0x03	; 3
    6576:	01 c0       	rjmp	.+2      	; 0x657a <_Z4tonehjm+0x3b8>
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
    6578:	81 e0       	ldi	r24, 0x01	; 1
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
        prescalarbits = 0b011;
      }

      if (_timer == 1)
    657a:	9d 81       	ldd	r25, Y+5	; 0x05
    657c:	91 30       	cpi	r25, 0x01	; 1
    657e:	81 f4       	brne	.+32     	; 0x65a0 <_Z4tonehjm+0x3de>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
    6580:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
    6584:	98 7f       	andi	r25, 0xF8	; 248
    6586:	89 2b       	or	r24, r25
    6588:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>

    }
    

    // Calculate the toggle count
    if (duration > 0)
    658c:	41 14       	cp	r4, r1
    658e:	51 04       	cpc	r5, r1
    6590:	61 04       	cpc	r6, r1
    6592:	71 04       	cpc	r7, r1
    6594:	09 f0       	breq	.+2      	; 0x6598 <_Z4tonehjm+0x3d6>
    6596:	3f c0       	rjmp	.+126    	; 0x6616 <_Z4tonehjm+0x454>
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    6598:	2f ef       	ldi	r18, 0xFF	; 255
    659a:	3f ef       	ldi	r19, 0xFF	; 255
    659c:	a9 01       	movw	r20, r18
    659e:	6c c0       	rjmp	.+216    	; 0x6678 <_Z4tonehjm+0x4b6>
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
#endif
      }
#if defined(TCCR3B)
      else if (_timer == 3)
    65a0:	2d 81       	ldd	r18, Y+5	; 0x05
    65a2:	23 30       	cpi	r18, 0x03	; 3
    65a4:	79 f4       	brne	.+30     	; 0x65c4 <_Z4tonehjm+0x402>
        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
    65a6:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
    65aa:	98 7f       	andi	r25, 0xF8	; 248
    65ac:	89 2b       	or	r24, r25
    65ae:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>

    }
    

    // Calculate the toggle count
    if (duration > 0)
    65b2:	41 14       	cp	r4, r1
    65b4:	51 04       	cpc	r5, r1
    65b6:	61 04       	cpc	r6, r1
    65b8:	71 04       	cpc	r7, r1
    65ba:	69 f5       	brne	.+90     	; 0x6616 <_Z4tonehjm+0x454>
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    65bc:	2f ef       	ldi	r18, 0xFF	; 255
    65be:	3f ef       	ldi	r19, 0xFF	; 255
    65c0:	a9 01       	movw	r20, r18
    65c2:	7c c0       	rjmp	.+248    	; 0x66bc <_Z4tonehjm+0x4fa>
#if defined(TCCR3B)
      else if (_timer == 3)
        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
#endif
#if defined(TCCR4B)
      else if (_timer == 4)
    65c4:	9d 81       	ldd	r25, Y+5	; 0x05
    65c6:	94 30       	cpi	r25, 0x04	; 4
    65c8:	79 f4       	brne	.+30     	; 0x65e8 <_Z4tonehjm+0x426>
        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
    65ca:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
    65ce:	98 7f       	andi	r25, 0xF8	; 248
    65d0:	89 2b       	or	r24, r25
    65d2:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>

    }
    

    // Calculate the toggle count
    if (duration > 0)
    65d6:	41 14       	cp	r4, r1
    65d8:	51 04       	cpc	r5, r1
    65da:	61 04       	cpc	r6, r1
    65dc:	71 04       	cpc	r7, r1
    65de:	d9 f4       	brne	.+54     	; 0x6616 <_Z4tonehjm+0x454>
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    65e0:	2f ef       	ldi	r18, 0xFF	; 255
    65e2:	3f ef       	ldi	r19, 0xFF	; 255
    65e4:	a9 01       	movw	r20, r18
    65e6:	7c c0       	rjmp	.+248    	; 0x66e0 <_Z4tonehjm+0x51e>
#if defined(TCCR4B)
      else if (_timer == 4)
        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
#endif
#if defined(TCCR5B)
      else if (_timer == 5)
    65e8:	2d 81       	ldd	r18, Y+5	; 0x05
    65ea:	25 30       	cpi	r18, 0x05	; 5
    65ec:	79 f4       	brne	.+30     	; 0x660c <_Z4tonehjm+0x44a>
        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
    65ee:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x7c0121>
    65f2:	98 7f       	andi	r25, 0xF8	; 248
    65f4:	89 2b       	or	r24, r25
    65f6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x7c0121>

    }
    

    // Calculate the toggle count
    if (duration > 0)
    65fa:	41 14       	cp	r4, r1
    65fc:	51 04       	cpc	r5, r1
    65fe:	61 04       	cpc	r6, r1
    6600:	71 04       	cpc	r7, r1
    6602:	49 f4       	brne	.+18     	; 0x6616 <_Z4tonehjm+0x454>
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    6604:	2f ef       	ldi	r18, 0xFF	; 255
    6606:	3f ef       	ldi	r19, 0xFF	; 255
    6608:	a9 01       	movw	r20, r18
    660a:	7c c0       	rjmp	.+248    	; 0x6704 <_Z4tonehjm+0x542>

    }
    

    // Calculate the toggle count
    if (duration > 0)
    660c:	41 14       	cp	r4, r1
    660e:	51 04       	cpc	r5, r1
    6610:	61 04       	cpc	r6, r1
    6612:	71 04       	cpc	r7, r1
    6614:	69 f0       	breq	.+26     	; 0x6630 <_Z4tonehjm+0x46e>
    {
      toggle_count = 2 * frequency * duration / 1000;
    6616:	d8 01       	movw	r26, r16
    6618:	aa 0f       	add	r26, r26
    661a:	bb 1f       	adc	r27, r27
    661c:	a3 01       	movw	r20, r6
    661e:	92 01       	movw	r18, r4
    6620:	0e 94 2d 3b 	call	0x765a	; 0x765a <__muluhisi3>
    6624:	28 ee       	ldi	r18, 0xE8	; 232
    6626:	33 e0       	ldi	r19, 0x03	; 3
    6628:	40 e0       	ldi	r20, 0x00	; 0
    662a:	50 e0       	ldi	r21, 0x00	; 0
    662c:	c1 d7       	rcall	.+3970   	; 0x75b0 <__udivmodsi4>
    662e:	03 c0       	rjmp	.+6      	; 0x6636 <_Z4tonehjm+0x474>
    }
    else
    {
      toggle_count = -1;
    6630:	2f ef       	ldi	r18, 0xFF	; 255
    6632:	3f ef       	ldi	r19, 0xFF	; 255
    6634:	a9 01       	movw	r20, r18
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    6636:	8d 81       	ldd	r24, Y+5	; 0x05
    6638:	82 30       	cpi	r24, 0x02	; 2
    663a:	81 f1       	breq	.+96     	; 0x669c <_Z4tonehjm+0x4da>
    663c:	2c f4       	brge	.+10     	; 0x6648 <_Z4tonehjm+0x486>
    663e:	88 23       	and	r24, r24
    6640:	61 f0       	breq	.+24     	; 0x665a <_Z4tonehjm+0x498>
    6642:	81 30       	cpi	r24, 0x01	; 1
    6644:	c9 f0       	breq	.+50     	; 0x6678 <_Z4tonehjm+0x4b6>
    6646:	19 c1       	rjmp	.+562    	; 0x687a <_Z4tonehjm+0x6b8>
    6648:	9d 81       	ldd	r25, Y+5	; 0x05
    664a:	94 30       	cpi	r25, 0x04	; 4
    664c:	09 f4       	brne	.+2      	; 0x6650 <_Z4tonehjm+0x48e>
    664e:	48 c0       	rjmp	.+144    	; 0x66e0 <_Z4tonehjm+0x51e>
    6650:	ac f1       	brlt	.+106    	; 0x66bc <_Z4tonehjm+0x4fa>
    6652:	95 30       	cpi	r25, 0x05	; 5
    6654:	09 f4       	brne	.+2      	; 0x6658 <_Z4tonehjm+0x496>
    6656:	56 c0       	rjmp	.+172    	; 0x6704 <_Z4tonehjm+0x542>
    6658:	10 c1       	rjmp	.+544    	; 0x687a <_Z4tonehjm+0x6b8>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
    665a:	c7 bc       	out	0x27, r12	; 39
        timer0_toggle_count = toggle_count;
    665c:	20 93 92 06 	sts	0x0692, r18	; 0x800692 <timer0_toggle_count>
    6660:	30 93 93 06 	sts	0x0693, r19	; 0x800693 <timer0_toggle_count+0x1>
    6664:	40 93 94 06 	sts	0x0694, r20	; 0x800694 <timer0_toggle_count+0x2>
    6668:	50 93 95 06 	sts	0x0695, r21	; 0x800695 <timer0_toggle_count+0x3>
        bitWrite(TIMSK0, OCIE0A, 1);
    666c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
    6670:	82 60       	ori	r24, 0x02	; 2
    6672:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
        break;
    6676:	01 c1       	rjmp	.+514    	; 0x687a <_Z4tonehjm+0x6b8>
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
    6678:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    667c:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
        timer1_toggle_count = toggle_count;
    6680:	20 93 8b 06 	sts	0x068B, r18	; 0x80068b <timer1_toggle_count>
    6684:	30 93 8c 06 	sts	0x068C, r19	; 0x80068c <timer1_toggle_count+0x1>
    6688:	40 93 8d 06 	sts	0x068D, r20	; 0x80068d <timer1_toggle_count+0x2>
    668c:	50 93 8e 06 	sts	0x068E, r21	; 0x80068e <timer1_toggle_count+0x3>
        bitWrite(TIMSK1, OCIE1A, 1);
    6690:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
    6694:	82 60       	ori	r24, 0x02	; 2
    6696:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
    669a:	ef c0       	rjmp	.+478    	; 0x687a <_Z4tonehjm+0x6b8>

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
    669c:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
        timer2_toggle_count = toggle_count;
    66a0:	20 93 84 06 	sts	0x0684, r18	; 0x800684 <timer2_toggle_count>
    66a4:	30 93 85 06 	sts	0x0685, r19	; 0x800685 <timer2_toggle_count+0x1>
    66a8:	40 93 86 06 	sts	0x0686, r20	; 0x800686 <timer2_toggle_count+0x2>
    66ac:	50 93 87 06 	sts	0x0687, r21	; 0x800687 <timer2_toggle_count+0x3>
        bitWrite(TIMSK2, OCIE2A, 1);
    66b0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
    66b4:	82 60       	ori	r24, 0x02	; 2
    66b6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
        break;
    66ba:	df c0       	rjmp	.+446    	; 0x687a <_Z4tonehjm+0x6b8>
#endif

#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)
      case 3:
        OCR3A = ocr;
    66bc:	d0 92 99 00 	sts	0x0099, r13	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    66c0:	c0 92 98 00 	sts	0x0098, r12	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
        timer3_toggle_count = toggle_count;
    66c4:	20 93 7d 06 	sts	0x067D, r18	; 0x80067d <timer3_toggle_count>
    66c8:	30 93 7e 06 	sts	0x067E, r19	; 0x80067e <timer3_toggle_count+0x1>
    66cc:	40 93 7f 06 	sts	0x067F, r20	; 0x80067f <timer3_toggle_count+0x2>
    66d0:	50 93 80 06 	sts	0x0680, r21	; 0x800680 <timer3_toggle_count+0x3>
        bitWrite(TIMSK3, OCIE3A, 1);
    66d4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
    66d8:	82 60       	ori	r24, 0x02	; 2
    66da:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
        break;
    66de:	cd c0       	rjmp	.+410    	; 0x687a <_Z4tonehjm+0x6b8>
#endif

#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)
      case 4:
        OCR4A = ocr;
    66e0:	d0 92 a9 00 	sts	0x00A9, r13	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    66e4:	c0 92 a8 00 	sts	0x00A8, r12	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
        timer4_toggle_count = toggle_count;
    66e8:	20 93 76 06 	sts	0x0676, r18	; 0x800676 <timer4_toggle_count>
    66ec:	30 93 77 06 	sts	0x0677, r19	; 0x800677 <timer4_toggle_count+0x1>
    66f0:	40 93 78 06 	sts	0x0678, r20	; 0x800678 <timer4_toggle_count+0x2>
    66f4:	50 93 79 06 	sts	0x0679, r21	; 0x800679 <timer4_toggle_count+0x3>
        bitWrite(TIMSK4, OCIE4A, 1);
    66f8:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
    66fc:	82 60       	ori	r24, 0x02	; 2
    66fe:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
        break;
    6702:	bb c0       	rjmp	.+374    	; 0x687a <_Z4tonehjm+0x6b8>
#endif

#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)
      case 5:
        OCR5A = ocr;
    6704:	d0 92 29 01 	sts	0x0129, r13	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    6708:	c0 92 28 01 	sts	0x0128, r12	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
        timer5_toggle_count = toggle_count;
    670c:	20 93 6f 06 	sts	0x066F, r18	; 0x80066f <timer5_toggle_count>
    6710:	30 93 70 06 	sts	0x0670, r19	; 0x800670 <timer5_toggle_count+0x1>
    6714:	40 93 71 06 	sts	0x0671, r20	; 0x800671 <timer5_toggle_count+0x2>
    6718:	50 93 72 06 	sts	0x0672, r21	; 0x800672 <timer5_toggle_count+0x3>
        bitWrite(TIMSK5, OCIE5A, 1);
    671c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7c0073>
    6720:	82 60       	ori	r24, 0x02	; 2
    6722:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7c0073>
        break;
#endif

    }
  }
}
    6726:	a9 c0       	rjmp	.+338    	; 0x687a <_Z4tonehjm+0x6b8>
          prescalarbits = 0b011;
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    6728:	68 e4       	ldi	r22, 0x48	; 72
    672a:	78 ee       	ldi	r23, 0xE8	; 232
    672c:	81 e0       	ldi	r24, 0x01	; 1
    672e:	90 e0       	ldi	r25, 0x00	; 0
    6730:	a5 01       	movw	r20, r10
    6732:	94 01       	movw	r18, r8
    6734:	5f d7       	rcall	.+3774   	; 0x75f4 <__divmodsi4>
    6736:	69 01       	movw	r12, r18
    6738:	7a 01       	movw	r14, r20
    673a:	81 e0       	ldi	r24, 0x01	; 1
    673c:	c8 1a       	sub	r12, r24
    673e:	d1 08       	sbc	r13, r1
    6740:	e1 08       	sbc	r14, r1
    6742:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;

          if (_timer == 2 && ocr > 255)
    6744:	9f ef       	ldi	r25, 0xFF	; 255
    6746:	c9 16       	cp	r12, r25
    6748:	d1 04       	cpc	r13, r1
    674a:	e1 04       	cpc	r14, r1
    674c:	f1 04       	cpc	r15, r1
    674e:	31 f1       	breq	.+76     	; 0x679c <_Z4tonehjm+0x5da>
    6750:	28 f1       	brcs	.+74     	; 0x679c <_Z4tonehjm+0x5da>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
    6752:	64 e2       	ldi	r22, 0x24	; 36
    6754:	74 ef       	ldi	r23, 0xF4	; 244
    6756:	80 e0       	ldi	r24, 0x00	; 0
    6758:	90 e0       	ldi	r25, 0x00	; 0
    675a:	a5 01       	movw	r20, r10
    675c:	94 01       	movw	r18, r8
    675e:	4a d7       	rcall	.+3732   	; 0x75f4 <__divmodsi4>
    6760:	69 01       	movw	r12, r18
    6762:	7a 01       	movw	r14, r20
    6764:	81 e0       	ldi	r24, 0x01	; 1
    6766:	c8 1a       	sub	r12, r24
    6768:	d1 08       	sbc	r13, r1
    676a:	e1 08       	sbc	r14, r1
    676c:	f1 08       	sbc	r15, r1
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    676e:	9f ef       	ldi	r25, 0xFF	; 255
    6770:	c9 16       	cp	r12, r25
    6772:	d1 04       	cpc	r13, r1
    6774:	e1 04       	cpc	r14, r1
    6776:	f1 04       	cpc	r15, r1
    6778:	09 f0       	breq	.+2      	; 0x677c <_Z4tonehjm+0x5ba>
    677a:	08 f4       	brcc	.+2      	; 0x677e <_Z4tonehjm+0x5bc>
    677c:	ca ce       	rjmp	.-620    	; 0x6512 <_Z4tonehjm+0x350>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    677e:	62 e1       	ldi	r22, 0x12	; 18
    6780:	7a e7       	ldi	r23, 0x7A	; 122
    6782:	80 e0       	ldi	r24, 0x00	; 0
    6784:	90 e0       	ldi	r25, 0x00	; 0
    6786:	a5 01       	movw	r20, r10
    6788:	94 01       	movw	r18, r8
    678a:	34 d7       	rcall	.+3688   	; 0x75f4 <__divmodsi4>
    678c:	69 01       	movw	r12, r18
    678e:	7a 01       	movw	r14, r20
    6790:	81 e0       	ldi	r24, 0x01	; 1
    6792:	c8 1a       	sub	r12, r24
    6794:	d1 08       	sbc	r13, r1
    6796:	e1 08       	sbc	r14, r1
    6798:	f1 08       	sbc	r15, r1
    679a:	17 c0       	rjmp	.+46     	; 0x67ca <_Z4tonehjm+0x608>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    679c:	84 e0       	ldi	r24, 0x04	; 4
    679e:	ba ce       	rjmp	.-652    	; 0x6514 <_Z4tonehjm+0x352>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    67a0:	2f ef       	ldi	r18, 0xFF	; 255
    67a2:	c2 16       	cp	r12, r18
    67a4:	d1 04       	cpc	r13, r1
    67a6:	e1 04       	cpc	r14, r1
    67a8:	f1 04       	cpc	r15, r1
    67aa:	71 f1       	breq	.+92     	; 0x6808 <_Z4tonehjm+0x646>
    67ac:	68 f1       	brcs	.+90     	; 0x6808 <_Z4tonehjm+0x646>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    67ae:	62 e1       	ldi	r22, 0x12	; 18
    67b0:	7a e7       	ldi	r23, 0x7A	; 122
    67b2:	80 e0       	ldi	r24, 0x00	; 0
    67b4:	90 e0       	ldi	r25, 0x00	; 0
    67b6:	a5 01       	movw	r20, r10
    67b8:	94 01       	movw	r18, r8
    67ba:	1c d7       	rcall	.+3640   	; 0x75f4 <__divmodsi4>
    67bc:	69 01       	movw	r12, r18
    67be:	7a 01       	movw	r14, r20
    67c0:	91 e0       	ldi	r25, 0x01	; 1
    67c2:	c9 1a       	sub	r12, r25
    67c4:	d1 08       	sbc	r13, r1
    67c6:	e1 08       	sbc	r14, r1
    67c8:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
    67ca:	8f ef       	ldi	r24, 0xFF	; 255
    67cc:	c8 16       	cp	r12, r24
    67ce:	d1 04       	cpc	r13, r1
    67d0:	e1 04       	cpc	r14, r1
    67d2:	f1 04       	cpc	r15, r1
    67d4:	a9 f0       	breq	.+42     	; 0x6800 <_Z4tonehjm+0x63e>
    67d6:	a0 f0       	brcs	.+40     	; 0x6800 <_Z4tonehjm+0x63e>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    67d8:	89 81       	ldd	r24, Y+1	; 0x01
    67da:	9a 81       	ldd	r25, Y+2	; 0x02
    67dc:	ab 81       	ldd	r26, Y+3	; 0x03
    67de:	bc 81       	ldd	r27, Y+4	; 0x04
    67e0:	2a e0       	ldi	r18, 0x0A	; 10
    67e2:	b5 95       	asr	r27
    67e4:	a7 95       	ror	r26
    67e6:	97 95       	ror	r25
    67e8:	87 95       	ror	r24
    67ea:	2a 95       	dec	r18
    67ec:	d1 f7       	brne	.-12     	; 0x67e2 <_Z4tonehjm+0x620>
    67ee:	6c 01       	movw	r12, r24
    67f0:	7d 01       	movw	r14, r26
    67f2:	21 e0       	ldi	r18, 0x01	; 1
    67f4:	c2 1a       	sub	r12, r18
    67f6:	d1 08       	sbc	r13, r1
    67f8:	e1 08       	sbc	r14, r1
    67fa:	f1 08       	sbc	r15, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    67fc:	87 e0       	ldi	r24, 0x07	; 7
    67fe:	8a ce       	rjmp	.-748    	; 0x6514 <_Z4tonehjm+0x352>
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
    6800:	86 e0       	ldi	r24, 0x06	; 6
    6802:	88 ce       	rjmp	.-752    	; 0x6514 <_Z4tonehjm+0x352>
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    6804:	82 e0       	ldi	r24, 0x02	; 2
    6806:	86 ce       	rjmp	.-756    	; 0x6514 <_Z4tonehjm+0x352>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    6808:	84 e0       	ldi	r24, 0x04	; 4
    680a:	7b ce       	rjmp	.-778    	; 0x6502 <_Z4tonehjm+0x340>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    680c:	2f ef       	ldi	r18, 0xFF	; 255
    680e:	c2 16       	cp	r12, r18
    6810:	d1 04       	cpc	r13, r1
    6812:	e1 04       	cpc	r14, r1
    6814:	f1 04       	cpc	r15, r1
    6816:	61 f1       	breq	.+88     	; 0x6870 <_Z4tonehjm+0x6ae>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    6818:	58 f1       	brcs	.+86     	; 0x6870 <_Z4tonehjm+0x6ae>
    681a:	62 e1       	ldi	r22, 0x12	; 18
    681c:	7a e7       	ldi	r23, 0x7A	; 122
    681e:	80 e0       	ldi	r24, 0x00	; 0
    6820:	90 e0       	ldi	r25, 0x00	; 0
    6822:	a5 01       	movw	r20, r10
    6824:	94 01       	movw	r18, r8
    6826:	e6 d6       	rcall	.+3532   	; 0x75f4 <__divmodsi4>
    6828:	69 01       	movw	r12, r18
    682a:	7a 01       	movw	r14, r20
    682c:	81 e0       	ldi	r24, 0x01	; 1
    682e:	c8 1a       	sub	r12, r24
    6830:	d1 08       	sbc	r13, r1
    6832:	e1 08       	sbc	r14, r1
    6834:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
    6836:	9f ef       	ldi	r25, 0xFF	; 255
    6838:	c9 16       	cp	r12, r25
    683a:	d1 04       	cpc	r13, r1
    683c:	e1 04       	cpc	r14, r1
    683e:	f1 04       	cpc	r15, r1
    6840:	a9 f0       	breq	.+42     	; 0x686c <_Z4tonehjm+0x6aa>
    6842:	a0 f0       	brcs	.+40     	; 0x686c <_Z4tonehjm+0x6aa>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    6844:	89 81       	ldd	r24, Y+1	; 0x01
    6846:	9a 81       	ldd	r25, Y+2	; 0x02
    6848:	ab 81       	ldd	r26, Y+3	; 0x03
    684a:	bc 81       	ldd	r27, Y+4	; 0x04
    684c:	3a e0       	ldi	r19, 0x0A	; 10
    684e:	b5 95       	asr	r27
    6850:	a7 95       	ror	r26
    6852:	97 95       	ror	r25
    6854:	87 95       	ror	r24
    6856:	3a 95       	dec	r19
    6858:	d1 f7       	brne	.-12     	; 0x684e <_Z4tonehjm+0x68c>
    685a:	6c 01       	movw	r12, r24
    685c:	7d 01       	movw	r14, r26
    685e:	21 e0       	ldi	r18, 0x01	; 1
    6860:	c2 1a       	sub	r12, r18
    6862:	d1 08       	sbc	r13, r1
    6864:	e1 08       	sbc	r14, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    6866:	f1 08       	sbc	r15, r1
    6868:	85 e0       	ldi	r24, 0x05	; 5
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
    686a:	4e ce       	rjmp	.-868    	; 0x6508 <_Z4tonehjm+0x346>
    686c:	84 e0       	ldi	r24, 0x04	; 4
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    686e:	4c ce       	rjmp	.-872    	; 0x6508 <_Z4tonehjm+0x346>
    6870:	83 e0       	ldi	r24, 0x03	; 3
  _timer = toneBegin(_pin);

  if (_timer >= 0)
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    6872:	4a ce       	rjmp	.-876    	; 0x6508 <_Z4tonehjm+0x346>
    6874:	61 e0       	ldi	r22, 0x01	; 1
    6876:	ff d2       	rcall	.+1534   	; 0x6e76 <pinMode>
    6878:	d5 cd       	rjmp	.-1110   	; 0x6424 <_Z4tonehjm+0x262>
        break;
#endif

    }
  }
}
    687a:	0f 90       	pop	r0
    687c:	0f 90       	pop	r0
    687e:	0f 90       	pop	r0
    6880:	0f 90       	pop	r0
    6882:	0f 90       	pop	r0
    6884:	df 91       	pop	r29
    6886:	cf 91       	pop	r28
    6888:	1f 91       	pop	r17
    688a:	0f 91       	pop	r16
    688c:	ff 90       	pop	r15
    688e:	ef 90       	pop	r14
    6890:	df 90       	pop	r13
    6892:	cf 90       	pop	r12
    6894:	bf 90       	pop	r11
    6896:	af 90       	pop	r10
    6898:	9f 90       	pop	r9
    689a:	8f 90       	pop	r8
    689c:	7f 90       	pop	r7
    689e:	6f 90       	pop	r6
    68a0:	5f 90       	pop	r5
    68a2:	4f 90       	pop	r4
    68a4:	08 95       	ret

000068a6 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    68a6:	82 30       	cpi	r24, 0x02	; 2
    68a8:	a9 f0       	breq	.+42     	; 0x68d4 <_Z12disableTimerh+0x2e>
    68aa:	28 f4       	brcc	.+10     	; 0x68b6 <_Z12disableTimerh+0x10>
    68ac:	88 23       	and	r24, r24
    68ae:	49 f0       	breq	.+18     	; 0x68c2 <_Z12disableTimerh+0x1c>
    68b0:	81 30       	cpi	r24, 0x01	; 1
    68b2:	51 f0       	breq	.+20     	; 0x68c8 <_Z12disableTimerh+0x22>
    68b4:	08 95       	ret
    68b6:	84 30       	cpi	r24, 0x04	; 4
    68b8:	21 f1       	breq	.+72     	; 0x6902 <_Z12disableTimerh+0x5c>
    68ba:	e8 f0       	brcs	.+58     	; 0x68f6 <_Z12disableTimerh+0x50>
    68bc:	85 30       	cpi	r24, 0x05	; 5
    68be:	39 f1       	breq	.+78     	; 0x690e <_Z12disableTimerh+0x68>
    68c0:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    68c2:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    68c6:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    68c8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
    68cc:	8d 7f       	andi	r24, 0xFD	; 253
    68ce:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
      break;
    68d2:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    68d4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
    68d8:	8d 7f       	andi	r24, 0xFD	; 253
    68da:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    68de:	81 e0       	ldi	r24, 0x01	; 1
    68e0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    68e4:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    68e8:	88 7f       	andi	r24, 0xF8	; 248
    68ea:	84 60       	ori	r24, 0x04	; 4
    68ec:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    68f0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
    68f4:	08 95       	ret
      #endif
      break;

#if defined(TIMSK3) && defined(OCIE3A)
    case 3:
      bitWrite(TIMSK3, OCIE3A, 0);
    68f6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
    68fa:	8d 7f       	andi	r24, 0xFD	; 253
    68fc:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
      break;
    6900:	08 95       	ret
#endif

#if defined(TIMSK4) && defined(OCIE4A)
    case 4:
      bitWrite(TIMSK4, OCIE4A, 0);
    6902:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
    6906:	8d 7f       	andi	r24, 0xFD	; 253
    6908:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
      break;
    690c:	08 95       	ret
#endif

#if defined(TIMSK5) && defined(OCIE5A)
    case 5:
      bitWrite(TIMSK5, OCIE5A, 0);
    690e:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7c0073>
    6912:	8d 7f       	andi	r24, 0xFD	; 253
    6914:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7c0073>
    6918:	08 95       	ret

0000691a <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    691a:	cf 93       	push	r28
    691c:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    691e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <_ZL9tone_pins>
    6922:	c8 13       	cpse	r28, r24
    6924:	07 c0       	rjmp	.+14     	; 0x6934 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    6926:	ee e2       	ldi	r30, 0x2E	; 46
    6928:	fb e0       	ldi	r31, 0x0B	; 11
    692a:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
    692c:	9f ef       	ldi	r25, 0xFF	; 255
    692e:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <_ZL9tone_pins>
      break;
    6932:	01 c0       	rjmp	.+2      	; 0x6936 <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
    6934:	8f ef       	ldi	r24, 0xFF	; 255
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
    6936:	b7 df       	rcall	.-146    	; 0x68a6 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    6938:	60 e0       	ldi	r22, 0x00	; 0
    693a:	8c 2f       	mov	r24, r28
    693c:	cf 91       	pop	r28
    693e:	d7 c2       	rjmp	.+1454   	; 0x6eee <digitalWrite>

00006940 <__vector_13>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    6940:	1f 92       	push	r1
    6942:	0f 92       	push	r0
    6944:	0f b6       	in	r0, 0x3f	; 63
    6946:	0f 92       	push	r0
    6948:	11 24       	eor	r1, r1
    694a:	0b b6       	in	r0, 0x3b	; 59
    694c:	0f 92       	push	r0
    694e:	2f 93       	push	r18
    6950:	3f 93       	push	r19
    6952:	4f 93       	push	r20
    6954:	5f 93       	push	r21
    6956:	6f 93       	push	r22
    6958:	7f 93       	push	r23
    695a:	8f 93       	push	r24
    695c:	9f 93       	push	r25
    695e:	af 93       	push	r26
    6960:	bf 93       	push	r27
    6962:	ef 93       	push	r30
    6964:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    6966:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <timer2_toggle_count>
    696a:	90 91 85 06 	lds	r25, 0x0685	; 0x800685 <timer2_toggle_count+0x1>
    696e:	a0 91 86 06 	lds	r26, 0x0686	; 0x800686 <timer2_toggle_count+0x2>
    6972:	b0 91 87 06 	lds	r27, 0x0687	; 0x800687 <timer2_toggle_count+0x3>
    6976:	89 2b       	or	r24, r25
    6978:	8a 2b       	or	r24, r26
    697a:	8b 2b       	or	r24, r27
    697c:	51 f1       	breq	.+84     	; 0x69d2 <__vector_13+0x92>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    697e:	90 91 81 06 	lds	r25, 0x0681	; 0x800681 <timer2_pin_mask>
    6982:	e0 91 82 06 	lds	r30, 0x0682	; 0x800682 <timer2_pin_port>
    6986:	f0 91 83 06 	lds	r31, 0x0683	; 0x800683 <timer2_pin_port+0x1>
    698a:	80 81       	ld	r24, Z
    698c:	89 27       	eor	r24, r25
    698e:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    6990:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <timer2_toggle_count>
    6994:	90 91 85 06 	lds	r25, 0x0685	; 0x800685 <timer2_toggle_count+0x1>
    6998:	a0 91 86 06 	lds	r26, 0x0686	; 0x800686 <timer2_toggle_count+0x2>
    699c:	b0 91 87 06 	lds	r27, 0x0687	; 0x800687 <timer2_toggle_count+0x3>
    69a0:	18 16       	cp	r1, r24
    69a2:	19 06       	cpc	r1, r25
    69a4:	1a 06       	cpc	r1, r26
    69a6:	1b 06       	cpc	r1, r27
    69a8:	bc f4       	brge	.+46     	; 0x69d8 <__vector_13+0x98>
      timer2_toggle_count--;
    69aa:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <timer2_toggle_count>
    69ae:	90 91 85 06 	lds	r25, 0x0685	; 0x800685 <timer2_toggle_count+0x1>
    69b2:	a0 91 86 06 	lds	r26, 0x0686	; 0x800686 <timer2_toggle_count+0x2>
    69b6:	b0 91 87 06 	lds	r27, 0x0687	; 0x800687 <timer2_toggle_count+0x3>
    69ba:	01 97       	sbiw	r24, 0x01	; 1
    69bc:	a1 09       	sbc	r26, r1
    69be:	b1 09       	sbc	r27, r1
    69c0:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <timer2_toggle_count>
    69c4:	90 93 85 06 	sts	0x0685, r25	; 0x800685 <timer2_toggle_count+0x1>
    69c8:	a0 93 86 06 	sts	0x0686, r26	; 0x800686 <timer2_toggle_count+0x2>
    69cc:	b0 93 87 06 	sts	0x0687, r27	; 0x800687 <timer2_toggle_count+0x3>
    69d0:	03 c0       	rjmp	.+6      	; 0x69d8 <__vector_13+0x98>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    69d2:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <_ZL9tone_pins>
    69d6:	a1 df       	rcall	.-190    	; 0x691a <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    69d8:	ff 91       	pop	r31
    69da:	ef 91       	pop	r30
    69dc:	bf 91       	pop	r27
    69de:	af 91       	pop	r26
    69e0:	9f 91       	pop	r25
    69e2:	8f 91       	pop	r24
    69e4:	7f 91       	pop	r23
    69e6:	6f 91       	pop	r22
    69e8:	5f 91       	pop	r21
    69ea:	4f 91       	pop	r20
    69ec:	3f 91       	pop	r19
    69ee:	2f 91       	pop	r18
    69f0:	0f 90       	pop	r0
    69f2:	0b be       	out	0x3b, r0	; 59
    69f4:	0f 90       	pop	r0
    69f6:	0f be       	out	0x3f, r0	; 63
    69f8:	0f 90       	pop	r0
    69fa:	1f 90       	pop	r1
    69fc:	18 95       	reti

000069fe <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    69fe:	1f 92       	push	r1
    6a00:	0f 92       	push	r0
    6a02:	0f b6       	in	r0, 0x3f	; 63
    6a04:	0f 92       	push	r0
    6a06:	11 24       	eor	r1, r1
    6a08:	2f 93       	push	r18
    6a0a:	3f 93       	push	r19
    6a0c:	8f 93       	push	r24
    6a0e:	9f 93       	push	r25
    6a10:	af 93       	push	r26
    6a12:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    6a14:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <timer0_millis>
    6a18:	90 91 98 06 	lds	r25, 0x0698	; 0x800698 <timer0_millis+0x1>
    6a1c:	a0 91 99 06 	lds	r26, 0x0699	; 0x800699 <timer0_millis+0x2>
    6a20:	b0 91 9a 06 	lds	r27, 0x069A	; 0x80069a <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    6a24:	30 91 96 06 	lds	r19, 0x0696	; 0x800696 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    6a28:	23 e0       	ldi	r18, 0x03	; 3
    6a2a:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    6a2c:	2d 37       	cpi	r18, 0x7D	; 125
    6a2e:	20 f4       	brcc	.+8      	; 0x6a38 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    6a30:	01 96       	adiw	r24, 0x01	; 1
    6a32:	a1 1d       	adc	r26, r1
    6a34:	b1 1d       	adc	r27, r1
    6a36:	05 c0       	rjmp	.+10     	; 0x6a42 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    6a38:	26 e8       	ldi	r18, 0x86	; 134
    6a3a:	23 0f       	add	r18, r19
		m += 1;
    6a3c:	02 96       	adiw	r24, 0x02	; 2
    6a3e:	a1 1d       	adc	r26, r1
    6a40:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    6a42:	20 93 96 06 	sts	0x0696, r18	; 0x800696 <timer0_fract>
	timer0_millis = m;
    6a46:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <timer0_millis>
    6a4a:	90 93 98 06 	sts	0x0698, r25	; 0x800698 <timer0_millis+0x1>
    6a4e:	a0 93 99 06 	sts	0x0699, r26	; 0x800699 <timer0_millis+0x2>
    6a52:	b0 93 9a 06 	sts	0x069A, r27	; 0x80069a <timer0_millis+0x3>
	timer0_overflow_count++;
    6a56:	80 91 9b 06 	lds	r24, 0x069B	; 0x80069b <timer0_overflow_count>
    6a5a:	90 91 9c 06 	lds	r25, 0x069C	; 0x80069c <timer0_overflow_count+0x1>
    6a5e:	a0 91 9d 06 	lds	r26, 0x069D	; 0x80069d <timer0_overflow_count+0x2>
    6a62:	b0 91 9e 06 	lds	r27, 0x069E	; 0x80069e <timer0_overflow_count+0x3>
    6a66:	01 96       	adiw	r24, 0x01	; 1
    6a68:	a1 1d       	adc	r26, r1
    6a6a:	b1 1d       	adc	r27, r1
    6a6c:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <timer0_overflow_count>
    6a70:	90 93 9c 06 	sts	0x069C, r25	; 0x80069c <timer0_overflow_count+0x1>
    6a74:	a0 93 9d 06 	sts	0x069D, r26	; 0x80069d <timer0_overflow_count+0x2>
    6a78:	b0 93 9e 06 	sts	0x069E, r27	; 0x80069e <timer0_overflow_count+0x3>
}
    6a7c:	bf 91       	pop	r27
    6a7e:	af 91       	pop	r26
    6a80:	9f 91       	pop	r25
    6a82:	8f 91       	pop	r24
    6a84:	3f 91       	pop	r19
    6a86:	2f 91       	pop	r18
    6a88:	0f 90       	pop	r0
    6a8a:	0f be       	out	0x3f, r0	; 63
    6a8c:	0f 90       	pop	r0
    6a8e:	1f 90       	pop	r1
    6a90:	18 95       	reti

00006a92 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    6a92:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    6a94:	f8 94       	cli
	m = timer0_millis;
    6a96:	60 91 97 06 	lds	r22, 0x0697	; 0x800697 <timer0_millis>
    6a9a:	70 91 98 06 	lds	r23, 0x0698	; 0x800698 <timer0_millis+0x1>
    6a9e:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <timer0_millis+0x2>
    6aa2:	90 91 9a 06 	lds	r25, 0x069A	; 0x80069a <timer0_millis+0x3>
	SREG = oldSREG;
    6aa6:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    6aa8:	08 95       	ret

00006aaa <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    6aaa:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    6aac:	f8 94       	cli
	m = timer0_overflow_count;
    6aae:	80 91 9b 06 	lds	r24, 0x069B	; 0x80069b <timer0_overflow_count>
    6ab2:	90 91 9c 06 	lds	r25, 0x069C	; 0x80069c <timer0_overflow_count+0x1>
    6ab6:	a0 91 9d 06 	lds	r26, 0x069D	; 0x80069d <timer0_overflow_count+0x2>
    6aba:	b0 91 9e 06 	lds	r27, 0x069E	; 0x80069e <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    6abe:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6ac0:	a8 9b       	sbis	0x15, 0	; 21
    6ac2:	05 c0       	rjmp	.+10     	; 0x6ace <micros+0x24>
    6ac4:	2f 3f       	cpi	r18, 0xFF	; 255
    6ac6:	19 f0       	breq	.+6      	; 0x6ace <micros+0x24>
		m++;
    6ac8:	01 96       	adiw	r24, 0x01	; 1
    6aca:	a1 1d       	adc	r26, r1
    6acc:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    6ace:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    6ad0:	ba 2f       	mov	r27, r26
    6ad2:	a9 2f       	mov	r26, r25
    6ad4:	98 2f       	mov	r25, r24
    6ad6:	88 27       	eor	r24, r24
    6ad8:	82 0f       	add	r24, r18
    6ada:	91 1d       	adc	r25, r1
    6adc:	a1 1d       	adc	r26, r1
    6ade:	b1 1d       	adc	r27, r1
    6ae0:	bc 01       	movw	r22, r24
    6ae2:	cd 01       	movw	r24, r26
    6ae4:	42 e0       	ldi	r20, 0x02	; 2
    6ae6:	66 0f       	add	r22, r22
    6ae8:	77 1f       	adc	r23, r23
    6aea:	88 1f       	adc	r24, r24
    6aec:	99 1f       	adc	r25, r25
    6aee:	4a 95       	dec	r20
    6af0:	d1 f7       	brne	.-12     	; 0x6ae6 <micros+0x3c>
}
    6af2:	08 95       	ret

00006af4 <delay>:

void delay(unsigned long ms)
{
    6af4:	8f 92       	push	r8
    6af6:	9f 92       	push	r9
    6af8:	af 92       	push	r10
    6afa:	bf 92       	push	r11
    6afc:	cf 92       	push	r12
    6afe:	df 92       	push	r13
    6b00:	ef 92       	push	r14
    6b02:	ff 92       	push	r15
    6b04:	6b 01       	movw	r12, r22
    6b06:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    6b08:	d0 df       	rcall	.-96     	; 0x6aaa <micros>
    6b0a:	4b 01       	movw	r8, r22
    6b0c:	5c 01       	movw	r10, r24

	while (ms > 0) {
    6b0e:	c1 14       	cp	r12, r1
    6b10:	d1 04       	cpc	r13, r1
    6b12:	e1 04       	cpc	r14, r1
    6b14:	f1 04       	cpc	r15, r1
		yield();
    6b16:	f1 f0       	breq	.+60     	; 0x6b54 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    6b18:	65 d9       	rcall	.-3382   	; 0x5de4 <yield>
    6b1a:	c7 df       	rcall	.-114    	; 0x6aaa <micros>
    6b1c:	dc 01       	movw	r26, r24
    6b1e:	cb 01       	movw	r24, r22
    6b20:	88 19       	sub	r24, r8
    6b22:	99 09       	sbc	r25, r9
    6b24:	aa 09       	sbc	r26, r10
    6b26:	bb 09       	sbc	r27, r11
    6b28:	88 3e       	cpi	r24, 0xE8	; 232
    6b2a:	93 40       	sbci	r25, 0x03	; 3
    6b2c:	a1 05       	cpc	r26, r1
    6b2e:	b1 05       	cpc	r27, r1
    6b30:	70 f3       	brcs	.-36     	; 0x6b0e <delay+0x1a>
			ms--;
    6b32:	21 e0       	ldi	r18, 0x01	; 1
    6b34:	c2 1a       	sub	r12, r18
    6b36:	d1 08       	sbc	r13, r1
    6b38:	e1 08       	sbc	r14, r1
    6b3a:	f1 08       	sbc	r15, r1
			start += 1000;
    6b3c:	88 ee       	ldi	r24, 0xE8	; 232
    6b3e:	88 0e       	add	r8, r24
    6b40:	83 e0       	ldi	r24, 0x03	; 3
    6b42:	98 1e       	adc	r9, r24
    6b44:	a1 1c       	adc	r10, r1
    6b46:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    6b48:	c1 14       	cp	r12, r1
    6b4a:	d1 04       	cpc	r13, r1
    6b4c:	e1 04       	cpc	r14, r1
    6b4e:	f1 04       	cpc	r15, r1
    6b50:	21 f7       	brne	.-56     	; 0x6b1a <delay+0x26>
    6b52:	dd cf       	rjmp	.-70     	; 0x6b0e <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    6b54:	ff 90       	pop	r15
    6b56:	ef 90       	pop	r14
    6b58:	df 90       	pop	r13
    6b5a:	cf 90       	pop	r12
    6b5c:	bf 90       	pop	r11
    6b5e:	af 90       	pop	r10
    6b60:	9f 90       	pop	r9
    6b62:	8f 90       	pop	r8
    6b64:	08 95       	ret

00006b66 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    6b66:	82 30       	cpi	r24, 0x02	; 2
    6b68:	91 05       	cpc	r25, r1
    6b6a:	38 f0       	brcs	.+14     	; 0x6b7a <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    6b6c:	88 0f       	add	r24, r24
    6b6e:	99 1f       	adc	r25, r25
    6b70:	88 0f       	add	r24, r24
    6b72:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    6b74:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    6b76:	01 97       	sbiw	r24, 0x01	; 1
    6b78:	f1 f7       	brne	.-4      	; 0x6b76 <delayMicroseconds+0x10>
    6b7a:	08 95       	ret

00006b7c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    6b7c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    6b7e:	84 b5       	in	r24, 0x24	; 36
    6b80:	82 60       	ori	r24, 0x02	; 2
    6b82:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    6b84:	84 b5       	in	r24, 0x24	; 36
    6b86:	81 60       	ori	r24, 0x01	; 1
    6b88:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    6b8a:	85 b5       	in	r24, 0x25	; 37
    6b8c:	82 60       	ori	r24, 0x02	; 2
    6b8e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    6b90:	85 b5       	in	r24, 0x25	; 37
    6b92:	81 60       	ori	r24, 0x01	; 1
    6b94:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    6b96:	ee e6       	ldi	r30, 0x6E	; 110
    6b98:	f0 e0       	ldi	r31, 0x00	; 0
    6b9a:	80 81       	ld	r24, Z
    6b9c:	81 60       	ori	r24, 0x01	; 1
    6b9e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    6ba0:	e1 e8       	ldi	r30, 0x81	; 129
    6ba2:	f0 e0       	ldi	r31, 0x00	; 0
    6ba4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    6ba6:	80 81       	ld	r24, Z
    6ba8:	82 60       	ori	r24, 0x02	; 2
    6baa:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    6bac:	80 81       	ld	r24, Z
    6bae:	81 60       	ori	r24, 0x01	; 1
    6bb0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    6bb2:	e0 e8       	ldi	r30, 0x80	; 128
    6bb4:	f0 e0       	ldi	r31, 0x00	; 0
    6bb6:	80 81       	ld	r24, Z
    6bb8:	81 60       	ori	r24, 0x01	; 1
    6bba:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    6bbc:	e1 eb       	ldi	r30, 0xB1	; 177
    6bbe:	f0 e0       	ldi	r31, 0x00	; 0
    6bc0:	80 81       	ld	r24, Z
    6bc2:	84 60       	ori	r24, 0x04	; 4
    6bc4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    6bc6:	e0 eb       	ldi	r30, 0xB0	; 176
    6bc8:	f0 e0       	ldi	r31, 0x00	; 0
    6bca:	80 81       	ld	r24, Z
    6bcc:	81 60       	ori	r24, 0x01	; 1
    6bce:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    6bd0:	e1 e9       	ldi	r30, 0x91	; 145
    6bd2:	f0 e0       	ldi	r31, 0x00	; 0
    6bd4:	80 81       	ld	r24, Z
    6bd6:	82 60       	ori	r24, 0x02	; 2
    6bd8:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    6bda:	80 81       	ld	r24, Z
    6bdc:	81 60       	ori	r24, 0x01	; 1
    6bde:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    6be0:	e0 e9       	ldi	r30, 0x90	; 144
    6be2:	f0 e0       	ldi	r31, 0x00	; 0
    6be4:	80 81       	ld	r24, Z
    6be6:	81 60       	ori	r24, 0x01	; 1
    6be8:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    6bea:	e1 ea       	ldi	r30, 0xA1	; 161
    6bec:	f0 e0       	ldi	r31, 0x00	; 0
    6bee:	80 81       	ld	r24, Z
    6bf0:	82 60       	ori	r24, 0x02	; 2
    6bf2:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    6bf4:	80 81       	ld	r24, Z
    6bf6:	81 60       	ori	r24, 0x01	; 1
    6bf8:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    6bfa:	e0 ea       	ldi	r30, 0xA0	; 160
    6bfc:	f0 e0       	ldi	r31, 0x00	; 0
    6bfe:	80 81       	ld	r24, Z
    6c00:	81 60       	ori	r24, 0x01	; 1
    6c02:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    6c04:	e1 e2       	ldi	r30, 0x21	; 33
    6c06:	f1 e0       	ldi	r31, 0x01	; 1
    6c08:	80 81       	ld	r24, Z
    6c0a:	82 60       	ori	r24, 0x02	; 2
    6c0c:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    6c0e:	80 81       	ld	r24, Z
    6c10:	81 60       	ori	r24, 0x01	; 1
    6c12:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    6c14:	e0 e2       	ldi	r30, 0x20	; 32
    6c16:	f1 e0       	ldi	r31, 0x01	; 1
    6c18:	80 81       	ld	r24, Z
    6c1a:	81 60       	ori	r24, 0x01	; 1
    6c1c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    6c1e:	ea e7       	ldi	r30, 0x7A	; 122
    6c20:	f0 e0       	ldi	r31, 0x00	; 0
    6c22:	80 81       	ld	r24, Z
    6c24:	84 60       	ori	r24, 0x04	; 4
    6c26:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    6c28:	80 81       	ld	r24, Z
    6c2a:	82 60       	ori	r24, 0x02	; 2
    6c2c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    6c2e:	80 81       	ld	r24, Z
    6c30:	81 60       	ori	r24, 0x01	; 1
    6c32:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    6c34:	80 81       	ld	r24, Z
    6c36:	80 68       	ori	r24, 0x80	; 128
    6c38:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    6c3a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    6c3e:	08 95       	ret

00006c40 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    6c40:	1f 93       	push	r17
    6c42:	cf 93       	push	r28
    6c44:	df 93       	push	r29
    6c46:	18 2f       	mov	r17, r24
    6c48:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    6c4a:	61 e0       	ldi	r22, 0x01	; 1
    6c4c:	14 d1       	rcall	.+552    	; 0x6e76 <pinMode>
	if (val == 0)
    6c4e:	20 97       	sbiw	r28, 0x00	; 0
    6c50:	11 f4       	brne	.+4      	; 0x6c56 <analogWrite+0x16>
	{
		digitalWrite(pin, LOW);
    6c52:	60 e0       	ldi	r22, 0x00	; 0
    6c54:	04 c0       	rjmp	.+8      	; 0x6c5e <analogWrite+0x1e>
	}
	else if (val == 255)
    6c56:	cf 3f       	cpi	r28, 0xFF	; 255
    6c58:	d1 05       	cpc	r29, r1
    6c5a:	31 f4       	brne	.+12     	; 0x6c68 <analogWrite+0x28>
	{
		digitalWrite(pin, HIGH);
    6c5c:	61 e0       	ldi	r22, 0x01	; 1
    6c5e:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    6c60:	df 91       	pop	r29
    6c62:	cf 91       	pop	r28
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    6c64:	1f 91       	pop	r17
    6c66:	43 c1       	rjmp	.+646    	; 0x6eee <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    6c68:	e1 2f       	mov	r30, r17
    6c6a:	f0 e0       	ldi	r31, 0x00	; 0
    6c6c:	e1 5d       	subi	r30, 0xD1	; 209
    6c6e:	f4 4f       	sbci	r31, 0xF4	; 244
    6c70:	e4 91       	lpm	r30, Z
    6c72:	8e 2f       	mov	r24, r30
    6c74:	90 e0       	ldi	r25, 0x00	; 0
    6c76:	fc 01       	movw	r30, r24
    6c78:	31 97       	sbiw	r30, 0x01	; 1
    6c7a:	e2 31       	cpi	r30, 0x12	; 18
    6c7c:	f1 05       	cpc	r31, r1
    6c7e:	08 f0       	brcs	.+2      	; 0x6c82 <analogWrite+0x42>
    6c80:	9c c0       	rjmp	.+312    	; 0x6dba <analogWrite+0x17a>
    6c82:	88 27       	eor	r24, r24
    6c84:	ee 58       	subi	r30, 0x8E	; 142
    6c86:	ff 4f       	sbci	r31, 0xFF	; 255
    6c88:	8f 4f       	sbci	r24, 0xFF	; 255
    6c8a:	d0 c4       	rjmp	.+2464   	; 0x762c <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    6c8c:	84 b5       	in	r24, 0x24	; 36
    6c8e:	80 68       	ori	r24, 0x80	; 128
    6c90:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    6c92:	c7 bd       	out	0x27, r28	; 39
				break;
    6c94:	97 c0       	rjmp	.+302    	; 0x6dc4 <analogWrite+0x184>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    6c96:	84 b5       	in	r24, 0x24	; 36
    6c98:	80 62       	ori	r24, 0x20	; 32
    6c9a:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    6c9c:	c8 bd       	out	0x28, r28	; 40
				break;
    6c9e:	92 c0       	rjmp	.+292    	; 0x6dc4 <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    6ca0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    6ca4:	80 68       	ori	r24, 0x80	; 128
    6ca6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1A = val; // set pwm duty
    6caa:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    6cae:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				break;
    6cb2:	88 c0       	rjmp	.+272    	; 0x6dc4 <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    6cb4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    6cb8:	80 62       	ori	r24, 0x20	; 32
    6cba:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1B = val; // set pwm duty
    6cbe:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
    6cc2:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
				break;
    6cc6:	7e c0       	rjmp	.+252    	; 0x6dc4 <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1C1)
			case TIMER1C:
				// connect pwm to pin on timer 1, channel C
				sbi(TCCR1A, COM1C1);
    6cc8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    6ccc:	88 60       	ori	r24, 0x08	; 8
    6cce:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1C = val; // set pwm duty
    6cd2:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x7c008d>
    6cd6:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x7c008c>
				break;
    6cda:	74 c0       	rjmp	.+232    	; 0x6dc4 <analogWrite+0x184>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    6cdc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    6ce0:	80 68       	ori	r24, 0x80	; 128
    6ce2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
				OCR2A = val; // set pwm duty
    6ce6:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
				break;
    6cea:	6c c0       	rjmp	.+216    	; 0x6dc4 <analogWrite+0x184>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    6cec:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    6cf0:	80 62       	ori	r24, 0x20	; 32
    6cf2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
				OCR2B = val; // set pwm duty
    6cf6:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7c00b4>
				break;
    6cfa:	64 c0       	rjmp	.+200    	; 0x6dc4 <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    6cfc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    6d00:	80 68       	ori	r24, 0x80	; 128
    6d02:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3A = val; // set pwm duty
    6d06:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    6d0a:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
				break;
    6d0e:	5a c0       	rjmp	.+180    	; 0x6dc4 <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    6d10:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    6d14:	80 62       	ori	r24, 0x20	; 32
    6d16:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3B = val; // set pwm duty
    6d1a:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
    6d1e:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
				break;
    6d22:	50 c0       	rjmp	.+160    	; 0x6dc4 <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
    6d24:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    6d28:	88 60       	ori	r24, 0x08	; 8
    6d2a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3C = val; // set pwm duty
    6d2e:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
    6d32:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
				break;
    6d36:	46 c0       	rjmp	.+140    	; 0x6dc4 <analogWrite+0x184>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
    6d38:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    6d3c:	80 68       	ori	r24, 0x80	; 128
    6d3e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
    6d42:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    6d46:	8f 7b       	andi	r24, 0xBF	; 191
    6d48:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				#endif
				OCR4A = val;	// set pwm duty
    6d4c:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    6d50:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
				break;
    6d54:	37 c0       	rjmp	.+110    	; 0x6dc4 <analogWrite+0x184>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    6d56:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    6d5a:	80 62       	ori	r24, 0x20	; 32
    6d5c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				OCR4B = val; // set pwm duty
    6d60:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
    6d64:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
				break;
    6d68:	2d c0       	rjmp	.+90     	; 0x6dc4 <analogWrite+0x184>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
    6d6a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    6d6e:	88 60       	ori	r24, 0x08	; 8
    6d70:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				OCR4C = val; // set pwm duty
    6d74:	d0 93 ad 00 	sts	0x00AD, r29	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7c00ad>
    6d78:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7c00ac>
				break;
    6d7c:	23 c0       	rjmp	.+70     	; 0x6dc4 <analogWrite+0x184>

							
			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
    6d7e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    6d82:	80 68       	ori	r24, 0x80	; 128
    6d84:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5A = val; // set pwm duty
    6d88:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    6d8c:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
				break;
    6d90:	19 c0       	rjmp	.+50     	; 0x6dc4 <analogWrite+0x184>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
    6d92:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    6d96:	80 62       	ori	r24, 0x20	; 32
    6d98:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5B = val; // set pwm duty
    6d9c:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    6da0:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
				break;
    6da4:	0f c0       	rjmp	.+30     	; 0x6dc4 <analogWrite+0x184>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
    6da6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    6daa:	88 60       	ori	r24, 0x08	; 8
    6dac:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5C = val; // set pwm duty
    6db0:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x7c012d>
    6db4:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x7c012c>
				break;
    6db8:	05 c0       	rjmp	.+10     	; 0x6dc4 <analogWrite+0x184>
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    6dba:	c0 38       	cpi	r28, 0x80	; 128
    6dbc:	d1 05       	cpc	r29, r1
    6dbe:	0c f0       	brlt	.+2      	; 0x6dc2 <analogWrite+0x182>
    6dc0:	4d cf       	rjmp	.-358    	; 0x6c5c <analogWrite+0x1c>
    6dc2:	47 cf       	rjmp	.-370    	; 0x6c52 <analogWrite+0x12>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    6dc4:	df 91       	pop	r29
    6dc6:	cf 91       	pop	r28
    6dc8:	1f 91       	pop	r17
    6dca:	08 95       	ret

00006dcc <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6dcc:	90 e0       	ldi	r25, 0x00	; 0
    6dce:	fc 01       	movw	r30, r24
    6dd0:	31 97       	sbiw	r30, 0x01	; 1
    6dd2:	e2 31       	cpi	r30, 0x12	; 18
    6dd4:	f1 05       	cpc	r31, r1
    6dd6:	08 f0       	brcs	.+2      	; 0x6dda <turnOffPWM+0xe>
    6dd8:	4d c0       	rjmp	.+154    	; 0x6e74 <turnOffPWM+0xa8>
    6dda:	88 27       	eor	r24, r24
    6ddc:	ec 57       	subi	r30, 0x7C	; 124
    6dde:	ff 4f       	sbci	r31, 0xFF	; 255
    6de0:	8f 4f       	sbci	r24, 0xFF	; 255
    6de2:	24 c4       	rjmp	.+2120   	; 0x762c <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    6de4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    6de8:	8f 77       	andi	r24, 0x7F	; 127
    6dea:	03 c0       	rjmp	.+6      	; 0x6df2 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6dec:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    6df0:	8f 7d       	andi	r24, 0xDF	; 223
    6df2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    6df6:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    6df8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    6dfc:	87 7f       	andi	r24, 0xF7	; 247
    6dfe:	f9 cf       	rjmp	.-14     	; 0x6df2 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6e00:	84 b5       	in	r24, 0x24	; 36
    6e02:	8f 77       	andi	r24, 0x7F	; 127
    6e04:	02 c0       	rjmp	.+4      	; 0x6e0a <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    6e06:	84 b5       	in	r24, 0x24	; 36
    6e08:	8f 7d       	andi	r24, 0xDF	; 223
    6e0a:	84 bd       	out	0x24, r24	; 36
    6e0c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6e0e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    6e12:	8f 77       	andi	r24, 0x7F	; 127
    6e14:	03 c0       	rjmp	.+6      	; 0x6e1c <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    6e16:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    6e1a:	8f 7d       	andi	r24, 0xDF	; 223
    6e1c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    6e20:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    6e22:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    6e26:	8f 77       	andi	r24, 0x7F	; 127
    6e28:	07 c0       	rjmp	.+14     	; 0x6e38 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    6e2a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    6e2e:	8f 7d       	andi	r24, 0xDF	; 223
    6e30:	03 c0       	rjmp	.+6      	; 0x6e38 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    6e32:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    6e36:	87 7f       	andi	r24, 0xF7	; 247
    6e38:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    6e3c:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    6e3e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    6e42:	8f 77       	andi	r24, 0x7F	; 127
    6e44:	07 c0       	rjmp	.+14     	; 0x6e54 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    6e46:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    6e4a:	8f 7d       	andi	r24, 0xDF	; 223
    6e4c:	03 c0       	rjmp	.+6      	; 0x6e54 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    6e4e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    6e52:	87 7f       	andi	r24, 0xF7	; 247
    6e54:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    6e58:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    6e5a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    6e5e:	8f 77       	andi	r24, 0x7F	; 127
    6e60:	07 c0       	rjmp	.+14     	; 0x6e70 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    6e62:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    6e66:	8f 7d       	andi	r24, 0xDF	; 223
    6e68:	03 c0       	rjmp	.+6      	; 0x6e70 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    6e6a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    6e6e:	87 7f       	andi	r24, 0xF7	; 247
    6e70:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    6e74:	08 95       	ret

00006e76 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    6e76:	cf 93       	push	r28
    6e78:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    6e7a:	90 e0       	ldi	r25, 0x00	; 0
    6e7c:	fc 01       	movw	r30, r24
    6e7e:	eb 58       	subi	r30, 0x8B	; 139
    6e80:	f4 4f       	sbci	r31, 0xF4	; 244
    6e82:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    6e84:	fc 01       	movw	r30, r24
    6e86:	e5 54       	subi	r30, 0x45	; 69
    6e88:	f4 4f       	sbci	r31, 0xF4	; 244
    6e8a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    6e8c:	88 23       	and	r24, r24
    6e8e:	61 f1       	breq	.+88     	; 0x6ee8 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6e90:	90 e0       	ldi	r25, 0x00	; 0
    6e92:	88 0f       	add	r24, r24
    6e94:	99 1f       	adc	r25, r25
    6e96:	fc 01       	movw	r30, r24
    6e98:	eb 5c       	subi	r30, 0xCB	; 203
    6e9a:	f3 4f       	sbci	r31, 0xF3	; 243
    6e9c:	c5 91       	lpm	r28, Z+
    6e9e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    6ea0:	fc 01       	movw	r30, r24
    6ea2:	e5 5e       	subi	r30, 0xE5	; 229
    6ea4:	f3 4f       	sbci	r31, 0xF3	; 243
    6ea6:	a5 91       	lpm	r26, Z+
    6ea8:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    6eaa:	61 11       	cpse	r22, r1
    6eac:	09 c0       	rjmp	.+18     	; 0x6ec0 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    6eae:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6eb0:	f8 94       	cli
		*reg &= ~bit;
    6eb2:	88 81       	ld	r24, Y
    6eb4:	20 95       	com	r18
    6eb6:	82 23       	and	r24, r18
    6eb8:	88 83       	st	Y, r24
		*out &= ~bit;
    6eba:	ec 91       	ld	r30, X
    6ebc:	2e 23       	and	r18, r30
    6ebe:	0b c0       	rjmp	.+22     	; 0x6ed6 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    6ec0:	62 30       	cpi	r22, 0x02	; 2
    6ec2:	61 f4       	brne	.+24     	; 0x6edc <pinMode+0x66>
		uint8_t oldSREG = SREG;
    6ec4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6ec6:	f8 94       	cli
		*reg &= ~bit;
    6ec8:	88 81       	ld	r24, Y
    6eca:	32 2f       	mov	r19, r18
    6ecc:	30 95       	com	r19
    6ece:	83 23       	and	r24, r19
    6ed0:	88 83       	st	Y, r24
		*out |= bit;
    6ed2:	ec 91       	ld	r30, X
    6ed4:	2e 2b       	or	r18, r30
    6ed6:	2c 93       	st	X, r18
		SREG = oldSREG;
    6ed8:	9f bf       	out	0x3f, r25	; 63
    6eda:	06 c0       	rjmp	.+12     	; 0x6ee8 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    6edc:	8f b7       	in	r24, 0x3f	; 63
                cli();
    6ede:	f8 94       	cli
		*reg |= bit;
    6ee0:	e8 81       	ld	r30, Y
    6ee2:	2e 2b       	or	r18, r30
    6ee4:	28 83       	st	Y, r18
		SREG = oldSREG;
    6ee6:	8f bf       	out	0x3f, r24	; 63
	}
}
    6ee8:	df 91       	pop	r29
    6eea:	cf 91       	pop	r28
    6eec:	08 95       	ret

00006eee <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    6eee:	1f 93       	push	r17
    6ef0:	cf 93       	push	r28
    6ef2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6ef4:	28 2f       	mov	r18, r24
    6ef6:	30 e0       	ldi	r19, 0x00	; 0
    6ef8:	f9 01       	movw	r30, r18
    6efa:	e1 5d       	subi	r30, 0xD1	; 209
    6efc:	f4 4f       	sbci	r31, 0xF4	; 244
    6efe:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6f00:	f9 01       	movw	r30, r18
    6f02:	eb 58       	subi	r30, 0x8B	; 139
    6f04:	f4 4f       	sbci	r31, 0xF4	; 244
    6f06:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6f08:	f9 01       	movw	r30, r18
    6f0a:	e5 54       	subi	r30, 0x45	; 69
    6f0c:	f4 4f       	sbci	r31, 0xF4	; 244
    6f0e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    6f10:	cc 23       	and	r28, r28
    6f12:	b9 f0       	breq	.+46     	; 0x6f42 <digitalWrite+0x54>
    6f14:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6f16:	81 11       	cpse	r24, r1
    6f18:	59 df       	rcall	.-334    	; 0x6dcc <turnOffPWM>

	out = portOutputRegister(port);
    6f1a:	ec 2f       	mov	r30, r28
    6f1c:	f0 e0       	ldi	r31, 0x00	; 0
    6f1e:	ee 0f       	add	r30, r30
    6f20:	ff 1f       	adc	r31, r31
    6f22:	e5 5e       	subi	r30, 0xE5	; 229
    6f24:	f3 4f       	sbci	r31, 0xF3	; 243
    6f26:	a5 91       	lpm	r26, Z+
    6f28:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    6f2a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    6f2c:	f8 94       	cli

	if (val == LOW) {
    6f2e:	11 11       	cpse	r17, r1
    6f30:	04 c0       	rjmp	.+8      	; 0x6f3a <digitalWrite+0x4c>
		*out &= ~bit;
    6f32:	8c 91       	ld	r24, X
    6f34:	d0 95       	com	r29
    6f36:	d8 23       	and	r29, r24
    6f38:	02 c0       	rjmp	.+4      	; 0x6f3e <digitalWrite+0x50>
	} else {
		*out |= bit;
    6f3a:	ec 91       	ld	r30, X
    6f3c:	de 2b       	or	r29, r30
    6f3e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    6f40:	9f bf       	out	0x3f, r25	; 63
}
    6f42:	df 91       	pop	r29
    6f44:	cf 91       	pop	r28
    6f46:	1f 91       	pop	r17
    6f48:	08 95       	ret

00006f4a <digitalRead>:

int digitalRead(uint8_t pin)
{
    6f4a:	cf 93       	push	r28
    6f4c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6f4e:	28 2f       	mov	r18, r24
    6f50:	30 e0       	ldi	r19, 0x00	; 0
    6f52:	f9 01       	movw	r30, r18
    6f54:	e1 5d       	subi	r30, 0xD1	; 209
    6f56:	f4 4f       	sbci	r31, 0xF4	; 244
    6f58:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6f5a:	f9 01       	movw	r30, r18
    6f5c:	eb 58       	subi	r30, 0x8B	; 139
    6f5e:	f4 4f       	sbci	r31, 0xF4	; 244
    6f60:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6f62:	f9 01       	movw	r30, r18
    6f64:	e5 54       	subi	r30, 0x45	; 69
    6f66:	f4 4f       	sbci	r31, 0xF4	; 244
    6f68:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    6f6a:	cc 23       	and	r28, r28
    6f6c:	89 f0       	breq	.+34     	; 0x6f90 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6f6e:	81 11       	cpse	r24, r1
    6f70:	2d df       	rcall	.-422    	; 0x6dcc <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    6f72:	ec 2f       	mov	r30, r28
    6f74:	f0 e0       	ldi	r31, 0x00	; 0
    6f76:	ee 0f       	add	r30, r30
    6f78:	ff 1f       	adc	r31, r31
    6f7a:	ef 5f       	subi	r30, 0xFF	; 255
    6f7c:	f3 4f       	sbci	r31, 0xF3	; 243
    6f7e:	a5 91       	lpm	r26, Z+
    6f80:	b4 91       	lpm	r27, Z
    6f82:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    6f84:	ed 23       	and	r30, r29
    6f86:	81 e0       	ldi	r24, 0x01	; 1
    6f88:	90 e0       	ldi	r25, 0x00	; 0
    6f8a:	21 f4       	brne	.+8      	; 0x6f94 <digitalRead+0x4a>
    6f8c:	80 e0       	ldi	r24, 0x00	; 0
    6f8e:	02 c0       	rjmp	.+4      	; 0x6f94 <digitalRead+0x4a>
    6f90:	80 e0       	ldi	r24, 0x00	; 0
    6f92:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    6f94:	df 91       	pop	r29
    6f96:	cf 91       	pop	r28
    6f98:	08 95       	ret

00006f9a <pulseIn>:
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
    6f9a:	0f 93       	push	r16
    6f9c:	1f 93       	push	r17
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
    6f9e:	90 e0       	ldi	r25, 0x00	; 0
    6fa0:	fc 01       	movw	r30, r24
    6fa2:	eb 58       	subi	r30, 0x8B	; 139
    6fa4:	f4 4f       	sbci	r31, 0xF4	; 244
    6fa6:	74 91       	lpm	r23, Z
	uint8_t port = digitalPinToPort(pin);
    6fa8:	fc 01       	movw	r30, r24
    6faa:	e5 54       	subi	r30, 0x45	; 69
    6fac:	f4 4f       	sbci	r31, 0xF4	; 244
    6fae:	e4 91       	lpm	r30, Z
	uint8_t stateMask = (state ? bit : 0);
    6fb0:	66 23       	and	r22, r22
    6fb2:	11 f0       	breq	.+4      	; 0x6fb8 <pulseIn+0x1e>
    6fb4:	67 2f       	mov	r22, r23
    6fb6:	01 c0       	rjmp	.+2      	; 0x6fba <pulseIn+0x20>
    6fb8:	60 e0       	ldi	r22, 0x00	; 0

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
    6fba:	f0 e0       	ldi	r31, 0x00	; 0
    6fbc:	ee 0f       	add	r30, r30
    6fbe:	ff 1f       	adc	r31, r31
    6fc0:	ef 5f       	subi	r30, 0xFF	; 255
    6fc2:	f3 4f       	sbci	r31, 0xF3	; 243
    6fc4:	85 91       	lpm	r24, Z+
    6fc6:	94 91       	lpm	r25, Z
    6fc8:	89 01       	movw	r16, r18
    6fca:	9a 01       	movw	r18, r20
    6fcc:	3f 70       	andi	r19, 0x0F	; 15
    6fce:	46 2f       	mov	r20, r22
    6fd0:	67 2f       	mov	r22, r23
    6fd2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <countPulseASM>

	// prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
	if (width)
    6fd6:	61 15       	cp	r22, r1
    6fd8:	71 05       	cpc	r23, r1
    6fda:	81 05       	cpc	r24, r1
    6fdc:	91 05       	cpc	r25, r1
    6fde:	49 f0       	breq	.+18     	; 0x6ff2 <pulseIn+0x58>
		return clockCyclesToMicroseconds(width * 16 + 16);
    6fe0:	dc 01       	movw	r26, r24
    6fe2:	cb 01       	movw	r24, r22
    6fe4:	01 96       	adiw	r24, 0x01	; 1
    6fe6:	a1 1d       	adc	r26, r1
    6fe8:	b1 1d       	adc	r27, r1
    6fea:	bc 01       	movw	r22, r24
    6fec:	cd 01       	movw	r24, r26
    6fee:	9f 70       	andi	r25, 0x0F	; 15
    6ff0:	03 c0       	rjmp	.+6      	; 0x6ff8 <pulseIn+0x5e>
	else
		return 0;
    6ff2:	60 e0       	ldi	r22, 0x00	; 0
    6ff4:	70 e0       	ldi	r23, 0x00	; 0
    6ff6:	cb 01       	movw	r24, r22
}
    6ff8:	1f 91       	pop	r17
    6ffa:	0f 91       	pop	r16
    6ffc:	08 95       	ret

00006ffe <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    6ffe:	4f 92       	push	r4
    7000:	5f 92       	push	r5
    7002:	6f 92       	push	r6
    7004:	7f 92       	push	r7
    7006:	af 92       	push	r10
    7008:	bf 92       	push	r11
    700a:	cf 92       	push	r12
    700c:	df 92       	push	r13
    700e:	ef 92       	push	r14
    7010:	ff 92       	push	r15
    7012:	0f 93       	push	r16
    7014:	1f 93       	push	r17
    7016:	cf 93       	push	r28
    7018:	df 93       	push	r29
    701a:	cd b7       	in	r28, 0x3d	; 61
    701c:	de b7       	in	r29, 0x3e	; 62
    701e:	29 01       	movw	r4, r18
    7020:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    7022:	9b 01       	movw	r18, r22
    7024:	ac 01       	movw	r20, r24
    7026:	24 19       	sub	r18, r4
    7028:	35 09       	sbc	r19, r5
    702a:	46 09       	sbc	r20, r6
    702c:	57 09       	sbc	r21, r7
    702e:	8a 89       	ldd	r24, Y+18	; 0x12
    7030:	9b 89       	ldd	r25, Y+19	; 0x13
    7032:	ac 89       	ldd	r26, Y+20	; 0x14
    7034:	bd 89       	ldd	r27, Y+21	; 0x15
    7036:	bc 01       	movw	r22, r24
    7038:	cd 01       	movw	r24, r26
    703a:	6a 19       	sub	r22, r10
    703c:	7b 09       	sbc	r23, r11
    703e:	8c 09       	sbc	r24, r12
    7040:	9d 09       	sbc	r25, r13
    7042:	9b d2       	rcall	.+1334   	; 0x757a <__mulsi3>
    7044:	a8 01       	movw	r20, r16
    7046:	97 01       	movw	r18, r14
    7048:	24 19       	sub	r18, r4
    704a:	35 09       	sbc	r19, r5
    704c:	46 09       	sbc	r20, r6
    704e:	57 09       	sbc	r21, r7
    7050:	d1 d2       	rcall	.+1442   	; 0x75f4 <__divmodsi4>
    7052:	ca 01       	movw	r24, r20
    7054:	b9 01       	movw	r22, r18
    7056:	6a 0d       	add	r22, r10
    7058:	7b 1d       	adc	r23, r11
    705a:	8c 1d       	adc	r24, r12
    705c:	9d 1d       	adc	r25, r13
}
    705e:	df 91       	pop	r29
    7060:	cf 91       	pop	r28
    7062:	1f 91       	pop	r17
    7064:	0f 91       	pop	r16
    7066:	ff 90       	pop	r15
    7068:	ef 90       	pop	r14
    706a:	df 90       	pop	r13
    706c:	cf 90       	pop	r12
    706e:	bf 90       	pop	r11
    7070:	af 90       	pop	r10
    7072:	7f 90       	pop	r7
    7074:	6f 90       	pop	r6
    7076:	5f 90       	pop	r5
    7078:	4f 90       	pop	r4
    707a:	08 95       	ret

0000707c <_ZNK6String14StringIfHelperEv>:
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
	buffer[len] = 0;
}
    707c:	08 95       	ret

0000707e <_ZN6StringD1Ev>:
    707e:	fc 01       	movw	r30, r24
    7080:	80 81       	ld	r24, Z
    7082:	91 81       	ldd	r25, Z+1	; 0x01
    7084:	00 97       	sbiw	r24, 0x00	; 0
    7086:	09 f0       	breq	.+2      	; 0x708a <_ZN6StringD1Ev+0xc>
    7088:	8a c3       	rjmp	.+1812   	; 0x779e <free>
    708a:	08 95       	ret

0000708c <_ZN6String10invalidateEv>:
    708c:	cf 93       	push	r28
    708e:	df 93       	push	r29
    7090:	ec 01       	movw	r28, r24
    7092:	88 81       	ld	r24, Y
    7094:	99 81       	ldd	r25, Y+1	; 0x01
    7096:	00 97       	sbiw	r24, 0x00	; 0
    7098:	09 f0       	breq	.+2      	; 0x709c <_ZN6String10invalidateEv+0x10>
    709a:	81 d3       	rcall	.+1794   	; 0x779e <free>
    709c:	19 82       	std	Y+1, r1	; 0x01
    709e:	18 82       	st	Y, r1
    70a0:	1d 82       	std	Y+5, r1	; 0x05
    70a2:	1c 82       	std	Y+4, r1	; 0x04
    70a4:	1b 82       	std	Y+3, r1	; 0x03
    70a6:	1a 82       	std	Y+2, r1	; 0x02
    70a8:	df 91       	pop	r29
    70aa:	cf 91       	pop	r28
    70ac:	08 95       	ret

000070ae <_ZN6String12changeBufferEj>:
    70ae:	0f 93       	push	r16
    70b0:	1f 93       	push	r17
    70b2:	cf 93       	push	r28
    70b4:	df 93       	push	r29
    70b6:	ec 01       	movw	r28, r24
    70b8:	8b 01       	movw	r16, r22
    70ba:	6f 5f       	subi	r22, 0xFF	; 255
    70bc:	7f 4f       	sbci	r23, 0xFF	; 255
    70be:	88 81       	ld	r24, Y
    70c0:	99 81       	ldd	r25, Y+1	; 0x01
    70c2:	f6 d3       	rcall	.+2028   	; 0x78b0 <realloc>
    70c4:	00 97       	sbiw	r24, 0x00	; 0
    70c6:	31 f0       	breq	.+12     	; 0x70d4 <_ZN6String12changeBufferEj+0x26>
    70c8:	99 83       	std	Y+1, r25	; 0x01
    70ca:	88 83       	st	Y, r24
    70cc:	1b 83       	std	Y+3, r17	; 0x03
    70ce:	0a 83       	std	Y+2, r16	; 0x02
    70d0:	81 e0       	ldi	r24, 0x01	; 1
    70d2:	01 c0       	rjmp	.+2      	; 0x70d6 <_ZN6String12changeBufferEj+0x28>
    70d4:	80 e0       	ldi	r24, 0x00	; 0
    70d6:	df 91       	pop	r29
    70d8:	cf 91       	pop	r28
    70da:	1f 91       	pop	r17
    70dc:	0f 91       	pop	r16
    70de:	08 95       	ret

000070e0 <_ZN6String7reserveEj>:
    70e0:	cf 93       	push	r28
    70e2:	df 93       	push	r29
    70e4:	ec 01       	movw	r28, r24
    70e6:	88 81       	ld	r24, Y
    70e8:	99 81       	ldd	r25, Y+1	; 0x01
    70ea:	89 2b       	or	r24, r25
    70ec:	29 f0       	breq	.+10     	; 0x70f8 <_ZN6String7reserveEj+0x18>
    70ee:	8a 81       	ldd	r24, Y+2	; 0x02
    70f0:	9b 81       	ldd	r25, Y+3	; 0x03
    70f2:	86 17       	cp	r24, r22
    70f4:	97 07       	cpc	r25, r23
    70f6:	58 f4       	brcc	.+22     	; 0x710e <_ZN6String7reserveEj+0x2e>
    70f8:	ce 01       	movw	r24, r28
    70fa:	d9 df       	rcall	.-78     	; 0x70ae <_ZN6String12changeBufferEj>
    70fc:	88 23       	and	r24, r24
    70fe:	41 f0       	breq	.+16     	; 0x7110 <_ZN6String7reserveEj+0x30>
    7100:	8c 81       	ldd	r24, Y+4	; 0x04
    7102:	9d 81       	ldd	r25, Y+5	; 0x05
    7104:	89 2b       	or	r24, r25
    7106:	19 f4       	brne	.+6      	; 0x710e <_ZN6String7reserveEj+0x2e>
    7108:	e8 81       	ld	r30, Y
    710a:	f9 81       	ldd	r31, Y+1	; 0x01
    710c:	10 82       	st	Z, r1
    710e:	81 e0       	ldi	r24, 0x01	; 1
    7110:	df 91       	pop	r29
    7112:	cf 91       	pop	r28
    7114:	08 95       	ret

00007116 <_ZN6String4copyEPKcj>:
    7116:	ef 92       	push	r14
    7118:	ff 92       	push	r15
    711a:	0f 93       	push	r16
    711c:	1f 93       	push	r17
    711e:	cf 93       	push	r28
    7120:	df 93       	push	r29
    7122:	ec 01       	movw	r28, r24
    7124:	7b 01       	movw	r14, r22
    7126:	8a 01       	movw	r16, r20
    7128:	ba 01       	movw	r22, r20
    712a:	da df       	rcall	.-76     	; 0x70e0 <_ZN6String7reserveEj>
    712c:	81 11       	cpse	r24, r1
    712e:	03 c0       	rjmp	.+6      	; 0x7136 <_ZN6String4copyEPKcj+0x20>
    7130:	ce 01       	movw	r24, r28
    7132:	ac df       	rcall	.-168    	; 0x708c <_ZN6String10invalidateEv>
    7134:	06 c0       	rjmp	.+12     	; 0x7142 <_ZN6String4copyEPKcj+0x2c>
    7136:	1d 83       	std	Y+5, r17	; 0x05
    7138:	0c 83       	std	Y+4, r16	; 0x04
    713a:	b7 01       	movw	r22, r14
    713c:	88 81       	ld	r24, Y
    713e:	99 81       	ldd	r25, Y+1	; 0x01
    7140:	ed d4       	rcall	.+2522   	; 0x7b1c <strcpy>
    7142:	ce 01       	movw	r24, r28
    7144:	df 91       	pop	r29
    7146:	cf 91       	pop	r28
    7148:	1f 91       	pop	r17
    714a:	0f 91       	pop	r16
    714c:	ff 90       	pop	r15
    714e:	ef 90       	pop	r14
    7150:	08 95       	ret

00007152 <_ZN6StringC1EPKc>:
    7152:	fc 01       	movw	r30, r24
    7154:	11 82       	std	Z+1, r1	; 0x01
    7156:	10 82       	st	Z, r1
    7158:	13 82       	std	Z+3, r1	; 0x03
    715a:	12 82       	std	Z+2, r1	; 0x02
    715c:	15 82       	std	Z+5, r1	; 0x05
    715e:	14 82       	std	Z+4, r1	; 0x04
    7160:	61 15       	cp	r22, r1
    7162:	71 05       	cpc	r23, r1
    7164:	49 f0       	breq	.+18     	; 0x7178 <_ZN6StringC1EPKc+0x26>
    7166:	fb 01       	movw	r30, r22
    7168:	01 90       	ld	r0, Z+
    716a:	00 20       	and	r0, r0
    716c:	e9 f7       	brne	.-6      	; 0x7168 <_ZN6StringC1EPKc+0x16>
    716e:	31 97       	sbiw	r30, 0x01	; 1
    7170:	af 01       	movw	r20, r30
    7172:	46 1b       	sub	r20, r22
    7174:	57 0b       	sbc	r21, r23
    7176:	cf cf       	rjmp	.-98     	; 0x7116 <_ZN6String4copyEPKcj>
    7178:	08 95       	ret

0000717a <_ZN6String4moveERS_>:
    717a:	0f 93       	push	r16
    717c:	1f 93       	push	r17
    717e:	cf 93       	push	r28
    7180:	df 93       	push	r29
    7182:	8c 01       	movw	r16, r24
    7184:	eb 01       	movw	r28, r22
    7186:	fc 01       	movw	r30, r24
    7188:	80 81       	ld	r24, Z
    718a:	91 81       	ldd	r25, Z+1	; 0x01
    718c:	00 97       	sbiw	r24, 0x00	; 0
    718e:	c1 f0       	breq	.+48     	; 0x71c0 <_ZN6String4moveERS_+0x46>
    7190:	68 81       	ld	r22, Y
    7192:	79 81       	ldd	r23, Y+1	; 0x01
    7194:	61 15       	cp	r22, r1
    7196:	71 05       	cpc	r23, r1
    7198:	91 f0       	breq	.+36     	; 0x71be <_ZN6String4moveERS_+0x44>
    719a:	2e e3       	ldi	r18, 0x3E	; 62
    719c:	38 e3       	ldi	r19, 0x38	; 56
    719e:	23 2b       	or	r18, r19
    71a0:	71 f0       	breq	.+28     	; 0x71be <_ZN6String4moveERS_+0x44>
    71a2:	42 81       	ldd	r20, Z+2	; 0x02
    71a4:	53 81       	ldd	r21, Z+3	; 0x03
    71a6:	2c 81       	ldd	r18, Y+4	; 0x04
    71a8:	3d 81       	ldd	r19, Y+5	; 0x05
    71aa:	42 17       	cp	r20, r18
    71ac:	53 07       	cpc	r21, r19
    71ae:	38 f0       	brcs	.+14     	; 0x71be <_ZN6String4moveERS_+0x44>
    71b0:	b5 d4       	rcall	.+2410   	; 0x7b1c <strcpy>
    71b2:	8c 81       	ldd	r24, Y+4	; 0x04
    71b4:	9d 81       	ldd	r25, Y+5	; 0x05
    71b6:	f8 01       	movw	r30, r16
    71b8:	95 83       	std	Z+5, r25	; 0x05
    71ba:	84 83       	std	Z+4, r24	; 0x04
    71bc:	12 c0       	rjmp	.+36     	; 0x71e2 <_ZN6String4moveERS_+0x68>
    71be:	ef d2       	rcall	.+1502   	; 0x779e <free>
    71c0:	88 81       	ld	r24, Y
    71c2:	99 81       	ldd	r25, Y+1	; 0x01
    71c4:	f8 01       	movw	r30, r16
    71c6:	91 83       	std	Z+1, r25	; 0x01
    71c8:	80 83       	st	Z, r24
    71ca:	8a 81       	ldd	r24, Y+2	; 0x02
    71cc:	9b 81       	ldd	r25, Y+3	; 0x03
    71ce:	93 83       	std	Z+3, r25	; 0x03
    71d0:	82 83       	std	Z+2, r24	; 0x02
    71d2:	8c 81       	ldd	r24, Y+4	; 0x04
    71d4:	9d 81       	ldd	r25, Y+5	; 0x05
    71d6:	95 83       	std	Z+5, r25	; 0x05
    71d8:	84 83       	std	Z+4, r24	; 0x04
    71da:	19 82       	std	Y+1, r1	; 0x01
    71dc:	18 82       	st	Y, r1
    71de:	1b 82       	std	Y+3, r1	; 0x03
    71e0:	1a 82       	std	Y+2, r1	; 0x02
    71e2:	1d 82       	std	Y+5, r1	; 0x05
    71e4:	1c 82       	std	Y+4, r1	; 0x04
    71e6:	df 91       	pop	r29
    71e8:	cf 91       	pop	r28
    71ea:	1f 91       	pop	r17
    71ec:	0f 91       	pop	r16
    71ee:	08 95       	ret

000071f0 <_ZN6StringaSEOS_>:
    71f0:	cf 93       	push	r28
    71f2:	df 93       	push	r29
    71f4:	ec 01       	movw	r28, r24
    71f6:	86 17       	cp	r24, r22
    71f8:	97 07       	cpc	r25, r23
    71fa:	09 f0       	breq	.+2      	; 0x71fe <_ZN6StringaSEOS_+0xe>
    71fc:	be df       	rcall	.-132    	; 0x717a <_ZN6String4moveERS_>
    71fe:	ce 01       	movw	r24, r28
    7200:	df 91       	pop	r29
    7202:	cf 91       	pop	r28
    7204:	08 95       	ret

00007206 <_ZN6StringaSEPKc>:
    7206:	cf 93       	push	r28
    7208:	df 93       	push	r29
    720a:	ec 01       	movw	r28, r24
    720c:	61 15       	cp	r22, r1
    720e:	71 05       	cpc	r23, r1
    7210:	51 f0       	breq	.+20     	; 0x7226 <_ZN6StringaSEPKc+0x20>
    7212:	fb 01       	movw	r30, r22
    7214:	01 90       	ld	r0, Z+
    7216:	00 20       	and	r0, r0
    7218:	e9 f7       	brne	.-6      	; 0x7214 <_ZN6StringaSEPKc+0xe>
    721a:	31 97       	sbiw	r30, 0x01	; 1
    721c:	af 01       	movw	r20, r30
    721e:	46 1b       	sub	r20, r22
    7220:	57 0b       	sbc	r21, r23
    7222:	79 df       	rcall	.-270    	; 0x7116 <_ZN6String4copyEPKcj>
    7224:	01 c0       	rjmp	.+2      	; 0x7228 <_ZN6StringaSEPKc+0x22>
    7226:	32 df       	rcall	.-412    	; 0x708c <_ZN6String10invalidateEv>
    7228:	ce 01       	movw	r24, r28
    722a:	df 91       	pop	r29
    722c:	cf 91       	pop	r28
    722e:	08 95       	ret

00007230 <_ZN6StringC1Ehh>:
    7230:	0f 93       	push	r16
    7232:	1f 93       	push	r17
    7234:	cf 93       	push	r28
    7236:	df 93       	push	r29
    7238:	cd b7       	in	r28, 0x3d	; 61
    723a:	de b7       	in	r29, 0x3e	; 62
    723c:	29 97       	sbiw	r28, 0x09	; 9
    723e:	0f b6       	in	r0, 0x3f	; 63
    7240:	f8 94       	cli
    7242:	de bf       	out	0x3e, r29	; 62
    7244:	0f be       	out	0x3f, r0	; 63
    7246:	cd bf       	out	0x3d, r28	; 61
    7248:	8c 01       	movw	r16, r24
    724a:	86 2f       	mov	r24, r22
    724c:	f8 01       	movw	r30, r16
    724e:	11 82       	std	Z+1, r1	; 0x01
    7250:	10 82       	st	Z, r1
    7252:	13 82       	std	Z+3, r1	; 0x03
    7254:	12 82       	std	Z+2, r1	; 0x02
    7256:	15 82       	std	Z+5, r1	; 0x05
    7258:	14 82       	std	Z+4, r1	; 0x04
    725a:	50 e0       	ldi	r21, 0x00	; 0
    725c:	be 01       	movw	r22, r28
    725e:	6f 5f       	subi	r22, 0xFF	; 255
    7260:	7f 4f       	sbci	r23, 0xFF	; 255
    7262:	90 e0       	ldi	r25, 0x00	; 0
    7264:	8b d4       	rcall	.+2326   	; 0x7b7c <utoa>
    7266:	be 01       	movw	r22, r28
    7268:	6f 5f       	subi	r22, 0xFF	; 255
    726a:	7f 4f       	sbci	r23, 0xFF	; 255
    726c:	c8 01       	movw	r24, r16
    726e:	cb df       	rcall	.-106    	; 0x7206 <_ZN6StringaSEPKc>
    7270:	29 96       	adiw	r28, 0x09	; 9
    7272:	0f b6       	in	r0, 0x3f	; 63
    7274:	f8 94       	cli
    7276:	de bf       	out	0x3e, r29	; 62
    7278:	0f be       	out	0x3f, r0	; 63
    727a:	cd bf       	out	0x3d, r28	; 61
    727c:	df 91       	pop	r29
    727e:	cf 91       	pop	r28
    7280:	1f 91       	pop	r17
    7282:	0f 91       	pop	r16
    7284:	08 95       	ret

00007286 <_ZN6StringC1Eih>:
    7286:	0f 93       	push	r16
    7288:	1f 93       	push	r17
    728a:	cf 93       	push	r28
    728c:	df 93       	push	r29
    728e:	cd b7       	in	r28, 0x3d	; 61
    7290:	de b7       	in	r29, 0x3e	; 62
    7292:	62 97       	sbiw	r28, 0x12	; 18
    7294:	0f b6       	in	r0, 0x3f	; 63
    7296:	f8 94       	cli
    7298:	de bf       	out	0x3e, r29	; 62
    729a:	0f be       	out	0x3f, r0	; 63
    729c:	cd bf       	out	0x3d, r28	; 61
    729e:	8c 01       	movw	r16, r24
    72a0:	cb 01       	movw	r24, r22
    72a2:	f8 01       	movw	r30, r16
    72a4:	11 82       	std	Z+1, r1	; 0x01
    72a6:	10 82       	st	Z, r1
    72a8:	13 82       	std	Z+3, r1	; 0x03
    72aa:	12 82       	std	Z+2, r1	; 0x02
    72ac:	15 82       	std	Z+5, r1	; 0x05
    72ae:	14 82       	std	Z+4, r1	; 0x04
    72b0:	50 e0       	ldi	r21, 0x00	; 0
    72b2:	be 01       	movw	r22, r28
    72b4:	6f 5f       	subi	r22, 0xFF	; 255
    72b6:	7f 4f       	sbci	r23, 0xFF	; 255
    72b8:	38 d4       	rcall	.+2160   	; 0x7b2a <itoa>
    72ba:	be 01       	movw	r22, r28
    72bc:	6f 5f       	subi	r22, 0xFF	; 255
    72be:	7f 4f       	sbci	r23, 0xFF	; 255
    72c0:	c8 01       	movw	r24, r16
    72c2:	a1 df       	rcall	.-190    	; 0x7206 <_ZN6StringaSEPKc>
    72c4:	62 96       	adiw	r28, 0x12	; 18
    72c6:	0f b6       	in	r0, 0x3f	; 63
    72c8:	f8 94       	cli
    72ca:	de bf       	out	0x3e, r29	; 62
    72cc:	0f be       	out	0x3f, r0	; 63
    72ce:	cd bf       	out	0x3d, r28	; 61
    72d0:	df 91       	pop	r29
    72d2:	cf 91       	pop	r28
    72d4:	1f 91       	pop	r17
    72d6:	0f 91       	pop	r16
    72d8:	08 95       	ret

000072da <_ZN6String6concatEPKcj>:
    72da:	ef 92       	push	r14
    72dc:	ff 92       	push	r15
    72de:	0f 93       	push	r16
    72e0:	1f 93       	push	r17
    72e2:	cf 93       	push	r28
    72e4:	df 93       	push	r29
    72e6:	61 15       	cp	r22, r1
    72e8:	71 05       	cpc	r23, r1
    72ea:	11 f4       	brne	.+4      	; 0x72f0 <_ZN6String6concatEPKcj+0x16>
    72ec:	80 e0       	ldi	r24, 0x00	; 0
    72ee:	1a c0       	rjmp	.+52     	; 0x7324 <_ZN6String6concatEPKcj+0x4a>
    72f0:	41 15       	cp	r20, r1
    72f2:	51 05       	cpc	r21, r1
    72f4:	b1 f0       	breq	.+44     	; 0x7322 <_ZN6String6concatEPKcj+0x48>
    72f6:	7b 01       	movw	r14, r22
    72f8:	ec 01       	movw	r28, r24
    72fa:	8c 81       	ldd	r24, Y+4	; 0x04
    72fc:	9d 81       	ldd	r25, Y+5	; 0x05
    72fe:	8a 01       	movw	r16, r20
    7300:	08 0f       	add	r16, r24
    7302:	19 1f       	adc	r17, r25
    7304:	b8 01       	movw	r22, r16
    7306:	ce 01       	movw	r24, r28
    7308:	eb de       	rcall	.-554    	; 0x70e0 <_ZN6String7reserveEj>
    730a:	88 23       	and	r24, r24
    730c:	79 f3       	breq	.-34     	; 0x72ec <_ZN6String6concatEPKcj+0x12>
    730e:	28 81       	ld	r18, Y
    7310:	39 81       	ldd	r19, Y+1	; 0x01
    7312:	8c 81       	ldd	r24, Y+4	; 0x04
    7314:	9d 81       	ldd	r25, Y+5	; 0x05
    7316:	b7 01       	movw	r22, r14
    7318:	82 0f       	add	r24, r18
    731a:	93 1f       	adc	r25, r19
    731c:	ff d3       	rcall	.+2046   	; 0x7b1c <strcpy>
    731e:	1d 83       	std	Y+5, r17	; 0x05
    7320:	0c 83       	std	Y+4, r16	; 0x04
    7322:	81 e0       	ldi	r24, 0x01	; 1
    7324:	df 91       	pop	r29
    7326:	cf 91       	pop	r28
    7328:	1f 91       	pop	r17
    732a:	0f 91       	pop	r16
    732c:	ff 90       	pop	r15
    732e:	ef 90       	pop	r14
    7330:	08 95       	ret

00007332 <_ZN6String6concatERKS_>:
    7332:	fb 01       	movw	r30, r22
    7334:	44 81       	ldd	r20, Z+4	; 0x04
    7336:	55 81       	ldd	r21, Z+5	; 0x05
    7338:	60 81       	ld	r22, Z
    733a:	71 81       	ldd	r23, Z+1	; 0x01
    733c:	ce cf       	rjmp	.-100    	; 0x72da <_ZN6String6concatEPKcj>

0000733e <_ZN6String6concatEPKc>:
    733e:	61 15       	cp	r22, r1
    7340:	71 05       	cpc	r23, r1
    7342:	49 f0       	breq	.+18     	; 0x7356 <_ZN6String6concatEPKc+0x18>
    7344:	fb 01       	movw	r30, r22
    7346:	01 90       	ld	r0, Z+
    7348:	00 20       	and	r0, r0
    734a:	e9 f7       	brne	.-6      	; 0x7346 <_ZN6String6concatEPKc+0x8>
    734c:	31 97       	sbiw	r30, 0x01	; 1
    734e:	af 01       	movw	r20, r30
    7350:	46 1b       	sub	r20, r22
    7352:	57 0b       	sbc	r21, r23
    7354:	c2 cf       	rjmp	.-124    	; 0x72da <_ZN6String6concatEPKcj>
    7356:	80 e0       	ldi	r24, 0x00	; 0
    7358:	08 95       	ret

0000735a <_ZN6String6concatEc>:
    735a:	cf 93       	push	r28
    735c:	df 93       	push	r29
    735e:	1f 92       	push	r1
    7360:	1f 92       	push	r1
    7362:	cd b7       	in	r28, 0x3d	; 61
    7364:	de b7       	in	r29, 0x3e	; 62
    7366:	69 83       	std	Y+1, r22	; 0x01
    7368:	1a 82       	std	Y+2, r1	; 0x02
    736a:	41 e0       	ldi	r20, 0x01	; 1
    736c:	50 e0       	ldi	r21, 0x00	; 0
    736e:	be 01       	movw	r22, r28
    7370:	6f 5f       	subi	r22, 0xFF	; 255
    7372:	7f 4f       	sbci	r23, 0xFF	; 255
    7374:	b2 df       	rcall	.-156    	; 0x72da <_ZN6String6concatEPKcj>
    7376:	0f 90       	pop	r0
    7378:	0f 90       	pop	r0
    737a:	df 91       	pop	r29
    737c:	cf 91       	pop	r28
    737e:	08 95       	ret

00007380 <_ZNK6String6equalsEPKc>:
    7380:	fc 01       	movw	r30, r24
    7382:	24 81       	ldd	r18, Z+4	; 0x04
    7384:	35 81       	ldd	r19, Z+5	; 0x05
    7386:	23 2b       	or	r18, r19
    7388:	31 f4       	brne	.+12     	; 0x7396 <_ZNK6String6equalsEPKc+0x16>
    738a:	21 e0       	ldi	r18, 0x01	; 1
    738c:	61 15       	cp	r22, r1
    738e:	71 05       	cpc	r23, r1
    7390:	99 f0       	breq	.+38     	; 0x73b8 <_ZNK6String6equalsEPKc+0x38>
    7392:	fb 01       	movw	r30, r22
    7394:	08 c0       	rjmp	.+16     	; 0x73a6 <_ZNK6String6equalsEPKc+0x26>
    7396:	fc 01       	movw	r30, r24
    7398:	80 81       	ld	r24, Z
    739a:	91 81       	ldd	r25, Z+1	; 0x01
    739c:	61 15       	cp	r22, r1
    739e:	71 05       	cpc	r23, r1
    73a0:	31 f4       	brne	.+12     	; 0x73ae <_ZNK6String6equalsEPKc+0x2e>
    73a2:	21 e0       	ldi	r18, 0x01	; 1
    73a4:	fc 01       	movw	r30, r24
    73a6:	80 81       	ld	r24, Z
    73a8:	88 23       	and	r24, r24
    73aa:	31 f0       	breq	.+12     	; 0x73b8 <_ZNK6String6equalsEPKc+0x38>
    73ac:	04 c0       	rjmp	.+8      	; 0x73b6 <_ZNK6String6equalsEPKc+0x36>
    73ae:	ad d3       	rcall	.+1882   	; 0x7b0a <strcmp>
    73b0:	21 e0       	ldi	r18, 0x01	; 1
    73b2:	89 2b       	or	r24, r25
    73b4:	09 f0       	breq	.+2      	; 0x73b8 <_ZNK6String6equalsEPKc+0x38>
    73b6:	20 e0       	ldi	r18, 0x00	; 0
    73b8:	82 2f       	mov	r24, r18
    73ba:	08 95       	ret

000073bc <_ZNK6String9substringEjj>:
    73bc:	bf 92       	push	r11
    73be:	cf 92       	push	r12
    73c0:	df 92       	push	r13
    73c2:	ef 92       	push	r14
    73c4:	ff 92       	push	r15
    73c6:	0f 93       	push	r16
    73c8:	1f 93       	push	r17
    73ca:	cf 93       	push	r28
    73cc:	df 93       	push	r29
    73ce:	7c 01       	movw	r14, r24
    73d0:	6b 01       	movw	r12, r22
    73d2:	8a 01       	movw	r16, r20
    73d4:	e9 01       	movw	r28, r18
    73d6:	24 17       	cp	r18, r20
    73d8:	35 07       	cpc	r19, r21
    73da:	20 f4       	brcc	.+8      	; 0x73e4 <_ZNK6String9substringEjj+0x28>
    73dc:	81 2f       	mov	r24, r17
    73de:	89 01       	movw	r16, r18
    73e0:	c4 2f       	mov	r28, r20
    73e2:	d8 2f       	mov	r29, r24
    73e4:	6e e5       	ldi	r22, 0x5E	; 94
    73e6:	73 e0       	ldi	r23, 0x03	; 3
    73e8:	c7 01       	movw	r24, r14
    73ea:	b3 de       	rcall	.-666    	; 0x7152 <_ZN6StringC1EPKc>
    73ec:	d6 01       	movw	r26, r12
    73ee:	14 96       	adiw	r26, 0x04	; 4
    73f0:	8d 91       	ld	r24, X+
    73f2:	9c 91       	ld	r25, X
    73f4:	15 97       	sbiw	r26, 0x05	; 5
    73f6:	08 17       	cp	r16, r24
    73f8:	19 07       	cpc	r17, r25
    73fa:	c0 f4       	brcc	.+48     	; 0x742c <_ZNK6String9substringEjj+0x70>
    73fc:	8c 17       	cp	r24, r28
    73fe:	9d 07       	cpc	r25, r29
    7400:	08 f4       	brcc	.+2      	; 0x7404 <_ZNK6String9substringEjj+0x48>
    7402:	ec 01       	movw	r28, r24
    7404:	d6 01       	movw	r26, r12
    7406:	ed 91       	ld	r30, X+
    7408:	fc 91       	ld	r31, X
    740a:	11 97       	sbiw	r26, 0x01	; 1
    740c:	ec 0f       	add	r30, r28
    740e:	fd 1f       	adc	r31, r29
    7410:	b0 80       	ld	r11, Z
    7412:	10 82       	st	Z, r1
    7414:	6d 91       	ld	r22, X+
    7416:	7c 91       	ld	r23, X
    7418:	60 0f       	add	r22, r16
    741a:	71 1f       	adc	r23, r17
    741c:	c7 01       	movw	r24, r14
    741e:	f3 de       	rcall	.-538    	; 0x7206 <_ZN6StringaSEPKc>
    7420:	d6 01       	movw	r26, r12
    7422:	ed 91       	ld	r30, X+
    7424:	fc 91       	ld	r31, X
    7426:	ec 0f       	add	r30, r28
    7428:	fd 1f       	adc	r31, r29
    742a:	b0 82       	st	Z, r11
    742c:	c7 01       	movw	r24, r14
    742e:	df 91       	pop	r29
    7430:	cf 91       	pop	r28
    7432:	1f 91       	pop	r17
    7434:	0f 91       	pop	r16
    7436:	ff 90       	pop	r15
    7438:	ef 90       	pop	r14
    743a:	df 90       	pop	r13
    743c:	cf 90       	pop	r12
    743e:	bf 90       	pop	r11
    7440:	08 95       	ret

00007442 <_ZN6String11toUpperCaseEv>:
    7442:	cf 93       	push	r28
    7444:	df 93       	push	r29
    7446:	fc 01       	movw	r30, r24
    7448:	c0 81       	ld	r28, Z
    744a:	d1 81       	ldd	r29, Z+1	; 0x01
    744c:	20 97       	sbiw	r28, 0x00	; 0
    744e:	39 f0       	breq	.+14     	; 0x745e <_ZN6String11toUpperCaseEv+0x1c>
    7450:	88 81       	ld	r24, Y
    7452:	88 23       	and	r24, r24
    7454:	21 f0       	breq	.+8      	; 0x745e <_ZN6String11toUpperCaseEv+0x1c>
    7456:	90 e0       	ldi	r25, 0x00	; 0
    7458:	40 d3       	rcall	.+1664   	; 0x7ada <toupper>
    745a:	89 93       	st	Y+, r24
    745c:	f9 cf       	rjmp	.-14     	; 0x7450 <_ZN6String11toUpperCaseEv+0xe>
    745e:	df 91       	pop	r29
    7460:	cf 91       	pop	r28
    7462:	08 95       	ret

00007464 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    7464:	fc 01       	movw	r30, r24
    7466:	80 81       	ld	r24, Z
    7468:	91 81       	ldd	r25, Z+1	; 0x01
    746a:	00 97       	sbiw	r24, 0x00	; 0
    746c:	09 f0       	breq	.+2      	; 0x7470 <_ZNK6String5toIntEv+0xc>
    746e:	07 c3       	rjmp	.+1550   	; 0x7a7e <atol>
	return 0;
}
    7470:	60 e0       	ldi	r22, 0x00	; 0
    7472:	70 e0       	ldi	r23, 0x00	; 0
    7474:	cb 01       	movw	r24, r22
    7476:	08 95       	ret

00007478 <_ZNK6String8toDoubleEv>:
	return float(toDouble());
}

double String::toDouble(void) const
{
	if (buffer) return atof(buffer);
    7478:	fc 01       	movw	r30, r24
    747a:	80 81       	ld	r24, Z
    747c:	91 81       	ldd	r25, Z+1	; 0x01
    747e:	00 97       	sbiw	r24, 0x00	; 0
    7480:	09 f0       	breq	.+2      	; 0x7484 <_ZNK6String8toDoubleEv+0xc>
    7482:	fa c2       	rjmp	.+1524   	; 0x7a78 <atof>
	return 0;
}
    7484:	60 e0       	ldi	r22, 0x00	; 0
    7486:	70 e0       	ldi	r23, 0x00	; 0
    7488:	cb 01       	movw	r24, r22
    748a:	08 95       	ret

0000748c <_ZNK6String7toFloatEv>:
	return 0;
}

float String::toFloat(void) const
{
	return float(toDouble());
    748c:	f5 cf       	rjmp	.-22     	; 0x7478 <_ZNK6String8toDoubleEv>

0000748e <__divsf3>:
    748e:	12 d0       	rcall	.+36     	; 0x74b4 <__divsf3x>
    7490:	0c 94 4d 2c 	jmp	0x589a	; 0x589a <__fp_round>
    7494:	0e 94 46 2c 	call	0x588c	; 0x588c <__fp_pscB>
    7498:	58 f0       	brcs	.+22     	; 0x74b0 <__divsf3+0x22>
    749a:	0e 94 3f 2c 	call	0x587e	; 0x587e <__fp_pscA>
    749e:	40 f0       	brcs	.+16     	; 0x74b0 <__divsf3+0x22>
    74a0:	29 f4       	brne	.+10     	; 0x74ac <__divsf3+0x1e>
    74a2:	5f 3f       	cpi	r21, 0xFF	; 255
    74a4:	29 f0       	breq	.+10     	; 0x74b0 <__divsf3+0x22>
    74a6:	0c 94 36 2c 	jmp	0x586c	; 0x586c <__fp_inf>
    74aa:	51 11       	cpse	r21, r1
    74ac:	0c 94 81 2c 	jmp	0x5902	; 0x5902 <__fp_szero>
    74b0:	0c 94 3c 2c 	jmp	0x5878	; 0x5878 <__fp_nan>

000074b4 <__divsf3x>:
    74b4:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <__fp_split3>
    74b8:	68 f3       	brcs	.-38     	; 0x7494 <__divsf3+0x6>

000074ba <__divsf3_pse>:
    74ba:	99 23       	and	r25, r25
    74bc:	b1 f3       	breq	.-20     	; 0x74aa <__divsf3+0x1c>
    74be:	55 23       	and	r21, r21
    74c0:	91 f3       	breq	.-28     	; 0x74a6 <__divsf3+0x18>
    74c2:	95 1b       	sub	r25, r21
    74c4:	55 0b       	sbc	r21, r21
    74c6:	bb 27       	eor	r27, r27
    74c8:	aa 27       	eor	r26, r26
    74ca:	62 17       	cp	r22, r18
    74cc:	73 07       	cpc	r23, r19
    74ce:	84 07       	cpc	r24, r20
    74d0:	38 f0       	brcs	.+14     	; 0x74e0 <__divsf3_pse+0x26>
    74d2:	9f 5f       	subi	r25, 0xFF	; 255
    74d4:	5f 4f       	sbci	r21, 0xFF	; 255
    74d6:	22 0f       	add	r18, r18
    74d8:	33 1f       	adc	r19, r19
    74da:	44 1f       	adc	r20, r20
    74dc:	aa 1f       	adc	r26, r26
    74de:	a9 f3       	breq	.-22     	; 0x74ca <__divsf3_pse+0x10>
    74e0:	35 d0       	rcall	.+106    	; 0x754c <__divsf3_pse+0x92>
    74e2:	0e 2e       	mov	r0, r30
    74e4:	3a f0       	brmi	.+14     	; 0x74f4 <__divsf3_pse+0x3a>
    74e6:	e0 e8       	ldi	r30, 0x80	; 128
    74e8:	32 d0       	rcall	.+100    	; 0x754e <__divsf3_pse+0x94>
    74ea:	91 50       	subi	r25, 0x01	; 1
    74ec:	50 40       	sbci	r21, 0x00	; 0
    74ee:	e6 95       	lsr	r30
    74f0:	00 1c       	adc	r0, r0
    74f2:	ca f7       	brpl	.-14     	; 0x74e6 <__divsf3_pse+0x2c>
    74f4:	2b d0       	rcall	.+86     	; 0x754c <__divsf3_pse+0x92>
    74f6:	fe 2f       	mov	r31, r30
    74f8:	29 d0       	rcall	.+82     	; 0x754c <__divsf3_pse+0x92>
    74fa:	66 0f       	add	r22, r22
    74fc:	77 1f       	adc	r23, r23
    74fe:	88 1f       	adc	r24, r24
    7500:	bb 1f       	adc	r27, r27
    7502:	26 17       	cp	r18, r22
    7504:	37 07       	cpc	r19, r23
    7506:	48 07       	cpc	r20, r24
    7508:	ab 07       	cpc	r26, r27
    750a:	b0 e8       	ldi	r27, 0x80	; 128
    750c:	09 f0       	breq	.+2      	; 0x7510 <__divsf3_pse+0x56>
    750e:	bb 0b       	sbc	r27, r27
    7510:	80 2d       	mov	r24, r0
    7512:	bf 01       	movw	r22, r30
    7514:	ff 27       	eor	r31, r31
    7516:	93 58       	subi	r25, 0x83	; 131
    7518:	5f 4f       	sbci	r21, 0xFF	; 255
    751a:	3a f0       	brmi	.+14     	; 0x752a <__divsf3_pse+0x70>
    751c:	9e 3f       	cpi	r25, 0xFE	; 254
    751e:	51 05       	cpc	r21, r1
    7520:	78 f0       	brcs	.+30     	; 0x7540 <__divsf3_pse+0x86>
    7522:	0c 94 36 2c 	jmp	0x586c	; 0x586c <__fp_inf>
    7526:	0c 94 81 2c 	jmp	0x5902	; 0x5902 <__fp_szero>
    752a:	5f 3f       	cpi	r21, 0xFF	; 255
    752c:	e4 f3       	brlt	.-8      	; 0x7526 <__divsf3_pse+0x6c>
    752e:	98 3e       	cpi	r25, 0xE8	; 232
    7530:	d4 f3       	brlt	.-12     	; 0x7526 <__divsf3_pse+0x6c>
    7532:	86 95       	lsr	r24
    7534:	77 95       	ror	r23
    7536:	67 95       	ror	r22
    7538:	b7 95       	ror	r27
    753a:	f7 95       	ror	r31
    753c:	9f 5f       	subi	r25, 0xFF	; 255
    753e:	c9 f7       	brne	.-14     	; 0x7532 <__divsf3_pse+0x78>
    7540:	88 0f       	add	r24, r24
    7542:	91 1d       	adc	r25, r1
    7544:	96 95       	lsr	r25
    7546:	87 95       	ror	r24
    7548:	97 f9       	bld	r25, 7
    754a:	08 95       	ret
    754c:	e1 e0       	ldi	r30, 0x01	; 1
    754e:	66 0f       	add	r22, r22
    7550:	77 1f       	adc	r23, r23
    7552:	88 1f       	adc	r24, r24
    7554:	bb 1f       	adc	r27, r27
    7556:	62 17       	cp	r22, r18
    7558:	73 07       	cpc	r23, r19
    755a:	84 07       	cpc	r24, r20
    755c:	ba 07       	cpc	r27, r26
    755e:	20 f0       	brcs	.+8      	; 0x7568 <__divsf3_pse+0xae>
    7560:	62 1b       	sub	r22, r18
    7562:	73 0b       	sbc	r23, r19
    7564:	84 0b       	sbc	r24, r20
    7566:	ba 0b       	sbc	r27, r26
    7568:	ee 1f       	adc	r30, r30
    756a:	88 f7       	brcc	.-30     	; 0x754e <__divsf3_pse+0x94>
    756c:	e0 95       	com	r30
    756e:	08 95       	ret

00007570 <__unordsf2>:
    7570:	0e 94 12 2c 	call	0x5824	; 0x5824 <__fp_cmp>
    7574:	88 0b       	sbc	r24, r24
    7576:	99 0b       	sbc	r25, r25
    7578:	08 95       	ret

0000757a <__mulsi3>:
    757a:	db 01       	movw	r26, r22
    757c:	8f 93       	push	r24
    757e:	9f 93       	push	r25
    7580:	6c d0       	rcall	.+216    	; 0x765a <__muluhisi3>
    7582:	bf 91       	pop	r27
    7584:	af 91       	pop	r26
    7586:	a2 9f       	mul	r26, r18
    7588:	80 0d       	add	r24, r0
    758a:	91 1d       	adc	r25, r1
    758c:	a3 9f       	mul	r26, r19
    758e:	90 0d       	add	r25, r0
    7590:	b2 9f       	mul	r27, r18
    7592:	90 0d       	add	r25, r0
    7594:	11 24       	eor	r1, r1
    7596:	08 95       	ret

00007598 <__udivmodqi4>:
    7598:	99 1b       	sub	r25, r25
    759a:	79 e0       	ldi	r23, 0x09	; 9
    759c:	04 c0       	rjmp	.+8      	; 0x75a6 <__udivmodqi4_ep>

0000759e <__udivmodqi4_loop>:
    759e:	99 1f       	adc	r25, r25
    75a0:	96 17       	cp	r25, r22
    75a2:	08 f0       	brcs	.+2      	; 0x75a6 <__udivmodqi4_ep>
    75a4:	96 1b       	sub	r25, r22

000075a6 <__udivmodqi4_ep>:
    75a6:	88 1f       	adc	r24, r24
    75a8:	7a 95       	dec	r23
    75aa:	c9 f7       	brne	.-14     	; 0x759e <__udivmodqi4_loop>
    75ac:	80 95       	com	r24
    75ae:	08 95       	ret

000075b0 <__udivmodsi4>:
    75b0:	a1 e2       	ldi	r26, 0x21	; 33
    75b2:	1a 2e       	mov	r1, r26
    75b4:	aa 1b       	sub	r26, r26
    75b6:	bb 1b       	sub	r27, r27
    75b8:	fd 01       	movw	r30, r26
    75ba:	0d c0       	rjmp	.+26     	; 0x75d6 <__udivmodsi4_ep>

000075bc <__udivmodsi4_loop>:
    75bc:	aa 1f       	adc	r26, r26
    75be:	bb 1f       	adc	r27, r27
    75c0:	ee 1f       	adc	r30, r30
    75c2:	ff 1f       	adc	r31, r31
    75c4:	a2 17       	cp	r26, r18
    75c6:	b3 07       	cpc	r27, r19
    75c8:	e4 07       	cpc	r30, r20
    75ca:	f5 07       	cpc	r31, r21
    75cc:	20 f0       	brcs	.+8      	; 0x75d6 <__udivmodsi4_ep>
    75ce:	a2 1b       	sub	r26, r18
    75d0:	b3 0b       	sbc	r27, r19
    75d2:	e4 0b       	sbc	r30, r20
    75d4:	f5 0b       	sbc	r31, r21

000075d6 <__udivmodsi4_ep>:
    75d6:	66 1f       	adc	r22, r22
    75d8:	77 1f       	adc	r23, r23
    75da:	88 1f       	adc	r24, r24
    75dc:	99 1f       	adc	r25, r25
    75de:	1a 94       	dec	r1
    75e0:	69 f7       	brne	.-38     	; 0x75bc <__udivmodsi4_loop>
    75e2:	60 95       	com	r22
    75e4:	70 95       	com	r23
    75e6:	80 95       	com	r24
    75e8:	90 95       	com	r25
    75ea:	9b 01       	movw	r18, r22
    75ec:	ac 01       	movw	r20, r24
    75ee:	bd 01       	movw	r22, r26
    75f0:	cf 01       	movw	r24, r30
    75f2:	08 95       	ret

000075f4 <__divmodsi4>:
    75f4:	05 2e       	mov	r0, r21
    75f6:	97 fb       	bst	r25, 7
    75f8:	16 f4       	brtc	.+4      	; 0x75fe <__divmodsi4+0xa>
    75fa:	00 94       	com	r0
    75fc:	0f d0       	rcall	.+30     	; 0x761c <__negsi2>
    75fe:	57 fd       	sbrc	r21, 7
    7600:	05 d0       	rcall	.+10     	; 0x760c <__divmodsi4_neg2>
    7602:	d6 df       	rcall	.-84     	; 0x75b0 <__udivmodsi4>
    7604:	07 fc       	sbrc	r0, 7
    7606:	02 d0       	rcall	.+4      	; 0x760c <__divmodsi4_neg2>
    7608:	46 f4       	brtc	.+16     	; 0x761a <__divmodsi4_exit>
    760a:	08 c0       	rjmp	.+16     	; 0x761c <__negsi2>

0000760c <__divmodsi4_neg2>:
    760c:	50 95       	com	r21
    760e:	40 95       	com	r20
    7610:	30 95       	com	r19
    7612:	21 95       	neg	r18
    7614:	3f 4f       	sbci	r19, 0xFF	; 255
    7616:	4f 4f       	sbci	r20, 0xFF	; 255
    7618:	5f 4f       	sbci	r21, 0xFF	; 255

0000761a <__divmodsi4_exit>:
    761a:	08 95       	ret

0000761c <__negsi2>:
    761c:	90 95       	com	r25
    761e:	80 95       	com	r24
    7620:	70 95       	com	r23
    7622:	61 95       	neg	r22
    7624:	7f 4f       	sbci	r23, 0xFF	; 255
    7626:	8f 4f       	sbci	r24, 0xFF	; 255
    7628:	9f 4f       	sbci	r25, 0xFF	; 255
    762a:	08 95       	ret

0000762c <__tablejump2__>:
    762c:	ee 0f       	add	r30, r30
    762e:	ff 1f       	adc	r31, r31
    7630:	88 1f       	adc	r24, r24
    7632:	8b bf       	out	0x3b, r24	; 59
    7634:	07 90       	elpm	r0, Z+
    7636:	f6 91       	elpm	r31, Z
    7638:	e0 2d       	mov	r30, r0
    763a:	19 94       	eijmp

0000763c <__umulhisi3>:
    763c:	a2 9f       	mul	r26, r18
    763e:	b0 01       	movw	r22, r0
    7640:	b3 9f       	mul	r27, r19
    7642:	c0 01       	movw	r24, r0
    7644:	a3 9f       	mul	r26, r19
    7646:	70 0d       	add	r23, r0
    7648:	81 1d       	adc	r24, r1
    764a:	11 24       	eor	r1, r1
    764c:	91 1d       	adc	r25, r1
    764e:	b2 9f       	mul	r27, r18
    7650:	70 0d       	add	r23, r0
    7652:	81 1d       	adc	r24, r1
    7654:	11 24       	eor	r1, r1
    7656:	91 1d       	adc	r25, r1
    7658:	08 95       	ret

0000765a <__muluhisi3>:
    765a:	f0 df       	rcall	.-32     	; 0x763c <__umulhisi3>
    765c:	a5 9f       	mul	r26, r21
    765e:	90 0d       	add	r25, r0
    7660:	b4 9f       	mul	r27, r20
    7662:	90 0d       	add	r25, r0
    7664:	a4 9f       	mul	r26, r20
    7666:	80 0d       	add	r24, r0
    7668:	91 1d       	adc	r25, r1
    766a:	11 24       	eor	r1, r1
    766c:	08 95       	ret

0000766e <malloc>:
    766e:	0f 93       	push	r16
    7670:	1f 93       	push	r17
    7672:	cf 93       	push	r28
    7674:	df 93       	push	r29
    7676:	82 30       	cpi	r24, 0x02	; 2
    7678:	91 05       	cpc	r25, r1
    767a:	10 f4       	brcc	.+4      	; 0x7680 <malloc+0x12>
    767c:	82 e0       	ldi	r24, 0x02	; 2
    767e:	90 e0       	ldi	r25, 0x00	; 0
    7680:	e0 91 a1 06 	lds	r30, 0x06A1	; 0x8006a1 <__flp>
    7684:	f0 91 a2 06 	lds	r31, 0x06A2	; 0x8006a2 <__flp+0x1>
    7688:	20 e0       	ldi	r18, 0x00	; 0
    768a:	30 e0       	ldi	r19, 0x00	; 0
    768c:	a0 e0       	ldi	r26, 0x00	; 0
    768e:	b0 e0       	ldi	r27, 0x00	; 0
    7690:	30 97       	sbiw	r30, 0x00	; 0
    7692:	19 f1       	breq	.+70     	; 0x76da <malloc+0x6c>
    7694:	40 81       	ld	r20, Z
    7696:	51 81       	ldd	r21, Z+1	; 0x01
    7698:	02 81       	ldd	r16, Z+2	; 0x02
    769a:	13 81       	ldd	r17, Z+3	; 0x03
    769c:	48 17       	cp	r20, r24
    769e:	59 07       	cpc	r21, r25
    76a0:	c8 f0       	brcs	.+50     	; 0x76d4 <malloc+0x66>
    76a2:	84 17       	cp	r24, r20
    76a4:	95 07       	cpc	r25, r21
    76a6:	69 f4       	brne	.+26     	; 0x76c2 <malloc+0x54>
    76a8:	10 97       	sbiw	r26, 0x00	; 0
    76aa:	31 f0       	breq	.+12     	; 0x76b8 <malloc+0x4a>
    76ac:	12 96       	adiw	r26, 0x02	; 2
    76ae:	0c 93       	st	X, r16
    76b0:	12 97       	sbiw	r26, 0x02	; 2
    76b2:	13 96       	adiw	r26, 0x03	; 3
    76b4:	1c 93       	st	X, r17
    76b6:	27 c0       	rjmp	.+78     	; 0x7706 <malloc+0x98>
    76b8:	00 93 a1 06 	sts	0x06A1, r16	; 0x8006a1 <__flp>
    76bc:	10 93 a2 06 	sts	0x06A2, r17	; 0x8006a2 <__flp+0x1>
    76c0:	22 c0       	rjmp	.+68     	; 0x7706 <malloc+0x98>
    76c2:	21 15       	cp	r18, r1
    76c4:	31 05       	cpc	r19, r1
    76c6:	19 f0       	breq	.+6      	; 0x76ce <malloc+0x60>
    76c8:	42 17       	cp	r20, r18
    76ca:	53 07       	cpc	r21, r19
    76cc:	18 f4       	brcc	.+6      	; 0x76d4 <malloc+0x66>
    76ce:	9a 01       	movw	r18, r20
    76d0:	bd 01       	movw	r22, r26
    76d2:	ef 01       	movw	r28, r30
    76d4:	df 01       	movw	r26, r30
    76d6:	f8 01       	movw	r30, r16
    76d8:	db cf       	rjmp	.-74     	; 0x7690 <malloc+0x22>
    76da:	21 15       	cp	r18, r1
    76dc:	31 05       	cpc	r19, r1
    76de:	f9 f0       	breq	.+62     	; 0x771e <malloc+0xb0>
    76e0:	28 1b       	sub	r18, r24
    76e2:	39 0b       	sbc	r19, r25
    76e4:	24 30       	cpi	r18, 0x04	; 4
    76e6:	31 05       	cpc	r19, r1
    76e8:	80 f4       	brcc	.+32     	; 0x770a <malloc+0x9c>
    76ea:	8a 81       	ldd	r24, Y+2	; 0x02
    76ec:	9b 81       	ldd	r25, Y+3	; 0x03
    76ee:	61 15       	cp	r22, r1
    76f0:	71 05       	cpc	r23, r1
    76f2:	21 f0       	breq	.+8      	; 0x76fc <malloc+0x8e>
    76f4:	fb 01       	movw	r30, r22
    76f6:	93 83       	std	Z+3, r25	; 0x03
    76f8:	82 83       	std	Z+2, r24	; 0x02
    76fa:	04 c0       	rjmp	.+8      	; 0x7704 <malloc+0x96>
    76fc:	90 93 a2 06 	sts	0x06A2, r25	; 0x8006a2 <__flp+0x1>
    7700:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__flp>
    7704:	fe 01       	movw	r30, r28
    7706:	32 96       	adiw	r30, 0x02	; 2
    7708:	44 c0       	rjmp	.+136    	; 0x7792 <malloc+0x124>
    770a:	fe 01       	movw	r30, r28
    770c:	e2 0f       	add	r30, r18
    770e:	f3 1f       	adc	r31, r19
    7710:	81 93       	st	Z+, r24
    7712:	91 93       	st	Z+, r25
    7714:	22 50       	subi	r18, 0x02	; 2
    7716:	31 09       	sbc	r19, r1
    7718:	39 83       	std	Y+1, r19	; 0x01
    771a:	28 83       	st	Y, r18
    771c:	3a c0       	rjmp	.+116    	; 0x7792 <malloc+0x124>
    771e:	20 91 9f 06 	lds	r18, 0x069F	; 0x80069f <__brkval>
    7722:	30 91 a0 06 	lds	r19, 0x06A0	; 0x8006a0 <__brkval+0x1>
    7726:	23 2b       	or	r18, r19
    7728:	41 f4       	brne	.+16     	; 0x773a <malloc+0xcc>
    772a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    772e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    7732:	30 93 a0 06 	sts	0x06A0, r19	; 0x8006a0 <__brkval+0x1>
    7736:	20 93 9f 06 	sts	0x069F, r18	; 0x80069f <__brkval>
    773a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    773e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    7742:	21 15       	cp	r18, r1
    7744:	31 05       	cpc	r19, r1
    7746:	41 f4       	brne	.+16     	; 0x7758 <malloc+0xea>
    7748:	2d b7       	in	r18, 0x3d	; 61
    774a:	3e b7       	in	r19, 0x3e	; 62
    774c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    7750:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    7754:	24 1b       	sub	r18, r20
    7756:	35 0b       	sbc	r19, r21
    7758:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <__brkval>
    775c:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <__brkval+0x1>
    7760:	e2 17       	cp	r30, r18
    7762:	f3 07       	cpc	r31, r19
    7764:	a0 f4       	brcc	.+40     	; 0x778e <malloc+0x120>
    7766:	2e 1b       	sub	r18, r30
    7768:	3f 0b       	sbc	r19, r31
    776a:	28 17       	cp	r18, r24
    776c:	39 07       	cpc	r19, r25
    776e:	78 f0       	brcs	.+30     	; 0x778e <malloc+0x120>
    7770:	ac 01       	movw	r20, r24
    7772:	4e 5f       	subi	r20, 0xFE	; 254
    7774:	5f 4f       	sbci	r21, 0xFF	; 255
    7776:	24 17       	cp	r18, r20
    7778:	35 07       	cpc	r19, r21
    777a:	48 f0       	brcs	.+18     	; 0x778e <malloc+0x120>
    777c:	4e 0f       	add	r20, r30
    777e:	5f 1f       	adc	r21, r31
    7780:	50 93 a0 06 	sts	0x06A0, r21	; 0x8006a0 <__brkval+0x1>
    7784:	40 93 9f 06 	sts	0x069F, r20	; 0x80069f <__brkval>
    7788:	81 93       	st	Z+, r24
    778a:	91 93       	st	Z+, r25
    778c:	02 c0       	rjmp	.+4      	; 0x7792 <malloc+0x124>
    778e:	e0 e0       	ldi	r30, 0x00	; 0
    7790:	f0 e0       	ldi	r31, 0x00	; 0
    7792:	cf 01       	movw	r24, r30
    7794:	df 91       	pop	r29
    7796:	cf 91       	pop	r28
    7798:	1f 91       	pop	r17
    779a:	0f 91       	pop	r16
    779c:	08 95       	ret

0000779e <free>:
    779e:	cf 93       	push	r28
    77a0:	df 93       	push	r29
    77a2:	00 97       	sbiw	r24, 0x00	; 0
    77a4:	09 f4       	brne	.+2      	; 0x77a8 <free+0xa>
    77a6:	81 c0       	rjmp	.+258    	; 0x78aa <free+0x10c>
    77a8:	fc 01       	movw	r30, r24
    77aa:	32 97       	sbiw	r30, 0x02	; 2
    77ac:	13 82       	std	Z+3, r1	; 0x03
    77ae:	12 82       	std	Z+2, r1	; 0x02
    77b0:	a0 91 a1 06 	lds	r26, 0x06A1	; 0x8006a1 <__flp>
    77b4:	b0 91 a2 06 	lds	r27, 0x06A2	; 0x8006a2 <__flp+0x1>
    77b8:	10 97       	sbiw	r26, 0x00	; 0
    77ba:	81 f4       	brne	.+32     	; 0x77dc <free+0x3e>
    77bc:	20 81       	ld	r18, Z
    77be:	31 81       	ldd	r19, Z+1	; 0x01
    77c0:	82 0f       	add	r24, r18
    77c2:	93 1f       	adc	r25, r19
    77c4:	20 91 9f 06 	lds	r18, 0x069F	; 0x80069f <__brkval>
    77c8:	30 91 a0 06 	lds	r19, 0x06A0	; 0x8006a0 <__brkval+0x1>
    77cc:	28 17       	cp	r18, r24
    77ce:	39 07       	cpc	r19, r25
    77d0:	51 f5       	brne	.+84     	; 0x7826 <free+0x88>
    77d2:	f0 93 a0 06 	sts	0x06A0, r31	; 0x8006a0 <__brkval+0x1>
    77d6:	e0 93 9f 06 	sts	0x069F, r30	; 0x80069f <__brkval>
    77da:	67 c0       	rjmp	.+206    	; 0x78aa <free+0x10c>
    77dc:	ed 01       	movw	r28, r26
    77de:	20 e0       	ldi	r18, 0x00	; 0
    77e0:	30 e0       	ldi	r19, 0x00	; 0
    77e2:	ce 17       	cp	r28, r30
    77e4:	df 07       	cpc	r29, r31
    77e6:	40 f4       	brcc	.+16     	; 0x77f8 <free+0x5a>
    77e8:	4a 81       	ldd	r20, Y+2	; 0x02
    77ea:	5b 81       	ldd	r21, Y+3	; 0x03
    77ec:	9e 01       	movw	r18, r28
    77ee:	41 15       	cp	r20, r1
    77f0:	51 05       	cpc	r21, r1
    77f2:	f1 f0       	breq	.+60     	; 0x7830 <free+0x92>
    77f4:	ea 01       	movw	r28, r20
    77f6:	f5 cf       	rjmp	.-22     	; 0x77e2 <free+0x44>
    77f8:	d3 83       	std	Z+3, r29	; 0x03
    77fa:	c2 83       	std	Z+2, r28	; 0x02
    77fc:	40 81       	ld	r20, Z
    77fe:	51 81       	ldd	r21, Z+1	; 0x01
    7800:	84 0f       	add	r24, r20
    7802:	95 1f       	adc	r25, r21
    7804:	c8 17       	cp	r28, r24
    7806:	d9 07       	cpc	r29, r25
    7808:	59 f4       	brne	.+22     	; 0x7820 <free+0x82>
    780a:	88 81       	ld	r24, Y
    780c:	99 81       	ldd	r25, Y+1	; 0x01
    780e:	84 0f       	add	r24, r20
    7810:	95 1f       	adc	r25, r21
    7812:	02 96       	adiw	r24, 0x02	; 2
    7814:	91 83       	std	Z+1, r25	; 0x01
    7816:	80 83       	st	Z, r24
    7818:	8a 81       	ldd	r24, Y+2	; 0x02
    781a:	9b 81       	ldd	r25, Y+3	; 0x03
    781c:	93 83       	std	Z+3, r25	; 0x03
    781e:	82 83       	std	Z+2, r24	; 0x02
    7820:	21 15       	cp	r18, r1
    7822:	31 05       	cpc	r19, r1
    7824:	29 f4       	brne	.+10     	; 0x7830 <free+0x92>
    7826:	f0 93 a2 06 	sts	0x06A2, r31	; 0x8006a2 <__flp+0x1>
    782a:	e0 93 a1 06 	sts	0x06A1, r30	; 0x8006a1 <__flp>
    782e:	3d c0       	rjmp	.+122    	; 0x78aa <free+0x10c>
    7830:	e9 01       	movw	r28, r18
    7832:	fb 83       	std	Y+3, r31	; 0x03
    7834:	ea 83       	std	Y+2, r30	; 0x02
    7836:	49 91       	ld	r20, Y+
    7838:	59 91       	ld	r21, Y+
    783a:	c4 0f       	add	r28, r20
    783c:	d5 1f       	adc	r29, r21
    783e:	ec 17       	cp	r30, r28
    7840:	fd 07       	cpc	r31, r29
    7842:	61 f4       	brne	.+24     	; 0x785c <free+0xbe>
    7844:	80 81       	ld	r24, Z
    7846:	91 81       	ldd	r25, Z+1	; 0x01
    7848:	84 0f       	add	r24, r20
    784a:	95 1f       	adc	r25, r21
    784c:	02 96       	adiw	r24, 0x02	; 2
    784e:	e9 01       	movw	r28, r18
    7850:	99 83       	std	Y+1, r25	; 0x01
    7852:	88 83       	st	Y, r24
    7854:	82 81       	ldd	r24, Z+2	; 0x02
    7856:	93 81       	ldd	r25, Z+3	; 0x03
    7858:	9b 83       	std	Y+3, r25	; 0x03
    785a:	8a 83       	std	Y+2, r24	; 0x02
    785c:	e0 e0       	ldi	r30, 0x00	; 0
    785e:	f0 e0       	ldi	r31, 0x00	; 0
    7860:	12 96       	adiw	r26, 0x02	; 2
    7862:	8d 91       	ld	r24, X+
    7864:	9c 91       	ld	r25, X
    7866:	13 97       	sbiw	r26, 0x03	; 3
    7868:	00 97       	sbiw	r24, 0x00	; 0
    786a:	19 f0       	breq	.+6      	; 0x7872 <free+0xd4>
    786c:	fd 01       	movw	r30, r26
    786e:	dc 01       	movw	r26, r24
    7870:	f7 cf       	rjmp	.-18     	; 0x7860 <free+0xc2>
    7872:	8d 91       	ld	r24, X+
    7874:	9c 91       	ld	r25, X
    7876:	11 97       	sbiw	r26, 0x01	; 1
    7878:	9d 01       	movw	r18, r26
    787a:	2e 5f       	subi	r18, 0xFE	; 254
    787c:	3f 4f       	sbci	r19, 0xFF	; 255
    787e:	82 0f       	add	r24, r18
    7880:	93 1f       	adc	r25, r19
    7882:	20 91 9f 06 	lds	r18, 0x069F	; 0x80069f <__brkval>
    7886:	30 91 a0 06 	lds	r19, 0x06A0	; 0x8006a0 <__brkval+0x1>
    788a:	28 17       	cp	r18, r24
    788c:	39 07       	cpc	r19, r25
    788e:	69 f4       	brne	.+26     	; 0x78aa <free+0x10c>
    7890:	30 97       	sbiw	r30, 0x00	; 0
    7892:	29 f4       	brne	.+10     	; 0x789e <free+0x100>
    7894:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <__flp+0x1>
    7898:	10 92 a1 06 	sts	0x06A1, r1	; 0x8006a1 <__flp>
    789c:	02 c0       	rjmp	.+4      	; 0x78a2 <free+0x104>
    789e:	13 82       	std	Z+3, r1	; 0x03
    78a0:	12 82       	std	Z+2, r1	; 0x02
    78a2:	b0 93 a0 06 	sts	0x06A0, r27	; 0x8006a0 <__brkval+0x1>
    78a6:	a0 93 9f 06 	sts	0x069F, r26	; 0x80069f <__brkval>
    78aa:	df 91       	pop	r29
    78ac:	cf 91       	pop	r28
    78ae:	08 95       	ret

000078b0 <realloc>:
    78b0:	6f 92       	push	r6
    78b2:	7f 92       	push	r7
    78b4:	8f 92       	push	r8
    78b6:	9f 92       	push	r9
    78b8:	af 92       	push	r10
    78ba:	bf 92       	push	r11
    78bc:	cf 92       	push	r12
    78be:	df 92       	push	r13
    78c0:	ef 92       	push	r14
    78c2:	ff 92       	push	r15
    78c4:	0f 93       	push	r16
    78c6:	1f 93       	push	r17
    78c8:	cf 93       	push	r28
    78ca:	df 93       	push	r29
    78cc:	00 97       	sbiw	r24, 0x00	; 0
    78ce:	81 f4       	brne	.+32     	; 0x78f0 <realloc+0x40>
    78d0:	cb 01       	movw	r24, r22
    78d2:	df 91       	pop	r29
    78d4:	cf 91       	pop	r28
    78d6:	1f 91       	pop	r17
    78d8:	0f 91       	pop	r16
    78da:	ff 90       	pop	r15
    78dc:	ef 90       	pop	r14
    78de:	df 90       	pop	r13
    78e0:	cf 90       	pop	r12
    78e2:	bf 90       	pop	r11
    78e4:	af 90       	pop	r10
    78e6:	9f 90       	pop	r9
    78e8:	8f 90       	pop	r8
    78ea:	7f 90       	pop	r7
    78ec:	6f 90       	pop	r6
    78ee:	bf ce       	rjmp	.-642    	; 0x766e <malloc>
    78f0:	fc 01       	movw	r30, r24
    78f2:	e6 0f       	add	r30, r22
    78f4:	f7 1f       	adc	r31, r23
    78f6:	9c 01       	movw	r18, r24
    78f8:	22 50       	subi	r18, 0x02	; 2
    78fa:	31 09       	sbc	r19, r1
    78fc:	e2 17       	cp	r30, r18
    78fe:	f3 07       	cpc	r31, r19
    7900:	08 f4       	brcc	.+2      	; 0x7904 <realloc+0x54>
    7902:	a5 c0       	rjmp	.+330    	; 0x7a4e <realloc+0x19e>
    7904:	ec 01       	movw	r28, r24
    7906:	d9 01       	movw	r26, r18
    7908:	0d 91       	ld	r16, X+
    790a:	1c 91       	ld	r17, X
    790c:	11 97       	sbiw	r26, 0x01	; 1
    790e:	06 17       	cp	r16, r22
    7910:	17 07       	cpc	r17, r23
    7912:	a8 f0       	brcs	.+42     	; 0x793e <realloc+0x8e>
    7914:	05 30       	cpi	r16, 0x05	; 5
    7916:	11 05       	cpc	r17, r1
    7918:	08 f4       	brcc	.+2      	; 0x791c <realloc+0x6c>
    791a:	97 c0       	rjmp	.+302    	; 0x7a4a <realloc+0x19a>
    791c:	c8 01       	movw	r24, r16
    791e:	04 97       	sbiw	r24, 0x04	; 4
    7920:	86 17       	cp	r24, r22
    7922:	97 07       	cpc	r25, r23
    7924:	08 f4       	brcc	.+2      	; 0x7928 <realloc+0x78>
    7926:	91 c0       	rjmp	.+290    	; 0x7a4a <realloc+0x19a>
    7928:	02 50       	subi	r16, 0x02	; 2
    792a:	11 09       	sbc	r17, r1
    792c:	06 1b       	sub	r16, r22
    792e:	17 0b       	sbc	r17, r23
    7930:	01 93       	st	Z+, r16
    7932:	11 93       	st	Z+, r17
    7934:	6d 93       	st	X+, r22
    7936:	7c 93       	st	X, r23
    7938:	cf 01       	movw	r24, r30
    793a:	31 df       	rcall	.-414    	; 0x779e <free>
    793c:	86 c0       	rjmp	.+268    	; 0x7a4a <realloc+0x19a>
    793e:	5b 01       	movw	r10, r22
    7940:	a0 1a       	sub	r10, r16
    7942:	b1 0a       	sbc	r11, r17
    7944:	4c 01       	movw	r8, r24
    7946:	80 0e       	add	r8, r16
    7948:	91 1e       	adc	r9, r17
    794a:	a0 91 a1 06 	lds	r26, 0x06A1	; 0x8006a1 <__flp>
    794e:	b0 91 a2 06 	lds	r27, 0x06A2	; 0x8006a2 <__flp+0x1>
    7952:	61 2c       	mov	r6, r1
    7954:	71 2c       	mov	r7, r1
    7956:	e1 2c       	mov	r14, r1
    7958:	f1 2c       	mov	r15, r1
    795a:	10 97       	sbiw	r26, 0x00	; 0
    795c:	09 f4       	brne	.+2      	; 0x7960 <realloc+0xb0>
    795e:	46 c0       	rjmp	.+140    	; 0x79ec <realloc+0x13c>
    7960:	8d 91       	ld	r24, X+
    7962:	9c 91       	ld	r25, X
    7964:	11 97       	sbiw	r26, 0x01	; 1
    7966:	a8 15       	cp	r26, r8
    7968:	b9 05       	cpc	r27, r9
    796a:	b1 f5       	brne	.+108    	; 0x79d8 <realloc+0x128>
    796c:	6c 01       	movw	r12, r24
    796e:	42 e0       	ldi	r20, 0x02	; 2
    7970:	c4 0e       	add	r12, r20
    7972:	d1 1c       	adc	r13, r1
    7974:	ca 14       	cp	r12, r10
    7976:	db 04       	cpc	r13, r11
    7978:	78 f1       	brcs	.+94     	; 0x79d8 <realloc+0x128>
    797a:	4c 01       	movw	r8, r24
    797c:	8a 18       	sub	r8, r10
    797e:	9b 08       	sbc	r9, r11
    7980:	64 01       	movw	r12, r8
    7982:	42 e0       	ldi	r20, 0x02	; 2
    7984:	c4 0e       	add	r12, r20
    7986:	d1 1c       	adc	r13, r1
    7988:	12 96       	adiw	r26, 0x02	; 2
    798a:	bc 90       	ld	r11, X
    798c:	12 97       	sbiw	r26, 0x02	; 2
    798e:	13 96       	adiw	r26, 0x03	; 3
    7990:	ac 91       	ld	r26, X
    7992:	b5 e0       	ldi	r27, 0x05	; 5
    7994:	cb 16       	cp	r12, r27
    7996:	d1 04       	cpc	r13, r1
    7998:	40 f0       	brcs	.+16     	; 0x79aa <realloc+0xfa>
    799a:	b2 82       	std	Z+2, r11	; 0x02
    799c:	a3 83       	std	Z+3, r26	; 0x03
    799e:	91 82       	std	Z+1, r9	; 0x01
    79a0:	80 82       	st	Z, r8
    79a2:	d9 01       	movw	r26, r18
    79a4:	6d 93       	st	X+, r22
    79a6:	7c 93       	st	X, r23
    79a8:	09 c0       	rjmp	.+18     	; 0x79bc <realloc+0x10c>
    79aa:	0e 5f       	subi	r16, 0xFE	; 254
    79ac:	1f 4f       	sbci	r17, 0xFF	; 255
    79ae:	80 0f       	add	r24, r16
    79b0:	91 1f       	adc	r25, r17
    79b2:	f9 01       	movw	r30, r18
    79b4:	91 83       	std	Z+1, r25	; 0x01
    79b6:	80 83       	st	Z, r24
    79b8:	eb 2d       	mov	r30, r11
    79ba:	fa 2f       	mov	r31, r26
    79bc:	e1 14       	cp	r14, r1
    79be:	f1 04       	cpc	r15, r1
    79c0:	31 f0       	breq	.+12     	; 0x79ce <realloc+0x11e>
    79c2:	d7 01       	movw	r26, r14
    79c4:	13 96       	adiw	r26, 0x03	; 3
    79c6:	fc 93       	st	X, r31
    79c8:	ee 93       	st	-X, r30
    79ca:	12 97       	sbiw	r26, 0x02	; 2
    79cc:	3e c0       	rjmp	.+124    	; 0x7a4a <realloc+0x19a>
    79ce:	f0 93 a2 06 	sts	0x06A2, r31	; 0x8006a2 <__flp+0x1>
    79d2:	e0 93 a1 06 	sts	0x06A1, r30	; 0x8006a1 <__flp>
    79d6:	39 c0       	rjmp	.+114    	; 0x7a4a <realloc+0x19a>
    79d8:	68 16       	cp	r6, r24
    79da:	79 06       	cpc	r7, r25
    79dc:	08 f4       	brcc	.+2      	; 0x79e0 <realloc+0x130>
    79de:	3c 01       	movw	r6, r24
    79e0:	7d 01       	movw	r14, r26
    79e2:	12 96       	adiw	r26, 0x02	; 2
    79e4:	0d 90       	ld	r0, X+
    79e6:	bc 91       	ld	r27, X
    79e8:	a0 2d       	mov	r26, r0
    79ea:	b7 cf       	rjmp	.-146    	; 0x795a <realloc+0xaa>
    79ec:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <__brkval>
    79f0:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <__brkval+0x1>
    79f4:	88 16       	cp	r8, r24
    79f6:	99 06       	cpc	r9, r25
    79f8:	e1 f4       	brne	.+56     	; 0x7a32 <realloc+0x182>
    79fa:	66 16       	cp	r6, r22
    79fc:	77 06       	cpc	r7, r23
    79fe:	c8 f4       	brcc	.+50     	; 0x7a32 <realloc+0x182>
    7a00:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    7a04:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    7a08:	00 97       	sbiw	r24, 0x00	; 0
    7a0a:	41 f4       	brne	.+16     	; 0x7a1c <realloc+0x16c>
    7a0c:	8d b7       	in	r24, 0x3d	; 61
    7a0e:	9e b7       	in	r25, 0x3e	; 62
    7a10:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    7a14:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    7a18:	84 1b       	sub	r24, r20
    7a1a:	95 0b       	sbc	r25, r21
    7a1c:	e8 17       	cp	r30, r24
    7a1e:	f9 07       	cpc	r31, r25
    7a20:	b0 f4       	brcc	.+44     	; 0x7a4e <realloc+0x19e>
    7a22:	f0 93 a0 06 	sts	0x06A0, r31	; 0x8006a0 <__brkval+0x1>
    7a26:	e0 93 9f 06 	sts	0x069F, r30	; 0x80069f <__brkval>
    7a2a:	f9 01       	movw	r30, r18
    7a2c:	71 83       	std	Z+1, r23	; 0x01
    7a2e:	60 83       	st	Z, r22
    7a30:	0c c0       	rjmp	.+24     	; 0x7a4a <realloc+0x19a>
    7a32:	cb 01       	movw	r24, r22
    7a34:	1c de       	rcall	.-968    	; 0x766e <malloc>
    7a36:	7c 01       	movw	r14, r24
    7a38:	00 97       	sbiw	r24, 0x00	; 0
    7a3a:	49 f0       	breq	.+18     	; 0x7a4e <realloc+0x19e>
    7a3c:	a8 01       	movw	r20, r16
    7a3e:	be 01       	movw	r22, r28
    7a40:	54 d0       	rcall	.+168    	; 0x7aea <memcpy>
    7a42:	ce 01       	movw	r24, r28
    7a44:	ac de       	rcall	.-680    	; 0x779e <free>
    7a46:	c7 01       	movw	r24, r14
    7a48:	04 c0       	rjmp	.+8      	; 0x7a52 <realloc+0x1a2>
    7a4a:	ce 01       	movw	r24, r28
    7a4c:	02 c0       	rjmp	.+4      	; 0x7a52 <realloc+0x1a2>
    7a4e:	80 e0       	ldi	r24, 0x00	; 0
    7a50:	90 e0       	ldi	r25, 0x00	; 0
    7a52:	df 91       	pop	r29
    7a54:	cf 91       	pop	r28
    7a56:	1f 91       	pop	r17
    7a58:	0f 91       	pop	r16
    7a5a:	ff 90       	pop	r15
    7a5c:	ef 90       	pop	r14
    7a5e:	df 90       	pop	r13
    7a60:	cf 90       	pop	r12
    7a62:	bf 90       	pop	r11
    7a64:	af 90       	pop	r10
    7a66:	9f 90       	pop	r9
    7a68:	8f 90       	pop	r8
    7a6a:	7f 90       	pop	r7
    7a6c:	6f 90       	pop	r6
    7a6e:	08 95       	ret

00007a70 <abort>:
    7a70:	81 e0       	ldi	r24, 0x01	; 1
    7a72:	90 e0       	ldi	r25, 0x00	; 0
    7a74:	f8 94       	cli
    7a76:	27 c2       	rjmp	.+1102   	; 0x7ec6 <__do_global_dtors>

00007a78 <atof>:
    7a78:	66 27       	eor	r22, r22
    7a7a:	77 27       	eor	r23, r23
    7a7c:	a2 c0       	rjmp	.+324    	; 0x7bc2 <strtod>

00007a7e <atol>:
    7a7e:	1f 93       	push	r17
    7a80:	fc 01       	movw	r30, r24
    7a82:	99 27       	eor	r25, r25
    7a84:	88 27       	eor	r24, r24
    7a86:	bc 01       	movw	r22, r24
    7a88:	e8 94       	clt
    7a8a:	11 91       	ld	r17, Z+
    7a8c:	10 32       	cpi	r17, 0x20	; 32
    7a8e:	e9 f3       	breq	.-6      	; 0x7a8a <atol+0xc>
    7a90:	19 30       	cpi	r17, 0x09	; 9
    7a92:	10 f0       	brcs	.+4      	; 0x7a98 <atol+0x1a>
    7a94:	1e 30       	cpi	r17, 0x0E	; 14
    7a96:	c8 f3       	brcs	.-14     	; 0x7a8a <atol+0xc>
    7a98:	1b 32       	cpi	r17, 0x2B	; 43
    7a9a:	49 f0       	breq	.+18     	; 0x7aae <atol+0x30>
    7a9c:	1d 32       	cpi	r17, 0x2D	; 45
    7a9e:	41 f4       	brne	.+16     	; 0x7ab0 <atol+0x32>
    7aa0:	68 94       	set
    7aa2:	05 c0       	rjmp	.+10     	; 0x7aae <atol+0x30>
    7aa4:	56 d0       	rcall	.+172    	; 0x7b52 <__mulsi_const_10>
    7aa6:	61 0f       	add	r22, r17
    7aa8:	71 1d       	adc	r23, r1
    7aaa:	81 1d       	adc	r24, r1
    7aac:	91 1d       	adc	r25, r1
    7aae:	11 91       	ld	r17, Z+
    7ab0:	10 53       	subi	r17, 0x30	; 48
    7ab2:	1a 30       	cpi	r17, 0x0A	; 10
    7ab4:	b8 f3       	brcs	.-18     	; 0x7aa4 <atol+0x26>
    7ab6:	3e f4       	brtc	.+14     	; 0x7ac6 <atol+0x48>
    7ab8:	90 95       	com	r25
    7aba:	80 95       	com	r24
    7abc:	70 95       	com	r23
    7abe:	61 95       	neg	r22
    7ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    7ac2:	8f 4f       	sbci	r24, 0xFF	; 255
    7ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    7ac6:	1f 91       	pop	r17
    7ac8:	08 95       	ret

00007aca <isspace>:
    7aca:	91 11       	cpse	r25, r1
    7acc:	d1 c1       	rjmp	.+930    	; 0x7e70 <__ctype_isfalse>
    7ace:	80 32       	cpi	r24, 0x20	; 32
    7ad0:	19 f0       	breq	.+6      	; 0x7ad8 <isspace+0xe>
    7ad2:	89 50       	subi	r24, 0x09	; 9
    7ad4:	85 50       	subi	r24, 0x05	; 5
    7ad6:	d0 f7       	brcc	.-12     	; 0x7acc <isspace+0x2>
    7ad8:	08 95       	ret

00007ada <toupper>:
    7ada:	91 11       	cpse	r25, r1
    7adc:	08 95       	ret
    7ade:	81 56       	subi	r24, 0x61	; 97
    7ae0:	8a 51       	subi	r24, 0x1A	; 26
    7ae2:	08 f4       	brcc	.+2      	; 0x7ae6 <toupper+0xc>
    7ae4:	80 52       	subi	r24, 0x20	; 32
    7ae6:	85 58       	subi	r24, 0x85	; 133
    7ae8:	08 95       	ret

00007aea <memcpy>:
    7aea:	fb 01       	movw	r30, r22
    7aec:	dc 01       	movw	r26, r24
    7aee:	02 c0       	rjmp	.+4      	; 0x7af4 <memcpy+0xa>
    7af0:	01 90       	ld	r0, Z+
    7af2:	0d 92       	st	X+, r0
    7af4:	41 50       	subi	r20, 0x01	; 1
    7af6:	50 40       	sbci	r21, 0x00	; 0
    7af8:	d8 f7       	brcc	.-10     	; 0x7af0 <memcpy+0x6>
    7afa:	08 95       	ret

00007afc <memset>:
    7afc:	dc 01       	movw	r26, r24
    7afe:	01 c0       	rjmp	.+2      	; 0x7b02 <memset+0x6>
    7b00:	6d 93       	st	X+, r22
    7b02:	41 50       	subi	r20, 0x01	; 1
    7b04:	50 40       	sbci	r21, 0x00	; 0
    7b06:	e0 f7       	brcc	.-8      	; 0x7b00 <memset+0x4>
    7b08:	08 95       	ret

00007b0a <strcmp>:
    7b0a:	fb 01       	movw	r30, r22
    7b0c:	dc 01       	movw	r26, r24
    7b0e:	8d 91       	ld	r24, X+
    7b10:	01 90       	ld	r0, Z+
    7b12:	80 19       	sub	r24, r0
    7b14:	01 10       	cpse	r0, r1
    7b16:	d9 f3       	breq	.-10     	; 0x7b0e <strcmp+0x4>
    7b18:	99 0b       	sbc	r25, r25
    7b1a:	08 95       	ret

00007b1c <strcpy>:
    7b1c:	fb 01       	movw	r30, r22
    7b1e:	dc 01       	movw	r26, r24
    7b20:	01 90       	ld	r0, Z+
    7b22:	0d 92       	st	X+, r0
    7b24:	00 20       	and	r0, r0
    7b26:	e1 f7       	brne	.-8      	; 0x7b20 <strcpy+0x4>
    7b28:	08 95       	ret

00007b2a <itoa>:
    7b2a:	45 32       	cpi	r20, 0x25	; 37
    7b2c:	51 05       	cpc	r21, r1
    7b2e:	18 f4       	brcc	.+6      	; 0x7b36 <itoa+0xc>
    7b30:	42 30       	cpi	r20, 0x02	; 2
    7b32:	08 f0       	brcs	.+2      	; 0x7b36 <itoa+0xc>
    7b34:	04 c0       	rjmp	.+8      	; 0x7b3e <__itoa_ncheck>
    7b36:	fb 01       	movw	r30, r22
    7b38:	10 82       	st	Z, r1
    7b3a:	cb 01       	movw	r24, r22
    7b3c:	08 95       	ret

00007b3e <__itoa_ncheck>:
    7b3e:	bb 27       	eor	r27, r27
    7b40:	4a 30       	cpi	r20, 0x0A	; 10
    7b42:	31 f4       	brne	.+12     	; 0x7b50 <__itoa_ncheck+0x12>
    7b44:	99 23       	and	r25, r25
    7b46:	22 f4       	brpl	.+8      	; 0x7b50 <__itoa_ncheck+0x12>
    7b48:	bd e2       	ldi	r27, 0x2D	; 45
    7b4a:	90 95       	com	r25
    7b4c:	81 95       	neg	r24
    7b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    7b50:	20 c0       	rjmp	.+64     	; 0x7b92 <__utoa_common>

00007b52 <__mulsi_const_10>:
    7b52:	59 2f       	mov	r21, r25
    7b54:	48 2f       	mov	r20, r24
    7b56:	37 2f       	mov	r19, r23
    7b58:	26 2f       	mov	r18, r22
    7b5a:	66 0f       	add	r22, r22
    7b5c:	77 1f       	adc	r23, r23
    7b5e:	88 1f       	adc	r24, r24
    7b60:	99 1f       	adc	r25, r25
    7b62:	66 0f       	add	r22, r22
    7b64:	77 1f       	adc	r23, r23
    7b66:	88 1f       	adc	r24, r24
    7b68:	99 1f       	adc	r25, r25
    7b6a:	62 0f       	add	r22, r18
    7b6c:	73 1f       	adc	r23, r19
    7b6e:	84 1f       	adc	r24, r20
    7b70:	95 1f       	adc	r25, r21
    7b72:	66 0f       	add	r22, r22
    7b74:	77 1f       	adc	r23, r23
    7b76:	88 1f       	adc	r24, r24
    7b78:	99 1f       	adc	r25, r25
    7b7a:	08 95       	ret

00007b7c <utoa>:
    7b7c:	45 32       	cpi	r20, 0x25	; 37
    7b7e:	51 05       	cpc	r21, r1
    7b80:	18 f4       	brcc	.+6      	; 0x7b88 <utoa+0xc>
    7b82:	42 30       	cpi	r20, 0x02	; 2
    7b84:	08 f0       	brcs	.+2      	; 0x7b88 <utoa+0xc>
    7b86:	04 c0       	rjmp	.+8      	; 0x7b90 <__utoa_ncheck>
    7b88:	fb 01       	movw	r30, r22
    7b8a:	10 82       	st	Z, r1
    7b8c:	cb 01       	movw	r24, r22
    7b8e:	08 95       	ret

00007b90 <__utoa_ncheck>:
    7b90:	bb 27       	eor	r27, r27

00007b92 <__utoa_common>:
    7b92:	fb 01       	movw	r30, r22
    7b94:	55 27       	eor	r21, r21
    7b96:	aa 27       	eor	r26, r26
    7b98:	88 0f       	add	r24, r24
    7b9a:	99 1f       	adc	r25, r25
    7b9c:	aa 1f       	adc	r26, r26
    7b9e:	a4 17       	cp	r26, r20
    7ba0:	10 f0       	brcs	.+4      	; 0x7ba6 <__utoa_common+0x14>
    7ba2:	a4 1b       	sub	r26, r20
    7ba4:	83 95       	inc	r24
    7ba6:	50 51       	subi	r21, 0x10	; 16
    7ba8:	b9 f7       	brne	.-18     	; 0x7b98 <__utoa_common+0x6>
    7baa:	a0 5d       	subi	r26, 0xD0	; 208
    7bac:	aa 33       	cpi	r26, 0x3A	; 58
    7bae:	08 f0       	brcs	.+2      	; 0x7bb2 <__utoa_common+0x20>
    7bb0:	a9 5d       	subi	r26, 0xD9	; 217
    7bb2:	a1 93       	st	Z+, r26
    7bb4:	00 97       	sbiw	r24, 0x00	; 0
    7bb6:	79 f7       	brne	.-34     	; 0x7b96 <__utoa_common+0x4>
    7bb8:	b1 11       	cpse	r27, r1
    7bba:	b1 93       	st	Z+, r27
    7bbc:	11 92       	st	Z+, r1
    7bbe:	cb 01       	movw	r24, r22
    7bc0:	72 c1       	rjmp	.+740    	; 0x7ea6 <strrev>

00007bc2 <strtod>:
    7bc2:	8f 92       	push	r8
    7bc4:	9f 92       	push	r9
    7bc6:	af 92       	push	r10
    7bc8:	bf 92       	push	r11
    7bca:	cf 92       	push	r12
    7bcc:	df 92       	push	r13
    7bce:	ef 92       	push	r14
    7bd0:	ff 92       	push	r15
    7bd2:	0f 93       	push	r16
    7bd4:	1f 93       	push	r17
    7bd6:	cf 93       	push	r28
    7bd8:	df 93       	push	r29
    7bda:	ec 01       	movw	r28, r24
    7bdc:	6b 01       	movw	r12, r22
    7bde:	61 15       	cp	r22, r1
    7be0:	71 05       	cpc	r23, r1
    7be2:	19 f0       	breq	.+6      	; 0x7bea <strtod+0x28>
    7be4:	fb 01       	movw	r30, r22
    7be6:	91 83       	std	Z+1, r25	; 0x01
    7be8:	80 83       	st	Z, r24
    7bea:	7e 01       	movw	r14, r28
    7bec:	ff ef       	ldi	r31, 0xFF	; 255
    7bee:	ef 1a       	sub	r14, r31
    7bf0:	ff 0a       	sbc	r15, r31
    7bf2:	08 81       	ld	r16, Y
    7bf4:	80 2f       	mov	r24, r16
    7bf6:	90 e0       	ldi	r25, 0x00	; 0
    7bf8:	68 df       	rcall	.-304    	; 0x7aca <isspace>
    7bfa:	89 2b       	or	r24, r25
    7bfc:	11 f0       	breq	.+4      	; 0x7c02 <strtod+0x40>
    7bfe:	e7 01       	movw	r28, r14
    7c00:	f4 cf       	rjmp	.-24     	; 0x7bea <strtod+0x28>
    7c02:	0d 32       	cpi	r16, 0x2D	; 45
    7c04:	39 f4       	brne	.+14     	; 0x7c14 <strtod+0x52>
    7c06:	7e 01       	movw	r14, r28
    7c08:	82 e0       	ldi	r24, 0x02	; 2
    7c0a:	e8 0e       	add	r14, r24
    7c0c:	f1 1c       	adc	r15, r1
    7c0e:	09 81       	ldd	r16, Y+1	; 0x01
    7c10:	11 e0       	ldi	r17, 0x01	; 1
    7c12:	08 c0       	rjmp	.+16     	; 0x7c24 <strtod+0x62>
    7c14:	0b 32       	cpi	r16, 0x2B	; 43
    7c16:	29 f4       	brne	.+10     	; 0x7c22 <strtod+0x60>
    7c18:	7e 01       	movw	r14, r28
    7c1a:	92 e0       	ldi	r25, 0x02	; 2
    7c1c:	e9 0e       	add	r14, r25
    7c1e:	f1 1c       	adc	r15, r1
    7c20:	09 81       	ldd	r16, Y+1	; 0x01
    7c22:	10 e0       	ldi	r17, 0x00	; 0
    7c24:	e7 01       	movw	r28, r14
    7c26:	21 97       	sbiw	r28, 0x01	; 1
    7c28:	43 e0       	ldi	r20, 0x03	; 3
    7c2a:	50 e0       	ldi	r21, 0x00	; 0
    7c2c:	64 e3       	ldi	r22, 0x34	; 52
    7c2e:	71 e0       	ldi	r23, 0x01	; 1
    7c30:	ce 01       	movw	r24, r28
    7c32:	21 d1       	rcall	.+578    	; 0x7e76 <strncasecmp_P>
    7c34:	89 2b       	or	r24, r25
    7c36:	b9 f4       	brne	.+46     	; 0x7c66 <strtod+0xa4>
    7c38:	23 96       	adiw	r28, 0x03	; 3
    7c3a:	45 e0       	ldi	r20, 0x05	; 5
    7c3c:	50 e0       	ldi	r21, 0x00	; 0
    7c3e:	6f e2       	ldi	r22, 0x2F	; 47
    7c40:	71 e0       	ldi	r23, 0x01	; 1
    7c42:	ce 01       	movw	r24, r28
    7c44:	18 d1       	rcall	.+560    	; 0x7e76 <strncasecmp_P>
    7c46:	89 2b       	or	r24, r25
    7c48:	09 f4       	brne	.+2      	; 0x7c4c <strtod+0x8a>
    7c4a:	25 96       	adiw	r28, 0x05	; 5
    7c4c:	c1 14       	cp	r12, r1
    7c4e:	d1 04       	cpc	r13, r1
    7c50:	19 f0       	breq	.+6      	; 0x7c58 <strtod+0x96>
    7c52:	f6 01       	movw	r30, r12
    7c54:	d1 83       	std	Z+1, r29	; 0x01
    7c56:	c0 83       	st	Z, r28
    7c58:	11 11       	cpse	r17, r1
    7c5a:	f4 c0       	rjmp	.+488    	; 0x7e44 <strtod+0x282>
    7c5c:	60 e0       	ldi	r22, 0x00	; 0
    7c5e:	70 e0       	ldi	r23, 0x00	; 0
    7c60:	80 e8       	ldi	r24, 0x80	; 128
    7c62:	9f e7       	ldi	r25, 0x7F	; 127
    7c64:	f8 c0       	rjmp	.+496    	; 0x7e56 <strtod+0x294>
    7c66:	43 e0       	ldi	r20, 0x03	; 3
    7c68:	50 e0       	ldi	r21, 0x00	; 0
    7c6a:	6c e2       	ldi	r22, 0x2C	; 44
    7c6c:	71 e0       	ldi	r23, 0x01	; 1
    7c6e:	ce 01       	movw	r24, r28
    7c70:	02 d1       	rcall	.+516    	; 0x7e76 <strncasecmp_P>
    7c72:	89 2b       	or	r24, r25
    7c74:	59 f4       	brne	.+22     	; 0x7c8c <strtod+0xca>
    7c76:	c1 14       	cp	r12, r1
    7c78:	d1 04       	cpc	r13, r1
    7c7a:	09 f4       	brne	.+2      	; 0x7c7e <strtod+0xbc>
    7c7c:	e8 c0       	rjmp	.+464    	; 0x7e4e <strtod+0x28c>
    7c7e:	f2 e0       	ldi	r31, 0x02	; 2
    7c80:	ef 0e       	add	r14, r31
    7c82:	f1 1c       	adc	r15, r1
    7c84:	f6 01       	movw	r30, r12
    7c86:	f1 82       	std	Z+1, r15	; 0x01
    7c88:	e0 82       	st	Z, r14
    7c8a:	e1 c0       	rjmp	.+450    	; 0x7e4e <strtod+0x28c>
    7c8c:	20 e0       	ldi	r18, 0x00	; 0
    7c8e:	30 e0       	ldi	r19, 0x00	; 0
    7c90:	a9 01       	movw	r20, r18
    7c92:	c0 e0       	ldi	r28, 0x00	; 0
    7c94:	d0 e0       	ldi	r29, 0x00	; 0
    7c96:	f7 01       	movw	r30, r14
    7c98:	60 ed       	ldi	r22, 0xD0	; 208
    7c9a:	a6 2e       	mov	r10, r22
    7c9c:	a0 0e       	add	r10, r16
    7c9e:	89 e0       	ldi	r24, 0x09	; 9
    7ca0:	8a 15       	cp	r24, r10
    7ca2:	28 f1       	brcs	.+74     	; 0x7cee <strtod+0x12c>
    7ca4:	91 2f       	mov	r25, r17
    7ca6:	92 60       	ori	r25, 0x02	; 2
    7ca8:	b9 2e       	mov	r11, r25
    7caa:	81 2f       	mov	r24, r17
    7cac:	88 70       	andi	r24, 0x08	; 8
    7cae:	12 ff       	sbrs	r17, 2
    7cb0:	04 c0       	rjmp	.+8      	; 0x7cba <strtod+0xf8>
    7cb2:	81 11       	cpse	r24, r1
    7cb4:	23 c0       	rjmp	.+70     	; 0x7cfc <strtod+0x13a>
    7cb6:	21 96       	adiw	r28, 0x01	; 1
    7cb8:	21 c0       	rjmp	.+66     	; 0x7cfc <strtod+0x13a>
    7cba:	81 11       	cpse	r24, r1
    7cbc:	21 97       	sbiw	r28, 0x01	; 1
    7cbe:	a5 e0       	ldi	r26, 0x05	; 5
    7cc0:	b0 e0       	ldi	r27, 0x00	; 0
    7cc2:	cb dc       	rcall	.-1642   	; 0x765a <__muluhisi3>
    7cc4:	dc 01       	movw	r26, r24
    7cc6:	cb 01       	movw	r24, r22
    7cc8:	88 0f       	add	r24, r24
    7cca:	99 1f       	adc	r25, r25
    7ccc:	aa 1f       	adc	r26, r26
    7cce:	bb 1f       	adc	r27, r27
    7cd0:	9c 01       	movw	r18, r24
    7cd2:	ad 01       	movw	r20, r26
    7cd4:	2a 0d       	add	r18, r10
    7cd6:	31 1d       	adc	r19, r1
    7cd8:	41 1d       	adc	r20, r1
    7cda:	51 1d       	adc	r21, r1
    7cdc:	28 39       	cpi	r18, 0x98	; 152
    7cde:	89 e9       	ldi	r24, 0x99	; 153
    7ce0:	38 07       	cpc	r19, r24
    7ce2:	48 07       	cpc	r20, r24
    7ce4:	89 e1       	ldi	r24, 0x19	; 25
    7ce6:	58 07       	cpc	r21, r24
    7ce8:	48 f0       	brcs	.+18     	; 0x7cfc <strtod+0x13a>
    7cea:	16 60       	ori	r17, 0x06	; 6
    7cec:	06 c0       	rjmp	.+12     	; 0x7cfa <strtod+0x138>
    7cee:	9e ef       	ldi	r25, 0xFE	; 254
    7cf0:	a9 12       	cpse	r10, r25
    7cf2:	0a c0       	rjmp	.+20     	; 0x7d08 <strtod+0x146>
    7cf4:	13 fd       	sbrc	r17, 3
    7cf6:	40 c0       	rjmp	.+128    	; 0x7d78 <strtod+0x1b6>
    7cf8:	18 60       	ori	r17, 0x08	; 8
    7cfa:	b1 2e       	mov	r11, r17
    7cfc:	8f ef       	ldi	r24, 0xFF	; 255
    7cfe:	e8 1a       	sub	r14, r24
    7d00:	f8 0a       	sbc	r15, r24
    7d02:	00 81       	ld	r16, Z
    7d04:	1b 2d       	mov	r17, r11
    7d06:	c7 cf       	rjmp	.-114    	; 0x7c96 <strtod+0xd4>
    7d08:	80 2f       	mov	r24, r16
    7d0a:	8f 7d       	andi	r24, 0xDF	; 223
    7d0c:	85 34       	cpi	r24, 0x45	; 69
    7d0e:	a1 f5       	brne	.+104    	; 0x7d78 <strtod+0x1b6>
    7d10:	80 81       	ld	r24, Z
    7d12:	8d 32       	cpi	r24, 0x2D	; 45
    7d14:	11 f4       	brne	.+4      	; 0x7d1a <strtod+0x158>
    7d16:	10 61       	ori	r17, 0x10	; 16
    7d18:	06 c0       	rjmp	.+12     	; 0x7d26 <strtod+0x164>
    7d1a:	8b 32       	cpi	r24, 0x2B	; 43
    7d1c:	21 f0       	breq	.+8      	; 0x7d26 <strtod+0x164>
    7d1e:	31 96       	adiw	r30, 0x01	; 1
    7d20:	61 e0       	ldi	r22, 0x01	; 1
    7d22:	70 e0       	ldi	r23, 0x00	; 0
    7d24:	04 c0       	rjmp	.+8      	; 0x7d2e <strtod+0x16c>
    7d26:	81 81       	ldd	r24, Z+1	; 0x01
    7d28:	32 96       	adiw	r30, 0x02	; 2
    7d2a:	62 e0       	ldi	r22, 0x02	; 2
    7d2c:	70 e0       	ldi	r23, 0x00	; 0
    7d2e:	80 53       	subi	r24, 0x30	; 48
    7d30:	8a 30       	cpi	r24, 0x0A	; 10
    7d32:	18 f0       	brcs	.+6      	; 0x7d3a <strtod+0x178>
    7d34:	e6 1b       	sub	r30, r22
    7d36:	f7 0b       	sbc	r31, r23
    7d38:	1f c0       	rjmp	.+62     	; 0x7d78 <strtod+0x1b6>
    7d3a:	60 e0       	ldi	r22, 0x00	; 0
    7d3c:	70 e0       	ldi	r23, 0x00	; 0
    7d3e:	60 38       	cpi	r22, 0x80	; 128
    7d40:	9c e0       	ldi	r25, 0x0C	; 12
    7d42:	79 07       	cpc	r23, r25
    7d44:	5c f4       	brge	.+22     	; 0x7d5c <strtod+0x19a>
    7d46:	db 01       	movw	r26, r22
    7d48:	aa 0f       	add	r26, r26
    7d4a:	bb 1f       	adc	r27, r27
    7d4c:	aa 0f       	add	r26, r26
    7d4e:	bb 1f       	adc	r27, r27
    7d50:	6a 0f       	add	r22, r26
    7d52:	7b 1f       	adc	r23, r27
    7d54:	66 0f       	add	r22, r22
    7d56:	77 1f       	adc	r23, r23
    7d58:	68 0f       	add	r22, r24
    7d5a:	71 1d       	adc	r23, r1
    7d5c:	31 96       	adiw	r30, 0x01	; 1
    7d5e:	df 01       	movw	r26, r30
    7d60:	11 97       	sbiw	r26, 0x01	; 1
    7d62:	8c 91       	ld	r24, X
    7d64:	80 53       	subi	r24, 0x30	; 48
    7d66:	8a 30       	cpi	r24, 0x0A	; 10
    7d68:	50 f3       	brcs	.-44     	; 0x7d3e <strtod+0x17c>
    7d6a:	14 ff       	sbrs	r17, 4
    7d6c:	03 c0       	rjmp	.+6      	; 0x7d74 <strtod+0x1b2>
    7d6e:	71 95       	neg	r23
    7d70:	61 95       	neg	r22
    7d72:	71 09       	sbc	r23, r1
    7d74:	c6 0f       	add	r28, r22
    7d76:	d7 1f       	adc	r29, r23
    7d78:	11 ff       	sbrs	r17, 1
    7d7a:	08 c0       	rjmp	.+16     	; 0x7d8c <strtod+0x1ca>
    7d7c:	c1 14       	cp	r12, r1
    7d7e:	d1 04       	cpc	r13, r1
    7d80:	29 f0       	breq	.+10     	; 0x7d8c <strtod+0x1ca>
    7d82:	cf 01       	movw	r24, r30
    7d84:	01 97       	sbiw	r24, 0x01	; 1
    7d86:	f6 01       	movw	r30, r12
    7d88:	91 83       	std	Z+1, r25	; 0x01
    7d8a:	80 83       	st	Z, r24
    7d8c:	ca 01       	movw	r24, r20
    7d8e:	b9 01       	movw	r22, r18
    7d90:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <__floatunsisf>
    7d94:	21 2f       	mov	r18, r17
    7d96:	23 70       	andi	r18, 0x03	; 3
    7d98:	23 30       	cpi	r18, 0x03	; 3
    7d9a:	19 f0       	breq	.+6      	; 0x7da2 <strtod+0x1e0>
    7d9c:	4b 01       	movw	r8, r22
    7d9e:	5c 01       	movw	r10, r24
    7da0:	06 c0       	rjmp	.+12     	; 0x7dae <strtod+0x1ec>
    7da2:	4b 01       	movw	r8, r22
    7da4:	5c 01       	movw	r10, r24
    7da6:	b7 fa       	bst	r11, 7
    7da8:	b0 94       	com	r11
    7daa:	b7 f8       	bld	r11, 7
    7dac:	b0 94       	com	r11
    7dae:	20 e0       	ldi	r18, 0x00	; 0
    7db0:	30 e0       	ldi	r19, 0x00	; 0
    7db2:	a9 01       	movw	r20, r18
    7db4:	c5 01       	movw	r24, r10
    7db6:	b4 01       	movw	r22, r8
    7db8:	0e 94 a0 2b 	call	0x5740	; 0x5740 <__cmpsf2>
    7dbc:	88 23       	and	r24, r24
    7dbe:	09 f4       	brne	.+2      	; 0x7dc2 <strtod+0x200>
    7dc0:	3e c0       	rjmp	.+124    	; 0x7e3e <strtod+0x27c>
    7dc2:	d7 ff       	sbrs	r29, 7
    7dc4:	06 c0       	rjmp	.+12     	; 0x7dd2 <strtod+0x210>
    7dc6:	d1 95       	neg	r29
    7dc8:	c1 95       	neg	r28
    7dca:	d1 09       	sbc	r29, r1
    7dcc:	0b e4       	ldi	r16, 0x4B	; 75
    7dce:	11 e0       	ldi	r17, 0x01	; 1
    7dd0:	02 c0       	rjmp	.+4      	; 0x7dd6 <strtod+0x214>
    7dd2:	03 e6       	ldi	r16, 0x63	; 99
    7dd4:	11 e0       	ldi	r17, 0x01	; 1
    7dd6:	68 01       	movw	r12, r16
    7dd8:	f8 e1       	ldi	r31, 0x18	; 24
    7dda:	cf 1a       	sub	r12, r31
    7ddc:	d1 08       	sbc	r13, r1
    7dde:	90 e2       	ldi	r25, 0x20	; 32
    7de0:	e9 2e       	mov	r14, r25
    7de2:	f1 2c       	mov	r15, r1
    7de4:	ce 15       	cp	r28, r14
    7de6:	df 05       	cpc	r29, r15
    7de8:	74 f0       	brlt	.+28     	; 0x7e06 <strtod+0x244>
    7dea:	f8 01       	movw	r30, r16
    7dec:	25 91       	lpm	r18, Z+
    7dee:	35 91       	lpm	r19, Z+
    7df0:	45 91       	lpm	r20, Z+
    7df2:	54 91       	lpm	r21, Z
    7df4:	c5 01       	movw	r24, r10
    7df6:	b4 01       	movw	r22, r8
    7df8:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__mulsf3>
    7dfc:	4b 01       	movw	r8, r22
    7dfe:	5c 01       	movw	r10, r24
    7e00:	ce 19       	sub	r28, r14
    7e02:	df 09       	sbc	r29, r15
    7e04:	ef cf       	rjmp	.-34     	; 0x7de4 <strtod+0x222>
    7e06:	04 50       	subi	r16, 0x04	; 4
    7e08:	11 09       	sbc	r17, r1
    7e0a:	f5 94       	asr	r15
    7e0c:	e7 94       	ror	r14
    7e0e:	0c 15       	cp	r16, r12
    7e10:	1d 05       	cpc	r17, r13
    7e12:	41 f7       	brne	.-48     	; 0x7de4 <strtod+0x222>
    7e14:	8a 2d       	mov	r24, r10
    7e16:	88 0f       	add	r24, r24
    7e18:	8b 2d       	mov	r24, r11
    7e1a:	88 1f       	adc	r24, r24
    7e1c:	8f 3f       	cpi	r24, 0xFF	; 255
    7e1e:	49 f0       	breq	.+18     	; 0x7e32 <strtod+0x270>
    7e20:	20 e0       	ldi	r18, 0x00	; 0
    7e22:	30 e0       	ldi	r19, 0x00	; 0
    7e24:	a9 01       	movw	r20, r18
    7e26:	c5 01       	movw	r24, r10
    7e28:	b4 01       	movw	r22, r8
    7e2a:	0e 94 a0 2b 	call	0x5740	; 0x5740 <__cmpsf2>
    7e2e:	81 11       	cpse	r24, r1
    7e30:	06 c0       	rjmp	.+12     	; 0x7e3e <strtod+0x27c>
    7e32:	82 e2       	ldi	r24, 0x22	; 34
    7e34:	90 e0       	ldi	r25, 0x00	; 0
    7e36:	90 93 a4 06 	sts	0x06A4, r25	; 0x8006a4 <errno+0x1>
    7e3a:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <errno>
    7e3e:	c5 01       	movw	r24, r10
    7e40:	b4 01       	movw	r22, r8
    7e42:	09 c0       	rjmp	.+18     	; 0x7e56 <strtod+0x294>
    7e44:	60 e0       	ldi	r22, 0x00	; 0
    7e46:	70 e0       	ldi	r23, 0x00	; 0
    7e48:	80 e8       	ldi	r24, 0x80	; 128
    7e4a:	9f ef       	ldi	r25, 0xFF	; 255
    7e4c:	04 c0       	rjmp	.+8      	; 0x7e56 <strtod+0x294>
    7e4e:	60 e0       	ldi	r22, 0x00	; 0
    7e50:	70 e0       	ldi	r23, 0x00	; 0
    7e52:	80 ec       	ldi	r24, 0xC0	; 192
    7e54:	9f e7       	ldi	r25, 0x7F	; 127
    7e56:	df 91       	pop	r29
    7e58:	cf 91       	pop	r28
    7e5a:	1f 91       	pop	r17
    7e5c:	0f 91       	pop	r16
    7e5e:	ff 90       	pop	r15
    7e60:	ef 90       	pop	r14
    7e62:	df 90       	pop	r13
    7e64:	cf 90       	pop	r12
    7e66:	bf 90       	pop	r11
    7e68:	af 90       	pop	r10
    7e6a:	9f 90       	pop	r9
    7e6c:	8f 90       	pop	r8
    7e6e:	08 95       	ret

00007e70 <__ctype_isfalse>:
    7e70:	99 27       	eor	r25, r25
    7e72:	88 27       	eor	r24, r24

00007e74 <__ctype_istrue>:
    7e74:	08 95       	ret

00007e76 <strncasecmp_P>:
    7e76:	fb 01       	movw	r30, r22
    7e78:	dc 01       	movw	r26, r24
    7e7a:	41 50       	subi	r20, 0x01	; 1
    7e7c:	50 40       	sbci	r21, 0x00	; 0
    7e7e:	88 f0       	brcs	.+34     	; 0x7ea2 <strncasecmp_P+0x2c>
    7e80:	8d 91       	ld	r24, X+
    7e82:	81 34       	cpi	r24, 0x41	; 65
    7e84:	1c f0       	brlt	.+6      	; 0x7e8c <strncasecmp_P+0x16>
    7e86:	8b 35       	cpi	r24, 0x5B	; 91
    7e88:	0c f4       	brge	.+2      	; 0x7e8c <strncasecmp_P+0x16>
    7e8a:	80 5e       	subi	r24, 0xE0	; 224
    7e8c:	65 91       	lpm	r22, Z+
    7e8e:	61 34       	cpi	r22, 0x41	; 65
    7e90:	1c f0       	brlt	.+6      	; 0x7e98 <strncasecmp_P+0x22>
    7e92:	6b 35       	cpi	r22, 0x5B	; 91
    7e94:	0c f4       	brge	.+2      	; 0x7e98 <strncasecmp_P+0x22>
    7e96:	60 5e       	subi	r22, 0xE0	; 224
    7e98:	86 1b       	sub	r24, r22
    7e9a:	61 11       	cpse	r22, r1
    7e9c:	71 f3       	breq	.-36     	; 0x7e7a <strncasecmp_P+0x4>
    7e9e:	99 0b       	sbc	r25, r25
    7ea0:	08 95       	ret
    7ea2:	88 1b       	sub	r24, r24
    7ea4:	fc cf       	rjmp	.-8      	; 0x7e9e <strncasecmp_P+0x28>

00007ea6 <strrev>:
    7ea6:	dc 01       	movw	r26, r24
    7ea8:	fc 01       	movw	r30, r24
    7eaa:	67 2f       	mov	r22, r23
    7eac:	71 91       	ld	r23, Z+
    7eae:	77 23       	and	r23, r23
    7eb0:	e1 f7       	brne	.-8      	; 0x7eaa <strrev+0x4>
    7eb2:	32 97       	sbiw	r30, 0x02	; 2
    7eb4:	04 c0       	rjmp	.+8      	; 0x7ebe <strrev+0x18>
    7eb6:	7c 91       	ld	r23, X
    7eb8:	6d 93       	st	X+, r22
    7eba:	70 83       	st	Z, r23
    7ebc:	62 91       	ld	r22, -Z
    7ebe:	ae 17       	cp	r26, r30
    7ec0:	bf 07       	cpc	r27, r31
    7ec2:	c8 f3       	brcs	.-14     	; 0x7eb6 <strrev+0x10>
    7ec4:	08 95       	ret

00007ec6 <__do_global_dtors>:
    7ec6:	16 e0       	ldi	r17, 0x06	; 6
    7ec8:	cb e2       	ldi	r28, 0x2B	; 43
    7eca:	d6 e0       	ldi	r29, 0x06	; 6
    7ecc:	00 e0       	ldi	r16, 0x00	; 0
    7ece:	05 c0       	rjmp	.+10     	; 0x7eda <__do_global_dtors+0x14>
    7ed0:	80 2f       	mov	r24, r16
    7ed2:	fe 01       	movw	r30, r28
    7ed4:	ab db       	rcall	.-2218   	; 0x762c <__tablejump2__>
    7ed6:	21 96       	adiw	r28, 0x01	; 1
    7ed8:	01 1d       	adc	r16, r1
    7eda:	cc 32       	cpi	r28, 0x2C	; 44
    7edc:	d1 07       	cpc	r29, r17
    7ede:	80 e0       	ldi	r24, 0x00	; 0
    7ee0:	08 07       	cpc	r16, r24
    7ee2:	b1 f7       	brne	.-20     	; 0x7ed0 <__do_global_dtors+0xa>
    7ee4:	f8 94       	cli

00007ee6 <__stop_program>:
    7ee6:	ff cf       	rjmp	.-2      	; 0x7ee6 <__stop_program>
